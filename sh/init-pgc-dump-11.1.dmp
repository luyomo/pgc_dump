--
-- pgc_dumpQL database dump
--

-- Dumped from database version 11.1
-- Dumped by pg_dump version 11.1

--DROP SCHEMA pgc_dump CASCADE;
CREATE SCHEMA pgc_dump;
ALTER SCHEMA pgc_dump OWNER TO pgc_dump;
COMMENT ON SCHEMA pgc_dump IS 'pgc_dump schema';
GRANT ALL ON SCHEMA pgc_dump TO pgc_dump;
GRANT ALL PRIVILEGES ON DATABASE pgc_dump TO pgc_dump;

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
--SELECT pgc_dump.set_config('search_path', '', false);
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_with_oids = false;


CREATE COLLATION pgc_dump."C" (provider = libc, locale = 'C');


ALTER COLLATION pgc_dump."C" OWNER TO pgc_dump;

--
-- Name: COLLATION "C"; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON COLLATION pgc_dump."C" IS 'standard C collation';


--
-- Name: POSIX; Type: COLLATION; Schema: pgc_dump; Owner: pgc_dump
--

CREATE COLLATION pgc_dump."POSIX" (provider = libc, locale = 'POSIX');


ALTER COLLATION pgc_dump."POSIX" OWNER TO pgc_dump;

--
-- Name: COLLATION "POSIX"; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON COLLATION pgc_dump."POSIX" IS 'standard POSIX collation';


CREATE TYPE pgc_dump."any";
ALTER TYPE pgc_dump.any OWNER TO pgc_dump;
CREATE TYPE pgc_dump."anyarray";
ALTER TYPE pgc_dump.anyarray OWNER TO pgc_dump;
CREATE TYPE pgc_dump.anyelement;
ALTER TYPE pgc_dump.anyelement OWNER TO pgc_dump;
CREATE TYPE pgc_dump.anyenum;
ALTER TYPE pgc_dump.anyenum OWNER TO pgc_dump;
CREATE TYPE pgc_dump.anynonarray;
ALTER TYPE pgc_dump.anynonarray OWNER TO pgc_dump;
CREATE TYPE pgc_dump.anyrange;
ALTER TYPE pgc_dump.anyrange OWNER TO pgc_dump;
CREATE TYPE pgc_dump.cstring;
ALTER TYPE pgc_dump.cstring OWNER TO pgc_dump;
CREATE TYPE pgc_dump.event_trigger;
ALTER TYPE pgc_dump.event_trigger OWNER TO pgc_dump;
CREATE TYPE pgc_dump.fdw_handler;
ALTER TYPE pgc_dump.fdw_handler OWNER TO pgc_dump;
CREATE TYPE pgc_dump.index_am_handler;
ALTER TYPE pgc_dump.index_am_handler OWNER TO pgc_dump;
CREATE TYPE pgc_dump.internal;
ALTER TYPE pgc_dump.internal OWNER TO pgc_dump;
CREATE TYPE pgc_dump.language_handler;
ALTER TYPE pgc_dump.language_handler OWNER TO pgc_dump;
CREATE TYPE pgc_dump.opaque;
ALTER TYPE pgc_dump.opaque OWNER TO pgc_dump;
CREATE TYPE pgc_dump.pg_ddl_command;
ALTER TYPE pgc_dump.pg_ddl_command OWNER TO pgc_dump;
CREATE TYPE pgc_dump.record;
ALTER TYPE pgc_dump.record OWNER TO pgc_dump;
CREATE TYPE pgc_dump.trigger;
ALTER TYPE pgc_dump.trigger OWNER TO pgc_dump;
CREATE TYPE pgc_dump.tsm_handler;
ALTER TYPE pgc_dump.tsm_handler OWNER TO pgc_dump;
CREATE TYPE pgc_dump.unknown;
ALTER TYPE pgc_dump.unknown OWNER TO pgc_dump;
CREATE TYPE pgc_dump.void;
ALTER TYPE pgc_dump.void OWNER TO pgc_dump;

--
-- Name: !; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.! (
    PROCEDURE = numeric_fac,
    LEFTARG = bigint
);


ALTER OPERATOR pgc_dump.! (bigint, NONE) OWNER TO pgc_dump;

--
-- Name: OPERATOR ! (bigint, NONE); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.! (bigint, NONE) IS 'factorial';


--
-- Name: !!; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.!! (
    PROCEDURE = numeric_fac,
    RIGHTARG = bigint
);


ALTER OPERATOR pgc_dump.!! (NONE, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR !! (NONE, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.!! (NONE, bigint) IS 'deprecated, use ! instead';


--
-- Name: !!; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.!! (
    PROCEDURE = tsquery_not,
    RIGHTARG = tsquery
);


ALTER OPERATOR pgc_dump.!! (NONE, tsquery) OWNER TO pgc_dump;

--
-- Name: OPERATOR !! (NONE, tsquery); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.!! (NONE, tsquery) IS 'NOT tsquery';


--
-- Name: !~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.!~ (
    PROCEDURE = nameregexne,
    LEFTARG = name,
    RIGHTARG = text,
    NEGATOR = OPERATOR(pgc_dump.~),
    RESTRICT = regexnesel,
    JOIN = regexnejoinsel
);


ALTER OPERATOR pgc_dump.!~ (name, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR !~ (name, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.!~ (name, text) IS 'does not match regular expression, case-sensitive';


--
-- Name: !~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.!~ (
    PROCEDURE = textregexne,
    LEFTARG = text,
    RIGHTARG = text,
    NEGATOR = OPERATOR(pgc_dump.~),
    RESTRICT = regexnesel,
    JOIN = regexnejoinsel
);


ALTER OPERATOR pgc_dump.!~ (text, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR !~ (text, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.!~ (text, text) IS 'does not match regular expression, case-sensitive';


--
-- Name: !~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.!~ (
    PROCEDURE = bpcharregexne,
    LEFTARG = character,
    RIGHTARG = text,
    NEGATOR = OPERATOR(pgc_dump.~),
    RESTRICT = regexnesel,
    JOIN = regexnejoinsel
);


ALTER OPERATOR pgc_dump.!~ (character, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR !~ (character, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.!~ (character, text) IS 'does not match regular expression, case-sensitive';


--
-- Name: !~*; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.!~* (
    PROCEDURE = nameicregexne,
    LEFTARG = name,
    RIGHTARG = text,
    NEGATOR = OPERATOR(pgc_dump.~*),
    RESTRICT = icregexnesel,
    JOIN = icregexnejoinsel
);


ALTER OPERATOR pgc_dump.!~* (name, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR !~* (name, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.!~* (name, text) IS 'does not match regular expression, case-insensitive';


--
-- Name: !~*; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.!~* (
    PROCEDURE = texticregexne,
    LEFTARG = text,
    RIGHTARG = text,
    NEGATOR = OPERATOR(pgc_dump.~*),
    RESTRICT = icregexnesel,
    JOIN = icregexnejoinsel
);


ALTER OPERATOR pgc_dump.!~* (text, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR !~* (text, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.!~* (text, text) IS 'does not match regular expression, case-insensitive';


--
-- Name: !~*; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.!~* (
    PROCEDURE = bpcharicregexne,
    LEFTARG = character,
    RIGHTARG = text,
    NEGATOR = OPERATOR(pgc_dump.~*),
    RESTRICT = icregexnesel,
    JOIN = icregexnejoinsel
);


ALTER OPERATOR pgc_dump.!~* (character, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR !~* (character, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.!~* (character, text) IS 'does not match regular expression, case-insensitive';


--
-- Name: !~~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.!~~ (
    PROCEDURE = namenlike,
    LEFTARG = name,
    RIGHTARG = text,
    NEGATOR = OPERATOR(pgc_dump.~~),
    RESTRICT = nlikesel,
    JOIN = nlikejoinsel
);


ALTER OPERATOR pgc_dump.!~~ (name, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR !~~ (name, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.!~~ (name, text) IS 'does not match LIKE expression';


--
-- Name: !~~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.!~~ (
    PROCEDURE = textnlike,
    LEFTARG = text,
    RIGHTARG = text,
    NEGATOR = OPERATOR(pgc_dump.~~),
    RESTRICT = nlikesel,
    JOIN = nlikejoinsel
);


ALTER OPERATOR pgc_dump.!~~ (text, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR !~~ (text, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.!~~ (text, text) IS 'does not match LIKE expression';


--
-- Name: !~~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.!~~ (
    PROCEDURE = bpcharnlike,
    LEFTARG = character,
    RIGHTARG = text,
    NEGATOR = OPERATOR(pgc_dump.~~),
    RESTRICT = nlikesel,
    JOIN = nlikejoinsel
);


ALTER OPERATOR pgc_dump.!~~ (character, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR !~~ (character, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.!~~ (character, text) IS 'does not match LIKE expression';


--
-- Name: !~~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.!~~ (
    PROCEDURE = byteanlike,
    LEFTARG = bytea,
    RIGHTARG = bytea,
    NEGATOR = OPERATOR(pgc_dump.~~),
    RESTRICT = nlikesel,
    JOIN = nlikejoinsel
);


ALTER OPERATOR pgc_dump.!~~ (bytea, bytea) OWNER TO pgc_dump;

--
-- Name: OPERATOR !~~ (bytea, bytea); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.!~~ (bytea, bytea) IS 'does not match LIKE expression';


--
-- Name: !~~*; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.!~~* (
    PROCEDURE = nameicnlike,
    LEFTARG = name,
    RIGHTARG = text,
    NEGATOR = OPERATOR(pgc_dump.~~*),
    RESTRICT = icnlikesel,
    JOIN = icnlikejoinsel
);


ALTER OPERATOR pgc_dump.!~~* (name, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR !~~* (name, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.!~~* (name, text) IS 'does not match LIKE expression, case-insensitive';


--
-- Name: !~~*; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.!~~* (
    PROCEDURE = texticnlike,
    LEFTARG = text,
    RIGHTARG = text,
    NEGATOR = OPERATOR(pgc_dump.~~*),
    RESTRICT = icnlikesel,
    JOIN = icnlikejoinsel
);


ALTER OPERATOR pgc_dump.!~~* (text, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR !~~* (text, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.!~~* (text, text) IS 'does not match LIKE expression, case-insensitive';


--
-- Name: !~~*; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.!~~* (
    PROCEDURE = bpcharicnlike,
    LEFTARG = character,
    RIGHTARG = text,
    NEGATOR = OPERATOR(pgc_dump.~~*),
    RESTRICT = icnlikesel,
    JOIN = icnlikejoinsel
);


ALTER OPERATOR pgc_dump.!~~* (character, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR !~~* (character, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.!~~* (character, text) IS 'does not match LIKE expression, case-insensitive';


--
-- Name: #; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.# (
    PROCEDURE = path_npoints,
    RIGHTARG = path
);


ALTER OPERATOR pgc_dump.# (NONE, path) OWNER TO pgc_dump;

--
-- Name: OPERATOR # (NONE, path); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.# (NONE, path) IS 'number of points';


--
-- Name: #; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.# (
    PROCEDURE = poly_npoints,
    RIGHTARG = polygon
);


ALTER OPERATOR pgc_dump.# (NONE, polygon) OWNER TO pgc_dump;

--
-- Name: OPERATOR # (NONE, polygon); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.# (NONE, polygon) IS 'number of points';


--
-- Name: #; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.# (
    PROCEDURE = box_intersect,
    LEFTARG = box,
    RIGHTARG = box
);


ALTER OPERATOR pgc_dump.# (box, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR # (box, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.# (box, box) IS 'box intersection';


--
-- Name: #; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.# (
    PROCEDURE = lseg_interpt,
    LEFTARG = lseg,
    RIGHTARG = lseg,
    COMMUTATOR = OPERATOR(pgc_dump.#)
);


ALTER OPERATOR pgc_dump.# (lseg, lseg) OWNER TO pgc_dump;

--
-- Name: OPERATOR # (lseg, lseg); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.# (lseg, lseg) IS 'intersection point';


--
-- Name: #; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.# (
    PROCEDURE = line_interpt,
    LEFTARG = line,
    RIGHTARG = line,
    COMMUTATOR = OPERATOR(pgc_dump.#)
);


ALTER OPERATOR pgc_dump.# (line, line) OWNER TO pgc_dump;

--
-- Name: OPERATOR # (line, line); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.# (line, line) IS 'intersection point';


--
-- Name: #; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.# (
    PROCEDURE = bitxor,
    LEFTARG = bit,
    RIGHTARG = bit,
    COMMUTATOR = OPERATOR(pgc_dump.#)
);


ALTER OPERATOR pgc_dump.# (bit, bit) OWNER TO pgc_dump;

--
-- Name: OPERATOR # (bit, bit); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.# (bit, bit) IS 'bitwise exclusive or';


--
-- Name: #; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.# (
    PROCEDURE = int2xor,
    LEFTARG = smallint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.#)
);


ALTER OPERATOR pgc_dump.# (smallint, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR # (smallint, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.# (smallint, smallint) IS 'bitwise exclusive or';


--
-- Name: #; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.# (
    PROCEDURE = int4xor,
    LEFTARG = integer,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.#)
);


ALTER OPERATOR pgc_dump.# (integer, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR # (integer, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.# (integer, integer) IS 'bitwise exclusive or';


--
-- Name: #; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.# (
    PROCEDURE = int8xor,
    LEFTARG = bigint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.#)
);


ALTER OPERATOR pgc_dump.# (bigint, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR # (bigint, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.# (bigint, bigint) IS 'bitwise exclusive or';


--
-- Name: ##; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.## (
    PROCEDURE = close_pl,
    LEFTARG = point,
    RIGHTARG = line
);


ALTER OPERATOR pgc_dump.## (point, line) OWNER TO pgc_dump;

--
-- Name: OPERATOR ## (point, line); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.## (point, line) IS 'closest point to A on B';


--
-- Name: ##; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.## (
    PROCEDURE = close_ps,
    LEFTARG = point,
    RIGHTARG = lseg
);


ALTER OPERATOR pgc_dump.## (point, lseg) OWNER TO pgc_dump;

--
-- Name: OPERATOR ## (point, lseg); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.## (point, lseg) IS 'closest point to A on B';


--
-- Name: ##; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.## (
    PROCEDURE = close_pb,
    LEFTARG = point,
    RIGHTARG = box
);


ALTER OPERATOR pgc_dump.## (point, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR ## (point, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.## (point, box) IS 'closest point to A on B';


--
-- Name: ##; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.## (
    PROCEDURE = close_sl,
    LEFTARG = lseg,
    RIGHTARG = line
);


ALTER OPERATOR pgc_dump.## (lseg, line) OWNER TO pgc_dump;

--
-- Name: OPERATOR ## (lseg, line); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.## (lseg, line) IS 'closest point to A on B';


--
-- Name: ##; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.## (
    PROCEDURE = close_sb,
    LEFTARG = lseg,
    RIGHTARG = box
);


ALTER OPERATOR pgc_dump.## (lseg, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR ## (lseg, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.## (lseg, box) IS 'closest point to A on B';


--
-- Name: ##; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.## (
    PROCEDURE = close_lb,
    LEFTARG = line,
    RIGHTARG = box
);


ALTER OPERATOR pgc_dump.## (line, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR ## (line, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.## (line, box) IS 'closest point to A on B';


--
-- Name: ##; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.## (
    PROCEDURE = close_ls,
    LEFTARG = line,
    RIGHTARG = lseg
);


ALTER OPERATOR pgc_dump.## (line, lseg) OWNER TO pgc_dump;

--
-- Name: OPERATOR ## (line, lseg); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.## (line, lseg) IS 'closest point to A on B';


--
-- Name: ##; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.## (
    PROCEDURE = close_lseg,
    LEFTARG = lseg,
    RIGHTARG = lseg
);


ALTER OPERATOR pgc_dump.## (lseg, lseg) OWNER TO pgc_dump;

--
-- Name: OPERATOR ## (lseg, lseg); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.## (lseg, lseg) IS 'closest point to A on B';


--
-- Name: #-; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.#- (
    PROCEDURE = jsonb_delete_path,
    LEFTARG = jsonb,
    RIGHTARG = text[]
);


ALTER OPERATOR pgc_dump.#- (jsonb, text[]) OWNER TO pgc_dump;

--
-- Name: OPERATOR #- (jsonb, text[]); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.#- (jsonb, text[]) IS 'delete path';


--
-- Name: #<; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.#< (
    PROCEDURE = tintervallenlt,
    LEFTARG = tinterval,
    RIGHTARG = reltime,
    NEGATOR = OPERATOR(pgc_dump.#>=)
);


ALTER OPERATOR pgc_dump.#< (tinterval, reltime) OWNER TO pgc_dump;

--
-- Name: OPERATOR #< (tinterval, reltime); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.#< (tinterval, reltime) IS 'less than by length';


--
-- Name: #<=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.#<= (
    PROCEDURE = tintervallenle,
    LEFTARG = tinterval,
    RIGHTARG = reltime,
    NEGATOR = OPERATOR(pgc_dump.#>)
);


ALTER OPERATOR pgc_dump.#<= (tinterval, reltime) OWNER TO pgc_dump;

--
-- Name: OPERATOR #<= (tinterval, reltime); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.#<= (tinterval, reltime) IS 'less than or equal by length';


--
-- Name: #<>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.#<> (
    PROCEDURE = tintervallenne,
    LEFTARG = tinterval,
    RIGHTARG = reltime,
    NEGATOR = OPERATOR(pgc_dump.#=)
);


ALTER OPERATOR pgc_dump.#<> (tinterval, reltime) OWNER TO pgc_dump;

--
-- Name: OPERATOR #<> (tinterval, reltime); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.#<> (tinterval, reltime) IS 'not equal by length';


--
-- Name: #=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.#= (
    PROCEDURE = tintervalleneq,
    LEFTARG = tinterval,
    RIGHTARG = reltime,
    NEGATOR = OPERATOR(pgc_dump.#<>)
);


ALTER OPERATOR pgc_dump.#= (tinterval, reltime) OWNER TO pgc_dump;

--
-- Name: OPERATOR #= (tinterval, reltime); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.#= (tinterval, reltime) IS 'equal by length';


--
-- Name: #>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.#> (
    PROCEDURE = tintervallengt,
    LEFTARG = tinterval,
    RIGHTARG = reltime,
    NEGATOR = OPERATOR(pgc_dump.#<=)
);


ALTER OPERATOR pgc_dump.#> (tinterval, reltime) OWNER TO pgc_dump;

--
-- Name: OPERATOR #> (tinterval, reltime); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.#> (tinterval, reltime) IS 'greater than by length';


--
-- Name: #>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.#> (
    PROCEDURE = jsonb_extract_path,
    LEFTARG = jsonb,
    RIGHTARG = text[]
);


ALTER OPERATOR pgc_dump.#> (jsonb, text[]) OWNER TO pgc_dump;

--
-- Name: OPERATOR #> (jsonb, text[]); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.#> (jsonb, text[]) IS 'get value from jsonb with path elements';


--
-- Name: #>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.#> (
    PROCEDURE = json_extract_path,
    LEFTARG = json,
    RIGHTARG = text[]
);


ALTER OPERATOR pgc_dump.#> (json, text[]) OWNER TO pgc_dump;

--
-- Name: OPERATOR #> (json, text[]); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.#> (json, text[]) IS 'get value from json with path elements';


--
-- Name: #>=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.#>= (
    PROCEDURE = tintervallenge,
    LEFTARG = tinterval,
    RIGHTARG = reltime,
    NEGATOR = OPERATOR(pgc_dump.#<)
);


ALTER OPERATOR pgc_dump.#>= (tinterval, reltime) OWNER TO pgc_dump;

--
-- Name: OPERATOR #>= (tinterval, reltime); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.#>= (tinterval, reltime) IS 'greater than or equal by length';


--
-- Name: #>>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.#>> (
    PROCEDURE = jsonb_extract_path_text,
    LEFTARG = jsonb,
    RIGHTARG = text[]
);


ALTER OPERATOR pgc_dump.#>> (jsonb, text[]) OWNER TO pgc_dump;

--
-- Name: OPERATOR #>> (jsonb, text[]); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.#>> (jsonb, text[]) IS 'get value from jsonb as text with path elements';


--
-- Name: #>>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.#>> (
    PROCEDURE = json_extract_path_text,
    LEFTARG = json,
    RIGHTARG = text[]
);


ALTER OPERATOR pgc_dump.#>> (json, text[]) OWNER TO pgc_dump;

--
-- Name: OPERATOR #>> (json, text[]); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.#>> (json, text[]) IS 'get value from json as text with path elements';


--
-- Name: %; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.% (
    PROCEDURE = int8mod,
    LEFTARG = bigint,
    RIGHTARG = bigint
);


ALTER OPERATOR pgc_dump.% (bigint, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR % (bigint, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.% (bigint, bigint) IS 'modulus';


--
-- Name: %; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.% (
    PROCEDURE = int2mod,
    LEFTARG = smallint,
    RIGHTARG = smallint
);


ALTER OPERATOR pgc_dump.% (smallint, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR % (smallint, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.% (smallint, smallint) IS 'modulus';


--
-- Name: %; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.% (
    PROCEDURE = int4mod,
    LEFTARG = integer,
    RIGHTARG = integer
);


ALTER OPERATOR pgc_dump.% (integer, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR % (integer, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.% (integer, integer) IS 'modulus';


--
-- Name: %; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.% (
    PROCEDURE = numeric_mod,
    LEFTARG = numeric,
    RIGHTARG = numeric
);


ALTER OPERATOR pgc_dump.% (numeric, numeric) OWNER TO pgc_dump;

--
-- Name: OPERATOR % (numeric, numeric); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.% (numeric, numeric) IS 'modulus';


--
-- Name: &; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.& (
    PROCEDURE = bitand,
    LEFTARG = bit,
    RIGHTARG = bit,
    COMMUTATOR = OPERATOR(pgc_dump.&)
);


ALTER OPERATOR pgc_dump.& (bit, bit) OWNER TO pgc_dump;

--
-- Name: OPERATOR & (bit, bit); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.& (bit, bit) IS 'bitwise and';


--
-- Name: &; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.& (
    PROCEDURE = int2and,
    LEFTARG = smallint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.&)
);


ALTER OPERATOR pgc_dump.& (smallint, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR & (smallint, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.& (smallint, smallint) IS 'bitwise and';


--
-- Name: &; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.& (
    PROCEDURE = int4and,
    LEFTARG = integer,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.&)
);


ALTER OPERATOR pgc_dump.& (integer, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR & (integer, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.& (integer, integer) IS 'bitwise and';


--
-- Name: &; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.& (
    PROCEDURE = int8and,
    LEFTARG = bigint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.&)
);


ALTER OPERATOR pgc_dump.& (bigint, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR & (bigint, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.& (bigint, bigint) IS 'bitwise and';


--
-- Name: &; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.& (
    PROCEDURE = inetand,
    LEFTARG = inet,
    RIGHTARG = inet
);


ALTER OPERATOR pgc_dump.& (inet, inet) OWNER TO pgc_dump;

--
-- Name: OPERATOR & (inet, inet); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.& (inet, inet) IS 'bitwise and';


--
-- Name: &; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.& (
    PROCEDURE = macaddr_and,
    LEFTARG = macaddr,
    RIGHTARG = macaddr
);


ALTER OPERATOR pgc_dump.& (macaddr, macaddr) OWNER TO pgc_dump;

--
-- Name: OPERATOR & (macaddr, macaddr); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.& (macaddr, macaddr) IS 'bitwise and';


--
-- Name: &; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.& (
    PROCEDURE = macaddr8_and,
    LEFTARG = macaddr8,
    RIGHTARG = macaddr8
);


ALTER OPERATOR pgc_dump.& (macaddr8, macaddr8) OWNER TO pgc_dump;

--
-- Name: OPERATOR & (macaddr8, macaddr8); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.& (macaddr8, macaddr8) IS 'bitwise and';


--
-- Name: &&; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.&& (
    PROCEDURE = poly_overlap,
    LEFTARG = polygon,
    RIGHTARG = polygon,
    COMMUTATOR = OPERATOR(pgc_dump.&&),
    RESTRICT = areasel,
    JOIN = areajoinsel
);


ALTER OPERATOR pgc_dump.&& (polygon, polygon) OWNER TO pgc_dump;

--
-- Name: OPERATOR && (polygon, polygon); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.&& (polygon, polygon) IS 'overlaps';


--
-- Name: &&; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.&& (
    PROCEDURE = box_overlap,
    LEFTARG = box,
    RIGHTARG = box,
    COMMUTATOR = OPERATOR(pgc_dump.&&),
    RESTRICT = areasel,
    JOIN = areajoinsel
);


ALTER OPERATOR pgc_dump.&& (box, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR && (box, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.&& (box, box) IS 'overlaps';


--
-- Name: &&; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.&& (
    PROCEDURE = tintervalov,
    LEFTARG = tinterval,
    RIGHTARG = tinterval,
    COMMUTATOR = OPERATOR(pgc_dump.&&)
);


ALTER OPERATOR pgc_dump.&& (tinterval, tinterval) OWNER TO pgc_dump;

--
-- Name: OPERATOR && (tinterval, tinterval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.&& (tinterval, tinterval) IS 'overlaps';


--
-- Name: &&; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.&& (
    PROCEDURE = circle_overlap,
    LEFTARG = circle,
    RIGHTARG = circle,
    COMMUTATOR = OPERATOR(pgc_dump.&&),
    RESTRICT = areasel,
    JOIN = areajoinsel
);


ALTER OPERATOR pgc_dump.&& (circle, circle) OWNER TO pgc_dump;

--
-- Name: OPERATOR && (circle, circle); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.&& (circle, circle) IS 'overlaps';


--
-- Name: &&; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.&& (
    PROCEDURE = arrayoverlap,
    LEFTARG = anyarray,
    RIGHTARG = anyarray,
    COMMUTATOR = OPERATOR(pgc_dump.&&),
    RESTRICT = arraycontsel,
    JOIN = arraycontjoinsel
);


ALTER OPERATOR pgc_dump.&& (anyarray, anyarray) OWNER TO pgc_dump;

--
-- Name: OPERATOR && (anyarray, anyarray); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.&& (anyarray, anyarray) IS 'overlaps';


--
-- Name: &&; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.&& (
    PROCEDURE = network_overlap,
    LEFTARG = inet,
    RIGHTARG = inet,
    COMMUTATOR = OPERATOR(pgc_dump.&&),
    RESTRICT = networksel,
    JOIN = networkjoinsel
);


ALTER OPERATOR pgc_dump.&& (inet, inet) OWNER TO pgc_dump;

--
-- Name: OPERATOR && (inet, inet); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.&& (inet, inet) IS 'overlaps (is subnet or supernet)';


--
-- Name: &&; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.&& (
    PROCEDURE = tsquery_and,
    LEFTARG = tsquery,
    RIGHTARG = tsquery
);


ALTER OPERATOR pgc_dump.&& (tsquery, tsquery) OWNER TO pgc_dump;

--
-- Name: OPERATOR && (tsquery, tsquery); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.&& (tsquery, tsquery) IS 'AND-concatenate';


--
-- Name: &&; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.&& (
    PROCEDURE = range_overlaps,
    LEFTARG = anyrange,
    RIGHTARG = anyrange,
    COMMUTATOR = OPERATOR(pgc_dump.&&),
    RESTRICT = rangesel,
    JOIN = areajoinsel
);


ALTER OPERATOR pgc_dump.&& (anyrange, anyrange) OWNER TO pgc_dump;

--
-- Name: OPERATOR && (anyrange, anyrange); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.&& (anyrange, anyrange) IS 'overlaps';


--
-- Name: &<; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.&< (
    PROCEDURE = poly_overleft,
    LEFTARG = polygon,
    RIGHTARG = polygon,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.&< (polygon, polygon) OWNER TO pgc_dump;

--
-- Name: OPERATOR &< (polygon, polygon); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.&< (polygon, polygon) IS 'overlaps or is left of';


--
-- Name: &<; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.&< (
    PROCEDURE = box_overleft,
    LEFTARG = box,
    RIGHTARG = box,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.&< (box, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR &< (box, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.&< (box, box) IS 'overlaps or is left of';


--
-- Name: &<; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.&< (
    PROCEDURE = circle_overleft,
    LEFTARG = circle,
    RIGHTARG = circle,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.&< (circle, circle) OWNER TO pgc_dump;

--
-- Name: OPERATOR &< (circle, circle); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.&< (circle, circle) IS 'overlaps or is left of';


--
-- Name: &<; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.&< (
    PROCEDURE = range_overleft,
    LEFTARG = anyrange,
    RIGHTARG = anyrange,
    RESTRICT = rangesel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.&< (anyrange, anyrange) OWNER TO pgc_dump;

--
-- Name: OPERATOR &< (anyrange, anyrange); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.&< (anyrange, anyrange) IS 'overlaps or is left of';


--
-- Name: &<|; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.&<| (
    PROCEDURE = box_overbelow,
    LEFTARG = box,
    RIGHTARG = box,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.&<| (box, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR &<| (box, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.&<| (box, box) IS 'overlaps or is below';


--
-- Name: &<|; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.&<| (
    PROCEDURE = poly_overbelow,
    LEFTARG = polygon,
    RIGHTARG = polygon,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.&<| (polygon, polygon) OWNER TO pgc_dump;

--
-- Name: OPERATOR &<| (polygon, polygon); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.&<| (polygon, polygon) IS 'overlaps or is below';


--
-- Name: &<|; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.&<| (
    PROCEDURE = circle_overbelow,
    LEFTARG = circle,
    RIGHTARG = circle,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.&<| (circle, circle) OWNER TO pgc_dump;

--
-- Name: OPERATOR &<| (circle, circle); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.&<| (circle, circle) IS 'overlaps or is below';


--
-- Name: &>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.&> (
    PROCEDURE = poly_overright,
    LEFTARG = polygon,
    RIGHTARG = polygon,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.&> (polygon, polygon) OWNER TO pgc_dump;

--
-- Name: OPERATOR &> (polygon, polygon); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.&> (polygon, polygon) IS 'overlaps or is right of';


--
-- Name: &>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.&> (
    PROCEDURE = box_overright,
    LEFTARG = box,
    RIGHTARG = box,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.&> (box, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR &> (box, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.&> (box, box) IS 'overlaps or is right of';


--
-- Name: &>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.&> (
    PROCEDURE = circle_overright,
    LEFTARG = circle,
    RIGHTARG = circle,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.&> (circle, circle) OWNER TO pgc_dump;

--
-- Name: OPERATOR &> (circle, circle); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.&> (circle, circle) IS 'overlaps or is right of';


--
-- Name: &>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.&> (
    PROCEDURE = range_overright,
    LEFTARG = anyrange,
    RIGHTARG = anyrange,
    RESTRICT = rangesel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.&> (anyrange, anyrange) OWNER TO pgc_dump;

--
-- Name: OPERATOR &> (anyrange, anyrange); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.&> (anyrange, anyrange) IS 'overlaps or is right of';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = int4mul,
    LEFTARG = integer,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (integer, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (integer, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (integer, integer) IS 'multiply';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = int2mul,
    LEFTARG = smallint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (smallint, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (smallint, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (smallint, smallint) IS 'multiply';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = int24mul,
    LEFTARG = smallint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (smallint, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (smallint, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (smallint, integer) IS 'multiply';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = int42mul,
    LEFTARG = integer,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (integer, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (integer, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (integer, smallint) IS 'multiply';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = float4mul,
    LEFTARG = real,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (real, real) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (real, real); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (real, real) IS 'multiply';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = float8mul,
    LEFTARG = double precision,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (double precision, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (double precision, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (double precision, double precision) IS 'multiply';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = int8mul,
    LEFTARG = bigint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (bigint, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (bigint, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (bigint, bigint) IS 'multiply';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = int84mul,
    LEFTARG = bigint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (bigint, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (bigint, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (bigint, integer) IS 'multiply';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = int48mul,
    LEFTARG = integer,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (integer, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (integer, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (integer, bigint) IS 'multiply';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = point_mul,
    LEFTARG = point,
    RIGHTARG = point,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (point, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (point, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (point, point) IS 'multiply points (scale/rotate)';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = path_mul_pt,
    LEFTARG = path,
    RIGHTARG = point
);


ALTER OPERATOR pgc_dump.* (path, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (path, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (path, point) IS 'multiply (rotate/scale path)';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = box_mul,
    LEFTARG = box,
    RIGHTARG = point
);


ALTER OPERATOR pgc_dump.* (box, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (box, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (box, point) IS 'multiply box by point (scale)';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = int82mul,
    LEFTARG = bigint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (bigint, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (bigint, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (bigint, smallint) IS 'multiply';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = int28mul,
    LEFTARG = smallint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (smallint, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (smallint, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (smallint, bigint) IS 'multiply';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = cash_mul_flt4,
    LEFTARG = money,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (money, real) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (money, real); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (money, real) IS 'multiply';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = flt4_mul_cash,
    LEFTARG = real,
    RIGHTARG = money,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (real, money) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (real, money); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (real, money) IS 'multiply';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = cash_mul_flt8,
    LEFTARG = money,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (money, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (money, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (money, double precision) IS 'multiply';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = cash_mul_int4,
    LEFTARG = money,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (money, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (money, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (money, integer) IS 'multiply';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = cash_mul_int2,
    LEFTARG = money,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (money, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (money, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (money, smallint) IS 'multiply';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = flt8_mul_cash,
    LEFTARG = double precision,
    RIGHTARG = money,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (double precision, money) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (double precision, money); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (double precision, money) IS 'multiply';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = int4_mul_cash,
    LEFTARG = integer,
    RIGHTARG = money,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (integer, money) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (integer, money); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (integer, money) IS 'multiply';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = int2_mul_cash,
    LEFTARG = smallint,
    RIGHTARG = money,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (smallint, money) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (smallint, money); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (smallint, money) IS 'multiply';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = float48mul,
    LEFTARG = real,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (real, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (real, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (real, double precision) IS 'multiply';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = float84mul,
    LEFTARG = double precision,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (double precision, real) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (double precision, real); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (double precision, real) IS 'multiply';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = circle_mul_pt,
    LEFTARG = circle,
    RIGHTARG = point
);


ALTER OPERATOR pgc_dump.* (circle, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (circle, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (circle, point) IS 'multiply';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = interval_mul,
    LEFTARG = interval,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (interval, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (interval, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (interval, double precision) IS 'multiply';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = mul_d_interval,
    LEFTARG = double precision,
    RIGHTARG = interval,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (double precision, interval) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (double precision, interval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (double precision, interval) IS 'multiply';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = numeric_mul,
    LEFTARG = numeric,
    RIGHTARG = numeric,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (numeric, numeric) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (numeric, numeric); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (numeric, numeric) IS 'multiply';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = cash_mul_int8,
    LEFTARG = money,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (money, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (money, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (money, bigint) IS 'multiply';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = int8_mul_cash,
    LEFTARG = bigint,
    RIGHTARG = money,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (bigint, money) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (bigint, money); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (bigint, money) IS 'multiply';


--
-- Name: *; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.* (
    PROCEDURE = range_intersect,
    LEFTARG = anyrange,
    RIGHTARG = anyrange,
    COMMUTATOR = OPERATOR(pgc_dump.*)
);


ALTER OPERATOR pgc_dump.* (anyrange, anyrange) OWNER TO pgc_dump;

--
-- Name: OPERATOR * (anyrange, anyrange); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.* (anyrange, anyrange) IS 'range intersection';


--
-- Name: *<; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.*< (
    PROCEDURE = record_image_lt,
    LEFTARG = record,
    RIGHTARG = record,
    COMMUTATOR = OPERATOR(pgc_dump.*>),
    NEGATOR = OPERATOR(pgc_dump.*>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.*< (record, record) OWNER TO pgc_dump;

--
-- Name: OPERATOR *< (record, record); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.*< (record, record) IS 'less than';


--
-- Name: *<=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.*<= (
    PROCEDURE = record_image_le,
    LEFTARG = record,
    RIGHTARG = record,
    COMMUTATOR = OPERATOR(pgc_dump.*>=),
    NEGATOR = OPERATOR(pgc_dump.*>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.*<= (record, record) OWNER TO pgc_dump;

--
-- Name: OPERATOR *<= (record, record); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.*<= (record, record) IS 'less than or equal';


--
-- Name: *<>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.*<> (
    PROCEDURE = record_image_ne,
    LEFTARG = record,
    RIGHTARG = record,
    COMMUTATOR = OPERATOR(pgc_dump.*<>),
    NEGATOR = OPERATOR(pgc_dump.*=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.*<> (record, record) OWNER TO pgc_dump;

--
-- Name: OPERATOR *<> (record, record); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.*<> (record, record) IS 'not identical';


--
-- Name: *=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.*= (
    PROCEDURE = record_image_eq,
    LEFTARG = record,
    RIGHTARG = record,
    COMMUTATOR = OPERATOR(pgc_dump.*=),
    NEGATOR = OPERATOR(pgc_dump.*<>),
    MERGES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.*= (record, record) OWNER TO pgc_dump;

--
-- Name: OPERATOR *= (record, record); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.*= (record, record) IS 'identical';


--
-- Name: *>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.*> (
    PROCEDURE = record_image_gt,
    LEFTARG = record,
    RIGHTARG = record,
    COMMUTATOR = OPERATOR(pgc_dump.*<),
    NEGATOR = OPERATOR(pgc_dump.*<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.*> (record, record) OWNER TO pgc_dump;

--
-- Name: OPERATOR *> (record, record); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.*> (record, record) IS 'greater than';


--
-- Name: *>=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.*>= (
    PROCEDURE = record_image_ge,
    LEFTARG = record,
    RIGHTARG = record,
    COMMUTATOR = OPERATOR(pgc_dump.*<=),
    NEGATOR = OPERATOR(pgc_dump.*<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.*>= (record, record) OWNER TO pgc_dump;

--
-- Name: OPERATOR *>= (record, record); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.*>= (record, record) IS 'greater than or equal';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = int8up,
    RIGHTARG = bigint
);


ALTER OPERATOR pgc_dump.+ (NONE, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (NONE, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (NONE, bigint) IS 'unary plus';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = int2up,
    RIGHTARG = smallint
);


ALTER OPERATOR pgc_dump.+ (NONE, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (NONE, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (NONE, smallint) IS 'unary plus';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = int4up,
    RIGHTARG = integer
);


ALTER OPERATOR pgc_dump.+ (NONE, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (NONE, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (NONE, integer) IS 'unary plus';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = float4up,
    RIGHTARG = real
);


ALTER OPERATOR pgc_dump.+ (NONE, real) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (NONE, real); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (NONE, real) IS 'unary plus';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = float8up,
    RIGHTARG = double precision
);


ALTER OPERATOR pgc_dump.+ (NONE, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (NONE, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (NONE, double precision) IS 'unary plus';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = numeric_uplus,
    RIGHTARG = numeric
);


ALTER OPERATOR pgc_dump.+ (NONE, numeric) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (NONE, numeric); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (NONE, numeric) IS 'unary plus';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = int2pl,
    LEFTARG = smallint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (smallint, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (smallint, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (smallint, smallint) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = int4pl,
    LEFTARG = integer,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (integer, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (integer, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (integer, integer) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = int24pl,
    LEFTARG = smallint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (smallint, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (smallint, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (smallint, integer) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = int42pl,
    LEFTARG = integer,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (integer, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (integer, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (integer, smallint) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = timepl,
    LEFTARG = abstime,
    RIGHTARG = reltime
);


ALTER OPERATOR pgc_dump.+ (abstime, reltime) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (abstime, reltime); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (abstime, reltime) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = float4pl,
    LEFTARG = real,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (real, real) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (real, real); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (real, real) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = float8pl,
    LEFTARG = double precision,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (double precision, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (double precision, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (double precision, double precision) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = int8pl,
    LEFTARG = bigint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (bigint, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (bigint, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (bigint, bigint) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = int84pl,
    LEFTARG = bigint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (bigint, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (bigint, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (bigint, integer) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = int48pl,
    LEFTARG = integer,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (integer, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (integer, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (integer, bigint) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = point_add,
    LEFTARG = point,
    RIGHTARG = point,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (point, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (point, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (point, point) IS 'add points (translate)';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = path_add,
    LEFTARG = path,
    RIGHTARG = path,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (path, path) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (path, path); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (path, path) IS 'concatenate';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = path_add_pt,
    LEFTARG = path,
    RIGHTARG = point
);


ALTER OPERATOR pgc_dump.+ (path, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (path, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (path, point) IS 'add (translate path)';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = box_add,
    LEFTARG = box,
    RIGHTARG = point
);


ALTER OPERATOR pgc_dump.+ (box, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (box, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (box, point) IS 'add point to box (translate)';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = int82pl,
    LEFTARG = bigint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (bigint, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (bigint, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (bigint, smallint) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = int28pl,
    LEFTARG = smallint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (smallint, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (smallint, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (smallint, bigint) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = cash_pl,
    LEFTARG = money,
    RIGHTARG = money,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (money, money) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (money, money); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (money, money) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = aclinsert,
    LEFTARG = aclitem[],
    RIGHTARG = aclitem
);


ALTER OPERATOR pgc_dump.+ (aclitem[], aclitem) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (aclitem[], aclitem); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (aclitem[], aclitem) IS 'add/update ACL item';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = date_pl_interval,
    LEFTARG = date,
    RIGHTARG = interval,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (date, interval) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (date, interval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (date, interval) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = date_pli,
    LEFTARG = date,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (date, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (date, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (date, integer) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = float48pl,
    LEFTARG = real,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (real, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (real, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (real, double precision) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = float84pl,
    LEFTARG = double precision,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (double precision, real) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (double precision, real); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (double precision, real) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = timestamptz_pl_interval,
    LEFTARG = timestamp with time zone,
    RIGHTARG = interval,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (timestamp with time zone, interval) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (timestamp with time zone, interval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (timestamp with time zone, interval) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = interval_pl,
    LEFTARG = interval,
    RIGHTARG = interval,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (interval, interval) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (interval, interval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (interval, interval) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = datetime_pl,
    LEFTARG = date,
    RIGHTARG = time without time zone,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (date, time without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (date, time without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (date, time without time zone) IS 'convert date and time to timestamp';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = datetimetz_pl,
    LEFTARG = date,
    RIGHTARG = time with time zone,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (date, time with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (date, time with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (date, time with time zone) IS 'convert date and time with time zone to timestamp with time zone';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = timedate_pl,
    LEFTARG = time without time zone,
    RIGHTARG = date,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (time without time zone, date) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (time without time zone, date); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (time without time zone, date) IS 'convert time and date to timestamp';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = timetzdate_pl,
    LEFTARG = time with time zone,
    RIGHTARG = date,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (time with time zone, date) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (time with time zone, date); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (time with time zone, date) IS 'convert time with time zone and date to timestamp with time zone';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = circle_add_pt,
    LEFTARG = circle,
    RIGHTARG = point
);


ALTER OPERATOR pgc_dump.+ (circle, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (circle, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (circle, point) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = numeric_add,
    LEFTARG = numeric,
    RIGHTARG = numeric,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (numeric, numeric) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (numeric, numeric); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (numeric, numeric) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = time_pl_interval,
    LEFTARG = time without time zone,
    RIGHTARG = interval,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (time without time zone, interval) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (time without time zone, interval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (time without time zone, interval) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = timetz_pl_interval,
    LEFTARG = time with time zone,
    RIGHTARG = interval,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (time with time zone, interval) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (time with time zone, interval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (time with time zone, interval) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = interval_pl_time,
    LEFTARG = interval,
    RIGHTARG = time without time zone,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (interval, time without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (interval, time without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (interval, time without time zone) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = timestamp_pl_interval,
    LEFTARG = timestamp without time zone,
    RIGHTARG = interval,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (timestamp without time zone, interval) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (timestamp without time zone, interval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (timestamp without time zone, interval) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = interval_pl_date,
    LEFTARG = interval,
    RIGHTARG = date,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (interval, date) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (interval, date); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (interval, date) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = interval_pl_timetz,
    LEFTARG = interval,
    RIGHTARG = time with time zone,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (interval, time with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (interval, time with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (interval, time with time zone) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = interval_pl_timestamp,
    LEFTARG = interval,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (interval, timestamp without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (interval, timestamp without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (interval, timestamp without time zone) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = interval_pl_timestamptz,
    LEFTARG = interval,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (interval, timestamp with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (interval, timestamp with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (interval, timestamp with time zone) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = integer_pl_date,
    LEFTARG = integer,
    RIGHTARG = date,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (integer, date) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (integer, date); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (integer, date) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = inetpl,
    LEFTARG = inet,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (inet, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (inet, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (inet, bigint) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = int8pl_inet,
    LEFTARG = bigint,
    RIGHTARG = inet,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (bigint, inet) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (bigint, inet); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (bigint, inet) IS 'add';


--
-- Name: +; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.+ (
    PROCEDURE = range_union,
    LEFTARG = anyrange,
    RIGHTARG = anyrange,
    COMMUTATOR = OPERATOR(pgc_dump.+)
);


ALTER OPERATOR pgc_dump.+ (anyrange, anyrange) OWNER TO pgc_dump;

--
-- Name: OPERATOR + (anyrange, anyrange); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.+ (anyrange, anyrange) IS 'range union';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = int8um,
    RIGHTARG = bigint
);


ALTER OPERATOR pgc_dump.- (NONE, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (NONE, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (NONE, bigint) IS 'negate';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = int4um,
    RIGHTARG = integer
);


ALTER OPERATOR pgc_dump.- (NONE, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (NONE, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (NONE, integer) IS 'negate';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = int2um,
    RIGHTARG = smallint
);


ALTER OPERATOR pgc_dump.- (NONE, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (NONE, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (NONE, smallint) IS 'negate';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = float4um,
    RIGHTARG = real
);


ALTER OPERATOR pgc_dump.- (NONE, real) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (NONE, real); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (NONE, real) IS 'negate';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = float8um,
    RIGHTARG = double precision
);


ALTER OPERATOR pgc_dump.- (NONE, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (NONE, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (NONE, double precision) IS 'negate';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = interval_um,
    RIGHTARG = interval
);


ALTER OPERATOR pgc_dump.- (NONE, interval) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (NONE, interval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (NONE, interval) IS 'negate';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = numeric_uminus,
    RIGHTARG = numeric
);


ALTER OPERATOR pgc_dump.- (NONE, numeric) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (NONE, numeric); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (NONE, numeric) IS 'negate';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = int2mi,
    LEFTARG = smallint,
    RIGHTARG = smallint
);


ALTER OPERATOR pgc_dump.- (smallint, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (smallint, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (smallint, smallint) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = int4mi,
    LEFTARG = integer,
    RIGHTARG = integer
);


ALTER OPERATOR pgc_dump.- (integer, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (integer, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (integer, integer) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = int24mi,
    LEFTARG = smallint,
    RIGHTARG = integer
);


ALTER OPERATOR pgc_dump.- (smallint, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (smallint, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (smallint, integer) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = int42mi,
    LEFTARG = integer,
    RIGHTARG = smallint
);


ALTER OPERATOR pgc_dump.- (integer, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (integer, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (integer, smallint) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = timemi,
    LEFTARG = abstime,
    RIGHTARG = reltime
);


ALTER OPERATOR pgc_dump.- (abstime, reltime) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (abstime, reltime); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (abstime, reltime) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = float4mi,
    LEFTARG = real,
    RIGHTARG = real
);


ALTER OPERATOR pgc_dump.- (real, real) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (real, real); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (real, real) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = float8mi,
    LEFTARG = double precision,
    RIGHTARG = double precision
);


ALTER OPERATOR pgc_dump.- (double precision, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (double precision, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (double precision, double precision) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = int8mi,
    LEFTARG = bigint,
    RIGHTARG = bigint
);


ALTER OPERATOR pgc_dump.- (bigint, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (bigint, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (bigint, bigint) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = int84mi,
    LEFTARG = bigint,
    RIGHTARG = integer
);


ALTER OPERATOR pgc_dump.- (bigint, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (bigint, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (bigint, integer) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = int48mi,
    LEFTARG = integer,
    RIGHTARG = bigint
);


ALTER OPERATOR pgc_dump.- (integer, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (integer, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (integer, bigint) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = point_sub,
    LEFTARG = point,
    RIGHTARG = point
);


ALTER OPERATOR pgc_dump.- (point, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (point, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (point, point) IS 'subtract points (translate)';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = path_sub_pt,
    LEFTARG = path,
    RIGHTARG = point
);


ALTER OPERATOR pgc_dump.- (path, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (path, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (path, point) IS 'subtract (translate path)';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = box_sub,
    LEFTARG = box,
    RIGHTARG = point
);


ALTER OPERATOR pgc_dump.- (box, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (box, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (box, point) IS 'subtract point from box (translate)';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = int82mi,
    LEFTARG = bigint,
    RIGHTARG = smallint
);


ALTER OPERATOR pgc_dump.- (bigint, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (bigint, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (bigint, smallint) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = int28mi,
    LEFTARG = smallint,
    RIGHTARG = bigint
);


ALTER OPERATOR pgc_dump.- (smallint, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (smallint, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (smallint, bigint) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = cash_mi,
    LEFTARG = money,
    RIGHTARG = money
);


ALTER OPERATOR pgc_dump.- (money, money) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (money, money); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (money, money) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = aclremove,
    LEFTARG = aclitem[],
    RIGHTARG = aclitem
);


ALTER OPERATOR pgc_dump.- (aclitem[], aclitem) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (aclitem[], aclitem); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (aclitem[], aclitem) IS 'remove ACL item';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = date_mi_interval,
    LEFTARG = date,
    RIGHTARG = interval
);


ALTER OPERATOR pgc_dump.- (date, interval) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (date, interval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (date, interval) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = date_mi,
    LEFTARG = date,
    RIGHTARG = date
);


ALTER OPERATOR pgc_dump.- (date, date) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (date, date); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (date, date) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = date_mii,
    LEFTARG = date,
    RIGHTARG = integer
);


ALTER OPERATOR pgc_dump.- (date, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (date, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (date, integer) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = float48mi,
    LEFTARG = real,
    RIGHTARG = double precision
);


ALTER OPERATOR pgc_dump.- (real, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (real, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (real, double precision) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = float84mi,
    LEFTARG = double precision,
    RIGHTARG = real
);


ALTER OPERATOR pgc_dump.- (double precision, real) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (double precision, real); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (double precision, real) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = timestamptz_mi,
    LEFTARG = timestamp with time zone,
    RIGHTARG = timestamp with time zone
);


ALTER OPERATOR pgc_dump.- (timestamp with time zone, timestamp with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (timestamp with time zone, timestamp with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (timestamp with time zone, timestamp with time zone) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = timestamptz_mi_interval,
    LEFTARG = timestamp with time zone,
    RIGHTARG = interval
);


ALTER OPERATOR pgc_dump.- (timestamp with time zone, interval) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (timestamp with time zone, interval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (timestamp with time zone, interval) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = interval_mi,
    LEFTARG = interval,
    RIGHTARG = interval
);


ALTER OPERATOR pgc_dump.- (interval, interval) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (interval, interval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (interval, interval) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = time_mi_time,
    LEFTARG = time without time zone,
    RIGHTARG = time without time zone
);


ALTER OPERATOR pgc_dump.- (time without time zone, time without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (time without time zone, time without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (time without time zone, time without time zone) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = circle_sub_pt,
    LEFTARG = circle,
    RIGHTARG = point
);


ALTER OPERATOR pgc_dump.- (circle, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (circle, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (circle, point) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = numeric_sub,
    LEFTARG = numeric,
    RIGHTARG = numeric
);


ALTER OPERATOR pgc_dump.- (numeric, numeric) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (numeric, numeric); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (numeric, numeric) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = time_mi_interval,
    LEFTARG = time without time zone,
    RIGHTARG = interval
);


ALTER OPERATOR pgc_dump.- (time without time zone, interval) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (time without time zone, interval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (time without time zone, interval) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = timetz_mi_interval,
    LEFTARG = time with time zone,
    RIGHTARG = interval
);


ALTER OPERATOR pgc_dump.- (time with time zone, interval) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (time with time zone, interval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (time with time zone, interval) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = timestamp_mi,
    LEFTARG = timestamp without time zone,
    RIGHTARG = timestamp without time zone
);


ALTER OPERATOR pgc_dump.- (timestamp without time zone, timestamp without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (timestamp without time zone, timestamp without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (timestamp without time zone, timestamp without time zone) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = timestamp_mi_interval,
    LEFTARG = timestamp without time zone,
    RIGHTARG = interval
);


ALTER OPERATOR pgc_dump.- (timestamp without time zone, interval) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (timestamp without time zone, interval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (timestamp without time zone, interval) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = inetmi_int8,
    LEFTARG = inet,
    RIGHTARG = bigint
);


ALTER OPERATOR pgc_dump.- (inet, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (inet, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (inet, bigint) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = inetmi,
    LEFTARG = inet,
    RIGHTARG = inet
);


ALTER OPERATOR pgc_dump.- (inet, inet) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (inet, inet); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (inet, inet) IS 'subtract';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = pg_lsn_mi,
    LEFTARG = pg_lsn,
    RIGHTARG = pg_lsn
);


ALTER OPERATOR pgc_dump.- (pg_lsn, pg_lsn) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (pg_lsn, pg_lsn); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (pg_lsn, pg_lsn) IS 'minus';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = jsonb_delete,
    LEFTARG = jsonb,
    RIGHTARG = text
);


ALTER OPERATOR pgc_dump.- (jsonb, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (jsonb, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (jsonb, text) IS 'delete object field';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = jsonb_delete,
    LEFTARG = jsonb,
    RIGHTARG = integer
);


ALTER OPERATOR pgc_dump.- (jsonb, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (jsonb, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (jsonb, integer) IS 'delete array element';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = jsonb_delete,
    LEFTARG = jsonb,
    RIGHTARG = text[]
);


ALTER OPERATOR pgc_dump.- (jsonb, text[]) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (jsonb, text[]); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (jsonb, text[]) IS 'delete object fields';


--
-- Name: -; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.- (
    PROCEDURE = range_minus,
    LEFTARG = anyrange,
    RIGHTARG = anyrange
);


ALTER OPERATOR pgc_dump.- (anyrange, anyrange) OWNER TO pgc_dump;

--
-- Name: OPERATOR - (anyrange, anyrange); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.- (anyrange, anyrange) IS 'range difference';


--
-- Name: ->; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.-> (
    PROCEDURE = jsonb_object_field,
    LEFTARG = jsonb,
    RIGHTARG = text
);


ALTER OPERATOR pgc_dump.-> (jsonb, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR -> (jsonb, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.-> (jsonb, text) IS 'get jsonb object field';


--
-- Name: ->; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.-> (
    PROCEDURE = jsonb_array_element,
    LEFTARG = jsonb,
    RIGHTARG = integer
);


ALTER OPERATOR pgc_dump.-> (jsonb, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR -> (jsonb, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.-> (jsonb, integer) IS 'get jsonb array element';


--
-- Name: ->; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.-> (
    PROCEDURE = json_object_field,
    LEFTARG = json,
    RIGHTARG = text
);


ALTER OPERATOR pgc_dump.-> (json, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR -> (json, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.-> (json, text) IS 'get json object field';


--
-- Name: ->; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.-> (
    PROCEDURE = json_array_element,
    LEFTARG = json,
    RIGHTARG = integer
);


ALTER OPERATOR pgc_dump.-> (json, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR -> (json, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.-> (json, integer) IS 'get json array element';


--
-- Name: ->>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.->> (
    PROCEDURE = jsonb_object_field_text,
    LEFTARG = jsonb,
    RIGHTARG = text
);


ALTER OPERATOR pgc_dump.->> (jsonb, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR ->> (jsonb, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.->> (jsonb, text) IS 'get jsonb object field as text';


--
-- Name: ->>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.->> (
    PROCEDURE = jsonb_array_element_text,
    LEFTARG = jsonb,
    RIGHTARG = integer
);


ALTER OPERATOR pgc_dump.->> (jsonb, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR ->> (jsonb, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.->> (jsonb, integer) IS 'get jsonb array element as text';


--
-- Name: ->>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.->> (
    PROCEDURE = json_object_field_text,
    LEFTARG = json,
    RIGHTARG = text
);


ALTER OPERATOR pgc_dump.->> (json, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR ->> (json, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.->> (json, text) IS 'get json object field as text';


--
-- Name: ->>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.->> (
    PROCEDURE = json_array_element_text,
    LEFTARG = json,
    RIGHTARG = integer
);


ALTER OPERATOR pgc_dump.->> (json, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR ->> (json, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.->> (json, integer) IS 'get json array element as text';


--
-- Name: -|-; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.-|- (
    PROCEDURE = range_adjacent,
    LEFTARG = anyrange,
    RIGHTARG = anyrange,
    COMMUTATOR = OPERATOR(pgc_dump.-|-),
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.-|- (anyrange, anyrange) OWNER TO pgc_dump;

--
-- Name: OPERATOR -|- (anyrange, anyrange); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.-|- (anyrange, anyrange) IS 'is adjacent to';


--
-- Name: /; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump./ (
    PROCEDURE = int2div,
    LEFTARG = smallint,
    RIGHTARG = smallint
);


ALTER OPERATOR pgc_dump./ (smallint, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR / (smallint, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump./ (smallint, smallint) IS 'divide';


--
-- Name: /; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump./ (
    PROCEDURE = int4div,
    LEFTARG = integer,
    RIGHTARG = integer
);


ALTER OPERATOR pgc_dump./ (integer, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR / (integer, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump./ (integer, integer) IS 'divide';


--
-- Name: /; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump./ (
    PROCEDURE = int24div,
    LEFTARG = smallint,
    RIGHTARG = integer
);


ALTER OPERATOR pgc_dump./ (smallint, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR / (smallint, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump./ (smallint, integer) IS 'divide';


--
-- Name: /; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump./ (
    PROCEDURE = int42div,
    LEFTARG = integer,
    RIGHTARG = smallint
);


ALTER OPERATOR pgc_dump./ (integer, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR / (integer, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump./ (integer, smallint) IS 'divide';


--
-- Name: /; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump./ (
    PROCEDURE = float4div,
    LEFTARG = real,
    RIGHTARG = real
);


ALTER OPERATOR pgc_dump./ (real, real) OWNER TO pgc_dump;

--
-- Name: OPERATOR / (real, real); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump./ (real, real) IS 'divide';


--
-- Name: /; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump./ (
    PROCEDURE = float8div,
    LEFTARG = double precision,
    RIGHTARG = double precision
);


ALTER OPERATOR pgc_dump./ (double precision, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR / (double precision, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump./ (double precision, double precision) IS 'divide';


--
-- Name: /; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump./ (
    PROCEDURE = int8div,
    LEFTARG = bigint,
    RIGHTARG = bigint
);


ALTER OPERATOR pgc_dump./ (bigint, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR / (bigint, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump./ (bigint, bigint) IS 'divide';


--
-- Name: /; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump./ (
    PROCEDURE = int84div,
    LEFTARG = bigint,
    RIGHTARG = integer
);


ALTER OPERATOR pgc_dump./ (bigint, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR / (bigint, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump./ (bigint, integer) IS 'divide';


--
-- Name: /; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump./ (
    PROCEDURE = int48div,
    LEFTARG = integer,
    RIGHTARG = bigint
);


ALTER OPERATOR pgc_dump./ (integer, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR / (integer, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump./ (integer, bigint) IS 'divide';


--
-- Name: /; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump./ (
    PROCEDURE = point_div,
    LEFTARG = point,
    RIGHTARG = point
);


ALTER OPERATOR pgc_dump./ (point, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR / (point, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump./ (point, point) IS 'divide points (scale/rotate)';


--
-- Name: /; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump./ (
    PROCEDURE = path_div_pt,
    LEFTARG = path,
    RIGHTARG = point
);


ALTER OPERATOR pgc_dump./ (path, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR / (path, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump./ (path, point) IS 'divide (rotate/scale path)';


--
-- Name: /; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump./ (
    PROCEDURE = box_div,
    LEFTARG = box,
    RIGHTARG = point
);


ALTER OPERATOR pgc_dump./ (box, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR / (box, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump./ (box, point) IS 'divide box by point (scale)';


--
-- Name: /; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump./ (
    PROCEDURE = int82div,
    LEFTARG = bigint,
    RIGHTARG = smallint
);


ALTER OPERATOR pgc_dump./ (bigint, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR / (bigint, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump./ (bigint, smallint) IS 'divide';


--
-- Name: /; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump./ (
    PROCEDURE = int28div,
    LEFTARG = smallint,
    RIGHTARG = bigint
);


ALTER OPERATOR pgc_dump./ (smallint, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR / (smallint, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump./ (smallint, bigint) IS 'divide';


--
-- Name: /; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump./ (
    PROCEDURE = cash_div_flt4,
    LEFTARG = money,
    RIGHTARG = real
);


ALTER OPERATOR pgc_dump./ (money, real) OWNER TO pgc_dump;

--
-- Name: OPERATOR / (money, real); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump./ (money, real) IS 'divide';


--
-- Name: /; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump./ (
    PROCEDURE = cash_div_flt8,
    LEFTARG = money,
    RIGHTARG = double precision
);


ALTER OPERATOR pgc_dump./ (money, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR / (money, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump./ (money, double precision) IS 'divide';


--
-- Name: /; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump./ (
    PROCEDURE = cash_div_int4,
    LEFTARG = money,
    RIGHTARG = integer
);


ALTER OPERATOR pgc_dump./ (money, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR / (money, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump./ (money, integer) IS 'divide';


--
-- Name: /; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump./ (
    PROCEDURE = cash_div_int2,
    LEFTARG = money,
    RIGHTARG = smallint
);


ALTER OPERATOR pgc_dump./ (money, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR / (money, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump./ (money, smallint) IS 'divide';


--
-- Name: /; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump./ (
    PROCEDURE = float48div,
    LEFTARG = real,
    RIGHTARG = double precision
);


ALTER OPERATOR pgc_dump./ (real, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR / (real, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump./ (real, double precision) IS 'divide';


--
-- Name: /; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump./ (
    PROCEDURE = float84div,
    LEFTARG = double precision,
    RIGHTARG = real
);


ALTER OPERATOR pgc_dump./ (double precision, real) OWNER TO pgc_dump;

--
-- Name: OPERATOR / (double precision, real); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump./ (double precision, real) IS 'divide';


--
-- Name: /; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump./ (
    PROCEDURE = circle_div_pt,
    LEFTARG = circle,
    RIGHTARG = point
);


ALTER OPERATOR pgc_dump./ (circle, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR / (circle, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump./ (circle, point) IS 'divide';


--
-- Name: /; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump./ (
    PROCEDURE = interval_div,
    LEFTARG = interval,
    RIGHTARG = double precision
);


ALTER OPERATOR pgc_dump./ (interval, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR / (interval, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump./ (interval, double precision) IS 'divide';


--
-- Name: /; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump./ (
    PROCEDURE = numeric_div,
    LEFTARG = numeric,
    RIGHTARG = numeric
);


ALTER OPERATOR pgc_dump./ (numeric, numeric) OWNER TO pgc_dump;

--
-- Name: OPERATOR / (numeric, numeric); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump./ (numeric, numeric) IS 'divide';


--
-- Name: /; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump./ (
    PROCEDURE = cash_div_int8,
    LEFTARG = money,
    RIGHTARG = bigint
);


ALTER OPERATOR pgc_dump./ (money, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR / (money, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump./ (money, bigint) IS 'divide';


--
-- Name: /; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump./ (
    PROCEDURE = cash_div_cash,
    LEFTARG = money,
    RIGHTARG = money
);


ALTER OPERATOR pgc_dump./ (money, money) OWNER TO pgc_dump;

--
-- Name: OPERATOR / (money, money); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump./ (money, money) IS 'divide';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = int48lt,
    LEFTARG = integer,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (integer, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (integer, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (integer, bigint) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = boollt,
    LEFTARG = boolean,
    RIGHTARG = boolean,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (boolean, boolean) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (boolean, boolean); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (boolean, boolean) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = int2lt,
    LEFTARG = smallint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (smallint, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (smallint, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (smallint, smallint) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = int4lt,
    LEFTARG = integer,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (integer, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (integer, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (integer, integer) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = int8lt,
    LEFTARG = bigint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (bigint, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (bigint, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (bigint, bigint) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = int84lt,
    LEFTARG = bigint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (bigint, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (bigint, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (bigint, integer) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = box_lt,
    LEFTARG = box,
    RIGHTARG = box,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = areasel,
    JOIN = areajoinsel
);


ALTER OPERATOR pgc_dump.< (box, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (box, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (box, box) IS 'less than by area';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = int24lt,
    LEFTARG = smallint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (smallint, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (smallint, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (smallint, integer) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = int42lt,
    LEFTARG = integer,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (integer, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (integer, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (integer, smallint) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = abstimelt,
    LEFTARG = abstime,
    RIGHTARG = abstime,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (abstime, abstime) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (abstime, abstime); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (abstime, abstime) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = reltimelt,
    LEFTARG = reltime,
    RIGHTARG = reltime,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (reltime, reltime) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (reltime, reltime); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (reltime, reltime) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = oidlt,
    LEFTARG = oid,
    RIGHTARG = oid,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (oid, oid) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (oid, oid); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (oid, oid) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = float4lt,
    LEFTARG = real,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (real, real) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (real, real); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (real, real) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = charlt,
    LEFTARG = "char",
    RIGHTARG = "char",
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< ("char", "char") OWNER TO pgc_dump;

--
-- Name: OPERATOR < ("char", "char"); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< ("char", "char") IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = oidvectorlt,
    LEFTARG = oidvector,
    RIGHTARG = oidvector,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (oidvector, oidvector) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (oidvector, oidvector); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (oidvector, oidvector) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = namelt,
    LEFTARG = name,
    RIGHTARG = name,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (name, name) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (name, name); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (name, name) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = text_lt,
    LEFTARG = text,
    RIGHTARG = text,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (text, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (text, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (text, text) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = float8lt,
    LEFTARG = double precision,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (double precision, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (double precision, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (double precision, double precision) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = path_n_lt,
    LEFTARG = path,
    RIGHTARG = path,
    COMMUTATOR = OPERATOR(pgc_dump.>)
);


ALTER OPERATOR pgc_dump.< (path, path) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (path, path); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (path, path) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = tintervallt,
    LEFTARG = tinterval,
    RIGHTARG = tinterval,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (tinterval, tinterval) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (tinterval, tinterval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (tinterval, tinterval) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = cash_lt,
    LEFTARG = money,
    RIGHTARG = money,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (money, money) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (money, money); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (money, money) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = bpcharlt,
    LEFTARG = character,
    RIGHTARG = character,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (character, character) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (character, character); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (character, character) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = array_lt,
    LEFTARG = anyarray,
    RIGHTARG = anyarray,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (anyarray, anyarray) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (anyarray, anyarray); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (anyarray, anyarray) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = date_lt,
    LEFTARG = date,
    RIGHTARG = date,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (date, date) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (date, date); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (date, date) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = time_lt,
    LEFTARG = time without time zone,
    RIGHTARG = time without time zone,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (time without time zone, time without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (time without time zone, time without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (time without time zone, time without time zone) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = float48lt,
    LEFTARG = real,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (real, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (real, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (real, double precision) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = float84lt,
    LEFTARG = double precision,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (double precision, real) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (double precision, real); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (double precision, real) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = network_lt,
    LEFTARG = inet,
    RIGHTARG = inet,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (inet, inet) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (inet, inet); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (inet, inet) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = macaddr_lt,
    LEFTARG = macaddr,
    RIGHTARG = macaddr,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (macaddr, macaddr) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (macaddr, macaddr); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (macaddr, macaddr) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = timestamptz_lt,
    LEFTARG = timestamp with time zone,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (timestamp with time zone, timestamp with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (timestamp with time zone, timestamp with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (timestamp with time zone, timestamp with time zone) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = interval_lt,
    LEFTARG = interval,
    RIGHTARG = interval,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (interval, interval) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (interval, interval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (interval, interval) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = circle_lt,
    LEFTARG = circle,
    RIGHTARG = circle,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = areasel,
    JOIN = areajoinsel
);


ALTER OPERATOR pgc_dump.< (circle, circle) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (circle, circle); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (circle, circle) IS 'less than by area';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = timetz_lt,
    LEFTARG = time with time zone,
    RIGHTARG = time with time zone,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (time with time zone, time with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (time with time zone, time with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (time with time zone, time with time zone) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = lseg_lt,
    LEFTARG = lseg,
    RIGHTARG = lseg,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=)
);


ALTER OPERATOR pgc_dump.< (lseg, lseg) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (lseg, lseg); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (lseg, lseg) IS 'less than by length';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = numeric_lt,
    LEFTARG = numeric,
    RIGHTARG = numeric,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (numeric, numeric) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (numeric, numeric); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (numeric, numeric) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = bitlt,
    LEFTARG = bit,
    RIGHTARG = bit,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (bit, bit) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (bit, bit); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (bit, bit) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = varbitlt,
    LEFTARG = bit varying,
    RIGHTARG = bit varying,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (bit varying, bit varying) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (bit varying, bit varying); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (bit varying, bit varying) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = int28lt,
    LEFTARG = smallint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (smallint, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (smallint, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (smallint, bigint) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = int82lt,
    LEFTARG = bigint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (bigint, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (bigint, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (bigint, smallint) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = bytealt,
    LEFTARG = bytea,
    RIGHTARG = bytea,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (bytea, bytea) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (bytea, bytea); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (bytea, bytea) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = timestamp_lt,
    LEFTARG = timestamp without time zone,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (timestamp without time zone, timestamp without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (timestamp without time zone, timestamp without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (timestamp without time zone, timestamp without time zone) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = date_lt_timestamp,
    LEFTARG = date,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (date, timestamp without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (date, timestamp without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (date, timestamp without time zone) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = date_lt_timestamptz,
    LEFTARG = date,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (date, timestamp with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (date, timestamp with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (date, timestamp with time zone) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = timestamp_lt_date,
    LEFTARG = timestamp without time zone,
    RIGHTARG = date,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (timestamp without time zone, date) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (timestamp without time zone, date); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (timestamp without time zone, date) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = timestamptz_lt_date,
    LEFTARG = timestamp with time zone,
    RIGHTARG = date,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (timestamp with time zone, date) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (timestamp with time zone, date); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (timestamp with time zone, date) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = timestamp_lt_timestamptz,
    LEFTARG = timestamp without time zone,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (timestamp without time zone, timestamp with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (timestamp without time zone, timestamp with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (timestamp without time zone, timestamp with time zone) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = timestamptz_lt_timestamp,
    LEFTARG = timestamp with time zone,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (timestamp with time zone, timestamp without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (timestamp with time zone, timestamp without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (timestamp with time zone, timestamp without time zone) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = tidlt,
    LEFTARG = tid,
    RIGHTARG = tid,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (tid, tid) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (tid, tid); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (tid, tid) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = uuid_lt,
    LEFTARG = uuid,
    RIGHTARG = uuid,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (uuid, uuid) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (uuid, uuid); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (uuid, uuid) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = record_lt,
    LEFTARG = record,
    RIGHTARG = record,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (record, record) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (record, record); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (record, record) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = pg_lsn_lt,
    LEFTARG = pg_lsn,
    RIGHTARG = pg_lsn,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (pg_lsn, pg_lsn) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (pg_lsn, pg_lsn); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (pg_lsn, pg_lsn) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = jsonb_lt,
    LEFTARG = jsonb,
    RIGHTARG = jsonb,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (jsonb, jsonb) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (jsonb, jsonb); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (jsonb, jsonb) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = macaddr8_lt,
    LEFTARG = macaddr8,
    RIGHTARG = macaddr8,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (macaddr8, macaddr8) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (macaddr8, macaddr8); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (macaddr8, macaddr8) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = enum_lt,
    LEFTARG = anyenum,
    RIGHTARG = anyenum,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (anyenum, anyenum) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (anyenum, anyenum); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (anyenum, anyenum) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = tsvector_lt,
    LEFTARG = tsvector,
    RIGHTARG = tsvector,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (tsvector, tsvector) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (tsvector, tsvector); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (tsvector, tsvector) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = tsquery_lt,
    LEFTARG = tsquery,
    RIGHTARG = tsquery,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (tsquery, tsquery) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (tsquery, tsquery); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (tsquery, tsquery) IS 'less than';


--
-- Name: <; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.< (
    PROCEDURE = range_lt,
    LEFTARG = anyrange,
    RIGHTARG = anyrange,
    COMMUTATOR = OPERATOR(pgc_dump.>),
    NEGATOR = OPERATOR(pgc_dump.>=),
    RESTRICT = rangesel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.< (anyrange, anyrange) OWNER TO pgc_dump;

--
-- Name: OPERATOR < (anyrange, anyrange); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.< (anyrange, anyrange) IS 'less than';


--
-- Name: <#>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<#> (
    PROCEDURE = mktinterval,
    LEFTARG = abstime,
    RIGHTARG = abstime
);


ALTER OPERATOR pgc_dump.<#> (abstime, abstime) OWNER TO pgc_dump;

--
-- Name: OPERATOR <#> (abstime, abstime); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<#> (abstime, abstime) IS 'convert to tinterval';


--
-- Name: <->; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<-> (
    PROCEDURE = point_distance,
    LEFTARG = point,
    RIGHTARG = point,
    COMMUTATOR = OPERATOR(pgc_dump.<->)
);


ALTER OPERATOR pgc_dump.<-> (point, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR <-> (point, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<-> (point, point) IS 'distance between';


--
-- Name: <->; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<-> (
    PROCEDURE = dist_pl,
    LEFTARG = point,
    RIGHTARG = line
);


ALTER OPERATOR pgc_dump.<-> (point, line) OWNER TO pgc_dump;

--
-- Name: OPERATOR <-> (point, line); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<-> (point, line) IS 'distance between';


--
-- Name: <->; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<-> (
    PROCEDURE = dist_ps,
    LEFTARG = point,
    RIGHTARG = lseg
);


ALTER OPERATOR pgc_dump.<-> (point, lseg) OWNER TO pgc_dump;

--
-- Name: OPERATOR <-> (point, lseg); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<-> (point, lseg) IS 'distance between';


--
-- Name: <->; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<-> (
    PROCEDURE = dist_pb,
    LEFTARG = point,
    RIGHTARG = box
);


ALTER OPERATOR pgc_dump.<-> (point, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR <-> (point, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<-> (point, box) IS 'distance between';


--
-- Name: <->; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<-> (
    PROCEDURE = dist_sl,
    LEFTARG = lseg,
    RIGHTARG = line
);


ALTER OPERATOR pgc_dump.<-> (lseg, line) OWNER TO pgc_dump;

--
-- Name: OPERATOR <-> (lseg, line); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<-> (lseg, line) IS 'distance between';


--
-- Name: <->; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<-> (
    PROCEDURE = dist_sb,
    LEFTARG = lseg,
    RIGHTARG = box
);


ALTER OPERATOR pgc_dump.<-> (lseg, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR <-> (lseg, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<-> (lseg, box) IS 'distance between';


--
-- Name: <->; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<-> (
    PROCEDURE = dist_ppath,
    LEFTARG = point,
    RIGHTARG = path
);


ALTER OPERATOR pgc_dump.<-> (point, path) OWNER TO pgc_dump;

--
-- Name: OPERATOR <-> (point, path); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<-> (point, path) IS 'distance between';


--
-- Name: <->; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<-> (
    PROCEDURE = box_distance,
    LEFTARG = box,
    RIGHTARG = box,
    COMMUTATOR = OPERATOR(pgc_dump.<->)
);


ALTER OPERATOR pgc_dump.<-> (box, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR <-> (box, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<-> (box, box) IS 'distance between';


--
-- Name: <->; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<-> (
    PROCEDURE = path_distance,
    LEFTARG = path,
    RIGHTARG = path,
    COMMUTATOR = OPERATOR(pgc_dump.<->)
);


ALTER OPERATOR pgc_dump.<-> (path, path) OWNER TO pgc_dump;

--
-- Name: OPERATOR <-> (path, path); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<-> (path, path) IS 'distance between';


--
-- Name: <->; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<-> (
    PROCEDURE = line_distance,
    LEFTARG = line,
    RIGHTARG = line,
    COMMUTATOR = OPERATOR(pgc_dump.<->)
);


ALTER OPERATOR pgc_dump.<-> (line, line) OWNER TO pgc_dump;

--
-- Name: OPERATOR <-> (line, line); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<-> (line, line) IS 'distance between';


--
-- Name: <->; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<-> (
    PROCEDURE = lseg_distance,
    LEFTARG = lseg,
    RIGHTARG = lseg,
    COMMUTATOR = OPERATOR(pgc_dump.<->)
);


ALTER OPERATOR pgc_dump.<-> (lseg, lseg) OWNER TO pgc_dump;

--
-- Name: OPERATOR <-> (lseg, lseg); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<-> (lseg, lseg) IS 'distance between';


--
-- Name: <->; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<-> (
    PROCEDURE = poly_distance,
    LEFTARG = polygon,
    RIGHTARG = polygon,
    COMMUTATOR = OPERATOR(pgc_dump.<->)
);


ALTER OPERATOR pgc_dump.<-> (polygon, polygon) OWNER TO pgc_dump;

--
-- Name: OPERATOR <-> (polygon, polygon); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<-> (polygon, polygon) IS 'distance between';


--
-- Name: <->; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<-> (
    PROCEDURE = circle_distance,
    LEFTARG = circle,
    RIGHTARG = circle,
    COMMUTATOR = OPERATOR(pgc_dump.<->)
);


ALTER OPERATOR pgc_dump.<-> (circle, circle) OWNER TO pgc_dump;

--
-- Name: OPERATOR <-> (circle, circle); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<-> (circle, circle) IS 'distance between';


--
-- Name: <->; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<-> (
    PROCEDURE = dist_pc,
    LEFTARG = point,
    RIGHTARG = circle,
    COMMUTATOR = OPERATOR(pgc_dump.<->)
);


ALTER OPERATOR pgc_dump.<-> (point, circle) OWNER TO pgc_dump;

--
-- Name: OPERATOR <-> (point, circle); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<-> (point, circle) IS 'distance between';


--
-- Name: <->; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<-> (
    PROCEDURE = dist_cpoly,
    LEFTARG = circle,
    RIGHTARG = polygon
);


ALTER OPERATOR pgc_dump.<-> (circle, polygon) OWNER TO pgc_dump;

--
-- Name: OPERATOR <-> (circle, polygon); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<-> (circle, polygon) IS 'distance between';


--
-- Name: <->; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<-> (
    PROCEDURE = dist_lb,
    LEFTARG = line,
    RIGHTARG = box
);


ALTER OPERATOR pgc_dump.<-> (line, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR <-> (line, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<-> (line, box) IS 'distance between';


--
-- Name: <->; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<-> (
    PROCEDURE = dist_ppoly,
    LEFTARG = point,
    RIGHTARG = polygon,
    COMMUTATOR = OPERATOR(pgc_dump.<->)
);


ALTER OPERATOR pgc_dump.<-> (point, polygon) OWNER TO pgc_dump;

--
-- Name: OPERATOR <-> (point, polygon); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<-> (point, polygon) IS 'distance between';


--
-- Name: <->; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<-> (
    PROCEDURE = dist_polyp,
    LEFTARG = polygon,
    RIGHTARG = point,
    COMMUTATOR = OPERATOR(pgc_dump.<->)
);


ALTER OPERATOR pgc_dump.<-> (polygon, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR <-> (polygon, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<-> (polygon, point) IS 'distance between';


--
-- Name: <->; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<-> (
    PROCEDURE = dist_cpoint,
    LEFTARG = circle,
    RIGHTARG = point,
    COMMUTATOR = OPERATOR(pgc_dump.<->)
);


ALTER OPERATOR pgc_dump.<-> (circle, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR <-> (circle, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<-> (circle, point) IS 'distance between';


--
-- Name: <->; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<-> (
    PROCEDURE = tsquery_phrase,
    LEFTARG = tsquery,
    RIGHTARG = tsquery
);


ALTER OPERATOR pgc_dump.<-> (tsquery, tsquery) OWNER TO pgc_dump;

--
-- Name: OPERATOR <-> (tsquery, tsquery); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<-> (tsquery, tsquery) IS 'phrase-concatenate';


--
-- Name: <<; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<< (
    PROCEDURE = poly_left,
    LEFTARG = polygon,
    RIGHTARG = polygon,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.<< (polygon, polygon) OWNER TO pgc_dump;

--
-- Name: OPERATOR << (polygon, polygon); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<< (polygon, polygon) IS 'is left of';


--
-- Name: <<; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<< (
    PROCEDURE = box_left,
    LEFTARG = box,
    RIGHTARG = box,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.<< (box, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR << (box, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<< (box, box) IS 'is left of';


--
-- Name: <<; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<< (
    PROCEDURE = point_left,
    LEFTARG = point,
    RIGHTARG = point,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.<< (point, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR << (point, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<< (point, point) IS 'is left of';


--
-- Name: <<; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<< (
    PROCEDURE = tintervalct,
    LEFTARG = tinterval,
    RIGHTARG = tinterval
);


ALTER OPERATOR pgc_dump.<< (tinterval, tinterval) OWNER TO pgc_dump;

--
-- Name: OPERATOR << (tinterval, tinterval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<< (tinterval, tinterval) IS 'contains';


--
-- Name: <<; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<< (
    PROCEDURE = network_sub,
    LEFTARG = inet,
    RIGHTARG = inet,
    COMMUTATOR = OPERATOR(pgc_dump.>>),
    RESTRICT = networksel,
    JOIN = networkjoinsel
);


ALTER OPERATOR pgc_dump.<< (inet, inet) OWNER TO pgc_dump;

--
-- Name: OPERATOR << (inet, inet); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<< (inet, inet) IS 'is subnet';


--
-- Name: <<; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<< (
    PROCEDURE = circle_left,
    LEFTARG = circle,
    RIGHTARG = circle,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.<< (circle, circle) OWNER TO pgc_dump;

--
-- Name: OPERATOR << (circle, circle); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<< (circle, circle) IS 'is left of';


--
-- Name: <<; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<< (
    PROCEDURE = bitshiftleft,
    LEFTARG = bit,
    RIGHTARG = integer
);


ALTER OPERATOR pgc_dump.<< (bit, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR << (bit, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<< (bit, integer) IS 'bitwise shift left';


--
-- Name: <<; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<< (
    PROCEDURE = int2shl,
    LEFTARG = smallint,
    RIGHTARG = integer
);


ALTER OPERATOR pgc_dump.<< (smallint, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR << (smallint, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<< (smallint, integer) IS 'bitwise shift left';


--
-- Name: <<; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<< (
    PROCEDURE = int4shl,
    LEFTARG = integer,
    RIGHTARG = integer
);


ALTER OPERATOR pgc_dump.<< (integer, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR << (integer, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<< (integer, integer) IS 'bitwise shift left';


--
-- Name: <<; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<< (
    PROCEDURE = int8shl,
    LEFTARG = bigint,
    RIGHTARG = integer
);


ALTER OPERATOR pgc_dump.<< (bigint, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR << (bigint, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<< (bigint, integer) IS 'bitwise shift left';


--
-- Name: <<; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<< (
    PROCEDURE = range_before,
    LEFTARG = anyrange,
    RIGHTARG = anyrange,
    COMMUTATOR = OPERATOR(pgc_dump.>>),
    RESTRICT = rangesel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<< (anyrange, anyrange) OWNER TO pgc_dump;

--
-- Name: OPERATOR << (anyrange, anyrange); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<< (anyrange, anyrange) IS 'is left of';


--
-- Name: <<=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<<= (
    PROCEDURE = network_subeq,
    LEFTARG = inet,
    RIGHTARG = inet,
    COMMUTATOR = OPERATOR(pgc_dump.>>=),
    RESTRICT = networksel,
    JOIN = networkjoinsel
);


ALTER OPERATOR pgc_dump.<<= (inet, inet) OWNER TO pgc_dump;

--
-- Name: OPERATOR <<= (inet, inet); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<<= (inet, inet) IS 'is subnet or equal';


--
-- Name: <<|; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<<| (
    PROCEDURE = circle_below,
    LEFTARG = circle,
    RIGHTARG = circle,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.<<| (circle, circle) OWNER TO pgc_dump;

--
-- Name: OPERATOR <<| (circle, circle); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<<| (circle, circle) IS 'is below';


--
-- Name: <<|; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<<| (
    PROCEDURE = box_below,
    LEFTARG = box,
    RIGHTARG = box,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.<<| (box, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR <<| (box, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<<| (box, box) IS 'is below';


--
-- Name: <<|; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<<| (
    PROCEDURE = poly_below,
    LEFTARG = polygon,
    RIGHTARG = polygon,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.<<| (polygon, polygon) OWNER TO pgc_dump;

--
-- Name: OPERATOR <<| (polygon, polygon); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<<| (polygon, polygon) IS 'is below';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = int48le,
    LEFTARG = integer,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (integer, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (integer, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (integer, bigint) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = int8le,
    LEFTARG = bigint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (bigint, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (bigint, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (bigint, bigint) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = int84le,
    LEFTARG = bigint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (bigint, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (bigint, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (bigint, integer) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = box_le,
    LEFTARG = box,
    RIGHTARG = box,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = areasel,
    JOIN = areajoinsel
);


ALTER OPERATOR pgc_dump.<= (box, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (box, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (box, box) IS 'less than or equal by area';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = int2le,
    LEFTARG = smallint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (smallint, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (smallint, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (smallint, smallint) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = int4le,
    LEFTARG = integer,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (integer, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (integer, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (integer, integer) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = int24le,
    LEFTARG = smallint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (smallint, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (smallint, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (smallint, integer) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = int42le,
    LEFTARG = integer,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (integer, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (integer, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (integer, smallint) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = abstimele,
    LEFTARG = abstime,
    RIGHTARG = abstime,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (abstime, abstime) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (abstime, abstime); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (abstime, abstime) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = reltimele,
    LEFTARG = reltime,
    RIGHTARG = reltime,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (reltime, reltime) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (reltime, reltime); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (reltime, reltime) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = oidle,
    LEFTARG = oid,
    RIGHTARG = oid,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (oid, oid) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (oid, oid); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (oid, oid) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = float4le,
    LEFTARG = real,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (real, real) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (real, real); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (real, real) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = charle,
    LEFTARG = "char",
    RIGHTARG = "char",
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= ("char", "char") OWNER TO pgc_dump;

--
-- Name: OPERATOR <= ("char", "char"); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= ("char", "char") IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = oidvectorle,
    LEFTARG = oidvector,
    RIGHTARG = oidvector,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (oidvector, oidvector) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (oidvector, oidvector); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (oidvector, oidvector) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = namele,
    LEFTARG = name,
    RIGHTARG = name,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (name, name) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (name, name); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (name, name) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = text_le,
    LEFTARG = text,
    RIGHTARG = text,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (text, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (text, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (text, text) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = float8le,
    LEFTARG = double precision,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (double precision, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (double precision, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (double precision, double precision) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = path_n_le,
    LEFTARG = path,
    RIGHTARG = path,
    COMMUTATOR = OPERATOR(pgc_dump.>=)
);


ALTER OPERATOR pgc_dump.<= (path, path) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (path, path); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (path, path) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = tintervalle,
    LEFTARG = tinterval,
    RIGHTARG = tinterval,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (tinterval, tinterval) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (tinterval, tinterval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (tinterval, tinterval) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = cash_le,
    LEFTARG = money,
    RIGHTARG = money,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (money, money) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (money, money); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (money, money) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = bpcharle,
    LEFTARG = character,
    RIGHTARG = character,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (character, character) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (character, character); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (character, character) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = array_le,
    LEFTARG = anyarray,
    RIGHTARG = anyarray,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (anyarray, anyarray) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (anyarray, anyarray); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (anyarray, anyarray) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = date_le,
    LEFTARG = date,
    RIGHTARG = date,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (date, date) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (date, date); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (date, date) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = time_le,
    LEFTARG = time without time zone,
    RIGHTARG = time without time zone,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (time without time zone, time without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (time without time zone, time without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (time without time zone, time without time zone) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = float48le,
    LEFTARG = real,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (real, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (real, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (real, double precision) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = float84le,
    LEFTARG = double precision,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (double precision, real) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (double precision, real); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (double precision, real) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = network_le,
    LEFTARG = inet,
    RIGHTARG = inet,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (inet, inet) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (inet, inet); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (inet, inet) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = macaddr_le,
    LEFTARG = macaddr,
    RIGHTARG = macaddr,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (macaddr, macaddr) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (macaddr, macaddr); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (macaddr, macaddr) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = timestamptz_le,
    LEFTARG = timestamp with time zone,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (timestamp with time zone, timestamp with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (timestamp with time zone, timestamp with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (timestamp with time zone, timestamp with time zone) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = interval_le,
    LEFTARG = interval,
    RIGHTARG = interval,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (interval, interval) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (interval, interval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (interval, interval) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = circle_le,
    LEFTARG = circle,
    RIGHTARG = circle,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = areasel,
    JOIN = areajoinsel
);


ALTER OPERATOR pgc_dump.<= (circle, circle) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (circle, circle); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (circle, circle) IS 'less than or equal by area';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = timetz_le,
    LEFTARG = time with time zone,
    RIGHTARG = time with time zone,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (time with time zone, time with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (time with time zone, time with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (time with time zone, time with time zone) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = lseg_le,
    LEFTARG = lseg,
    RIGHTARG = lseg,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>)
);


ALTER OPERATOR pgc_dump.<= (lseg, lseg) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (lseg, lseg); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (lseg, lseg) IS 'less than or equal by length';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = boolle,
    LEFTARG = boolean,
    RIGHTARG = boolean,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (boolean, boolean) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (boolean, boolean); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (boolean, boolean) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = numeric_le,
    LEFTARG = numeric,
    RIGHTARG = numeric,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (numeric, numeric) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (numeric, numeric); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (numeric, numeric) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = bitle,
    LEFTARG = bit,
    RIGHTARG = bit,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (bit, bit) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (bit, bit); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (bit, bit) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = varbitle,
    LEFTARG = bit varying,
    RIGHTARG = bit varying,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (bit varying, bit varying) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (bit varying, bit varying); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (bit varying, bit varying) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = int28le,
    LEFTARG = smallint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (smallint, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (smallint, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (smallint, bigint) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = int82le,
    LEFTARG = bigint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (bigint, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (bigint, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (bigint, smallint) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = byteale,
    LEFTARG = bytea,
    RIGHTARG = bytea,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (bytea, bytea) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (bytea, bytea); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (bytea, bytea) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = timestamp_le,
    LEFTARG = timestamp without time zone,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (timestamp without time zone, timestamp without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (timestamp without time zone, timestamp without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (timestamp without time zone, timestamp without time zone) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = date_le_timestamp,
    LEFTARG = date,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (date, timestamp without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (date, timestamp without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (date, timestamp without time zone) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = date_le_timestamptz,
    LEFTARG = date,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (date, timestamp with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (date, timestamp with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (date, timestamp with time zone) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = timestamp_le_date,
    LEFTARG = timestamp without time zone,
    RIGHTARG = date,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (timestamp without time zone, date) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (timestamp without time zone, date); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (timestamp without time zone, date) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = timestamptz_le_date,
    LEFTARG = timestamp with time zone,
    RIGHTARG = date,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (timestamp with time zone, date) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (timestamp with time zone, date); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (timestamp with time zone, date) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = timestamp_le_timestamptz,
    LEFTARG = timestamp without time zone,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (timestamp without time zone, timestamp with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (timestamp without time zone, timestamp with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (timestamp without time zone, timestamp with time zone) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = timestamptz_le_timestamp,
    LEFTARG = timestamp with time zone,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (timestamp with time zone, timestamp without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (timestamp with time zone, timestamp without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (timestamp with time zone, timestamp without time zone) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = tidle,
    LEFTARG = tid,
    RIGHTARG = tid,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (tid, tid) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (tid, tid); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (tid, tid) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = uuid_le,
    LEFTARG = uuid,
    RIGHTARG = uuid,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (uuid, uuid) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (uuid, uuid); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (uuid, uuid) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = record_le,
    LEFTARG = record,
    RIGHTARG = record,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (record, record) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (record, record); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (record, record) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = pg_lsn_le,
    LEFTARG = pg_lsn,
    RIGHTARG = pg_lsn,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (pg_lsn, pg_lsn) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (pg_lsn, pg_lsn); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (pg_lsn, pg_lsn) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = jsonb_le,
    LEFTARG = jsonb,
    RIGHTARG = jsonb,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (jsonb, jsonb) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (jsonb, jsonb); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (jsonb, jsonb) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = macaddr8_le,
    LEFTARG = macaddr8,
    RIGHTARG = macaddr8,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (macaddr8, macaddr8) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (macaddr8, macaddr8); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (macaddr8, macaddr8) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = enum_le,
    LEFTARG = anyenum,
    RIGHTARG = anyenum,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (anyenum, anyenum) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (anyenum, anyenum); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (anyenum, anyenum) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = tsvector_le,
    LEFTARG = tsvector,
    RIGHTARG = tsvector,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (tsvector, tsvector) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (tsvector, tsvector); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (tsvector, tsvector) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = tsquery_le,
    LEFTARG = tsquery,
    RIGHTARG = tsquery,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (tsquery, tsquery) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (tsquery, tsquery); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (tsquery, tsquery) IS 'less than or equal';


--
-- Name: <=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<= (
    PROCEDURE = range_le,
    LEFTARG = anyrange,
    RIGHTARG = anyrange,
    COMMUTATOR = OPERATOR(pgc_dump.>=),
    NEGATOR = OPERATOR(pgc_dump.>),
    RESTRICT = rangesel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.<= (anyrange, anyrange) OWNER TO pgc_dump;

--
-- Name: OPERATOR <= (anyrange, anyrange); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<= (anyrange, anyrange) IS 'less than or equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = int48ne,
    LEFTARG = integer,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (integer, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (integer, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (integer, bigint) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = boolne,
    LEFTARG = boolean,
    RIGHTARG = boolean,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (boolean, boolean) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (boolean, boolean); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (boolean, boolean) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = tidne,
    LEFTARG = tid,
    RIGHTARG = tid,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (tid, tid) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (tid, tid); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (tid, tid) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = int8ne,
    LEFTARG = bigint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (bigint, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (bigint, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (bigint, bigint) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = int84ne,
    LEFTARG = bigint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (bigint, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (bigint, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (bigint, integer) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = int4ne,
    LEFTARG = integer,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (integer, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (integer, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (integer, integer) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = int2ne,
    LEFTARG = smallint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (smallint, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (smallint, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (smallint, smallint) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = textne,
    LEFTARG = text,
    RIGHTARG = text,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (text, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (text, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (text, text) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = int24ne,
    LEFTARG = smallint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (smallint, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (smallint, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (smallint, integer) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = int42ne,
    LEFTARG = integer,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (integer, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (integer, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (integer, smallint) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = abstimene,
    LEFTARG = abstime,
    RIGHTARG = abstime,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (abstime, abstime) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (abstime, abstime); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (abstime, abstime) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = reltimene,
    LEFTARG = reltime,
    RIGHTARG = reltime,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (reltime, reltime) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (reltime, reltime); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (reltime, reltime) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = oidne,
    LEFTARG = oid,
    RIGHTARG = oid,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (oid, oid) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (oid, oid); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (oid, oid) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = float4ne,
    LEFTARG = real,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (real, real) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (real, real); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (real, real) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = charne,
    LEFTARG = "char",
    RIGHTARG = "char",
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> ("char", "char") OWNER TO pgc_dump;

--
-- Name: OPERATOR <> ("char", "char"); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> ("char", "char") IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = namene,
    LEFTARG = name,
    RIGHTARG = name,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (name, name) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (name, name); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (name, name) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = oidvectorne,
    LEFTARG = oidvector,
    RIGHTARG = oidvector,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (oidvector, oidvector) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (oidvector, oidvector); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (oidvector, oidvector) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = float8ne,
    LEFTARG = double precision,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (double precision, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (double precision, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (double precision, double precision) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = point_ne,
    LEFTARG = point,
    RIGHTARG = point,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.~=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (point, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (point, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (point, point) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = tintervalne,
    LEFTARG = tinterval,
    RIGHTARG = tinterval,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (tinterval, tinterval) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (tinterval, tinterval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (tinterval, tinterval) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = cash_ne,
    LEFTARG = money,
    RIGHTARG = money,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (money, money) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (money, money); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (money, money) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = bpcharne,
    LEFTARG = character,
    RIGHTARG = character,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (character, character) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (character, character); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (character, character) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = array_ne,
    LEFTARG = anyarray,
    RIGHTARG = anyarray,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (anyarray, anyarray) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (anyarray, anyarray); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (anyarray, anyarray) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = date_ne,
    LEFTARG = date,
    RIGHTARG = date,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (date, date) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (date, date); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (date, date) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = time_ne,
    LEFTARG = time without time zone,
    RIGHTARG = time without time zone,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (time without time zone, time without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (time without time zone, time without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (time without time zone, time without time zone) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = float48ne,
    LEFTARG = real,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (real, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (real, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (real, double precision) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = float84ne,
    LEFTARG = double precision,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (double precision, real) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (double precision, real); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (double precision, real) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = network_ne,
    LEFTARG = inet,
    RIGHTARG = inet,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (inet, inet) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (inet, inet); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (inet, inet) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = macaddr_ne,
    LEFTARG = macaddr,
    RIGHTARG = macaddr,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (macaddr, macaddr) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (macaddr, macaddr); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (macaddr, macaddr) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = timestamptz_ne,
    LEFTARG = timestamp with time zone,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (timestamp with time zone, timestamp with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (timestamp with time zone, timestamp with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (timestamp with time zone, timestamp with time zone) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = interval_ne,
    LEFTARG = interval,
    RIGHTARG = interval,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (interval, interval) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (interval, interval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (interval, interval) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = circle_ne,
    LEFTARG = circle,
    RIGHTARG = circle,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (circle, circle) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (circle, circle); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (circle, circle) IS 'not equal by area';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = timetz_ne,
    LEFTARG = time with time zone,
    RIGHTARG = time with time zone,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (time with time zone, time with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (time with time zone, time with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (time with time zone, time with time zone) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = lseg_ne,
    LEFTARG = lseg,
    RIGHTARG = lseg,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (lseg, lseg) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (lseg, lseg); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (lseg, lseg) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = numeric_ne,
    LEFTARG = numeric,
    RIGHTARG = numeric,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (numeric, numeric) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (numeric, numeric); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (numeric, numeric) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = bitne,
    LEFTARG = bit,
    RIGHTARG = bit,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (bit, bit) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (bit, bit); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (bit, bit) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = varbitne,
    LEFTARG = bit varying,
    RIGHTARG = bit varying,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (bit varying, bit varying) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (bit varying, bit varying); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (bit varying, bit varying) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = int28ne,
    LEFTARG = smallint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (smallint, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (smallint, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (smallint, bigint) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = int82ne,
    LEFTARG = bigint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (bigint, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (bigint, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (bigint, smallint) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = byteane,
    LEFTARG = bytea,
    RIGHTARG = bytea,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (bytea, bytea) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (bytea, bytea); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (bytea, bytea) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = timestamp_ne,
    LEFTARG = timestamp without time zone,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (timestamp without time zone, timestamp without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (timestamp without time zone, timestamp without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (timestamp without time zone, timestamp without time zone) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = date_ne_timestamp,
    LEFTARG = date,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (date, timestamp without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (date, timestamp without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (date, timestamp without time zone) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = date_ne_timestamptz,
    LEFTARG = date,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (date, timestamp with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (date, timestamp with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (date, timestamp with time zone) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = timestamp_ne_date,
    LEFTARG = timestamp without time zone,
    RIGHTARG = date,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (timestamp without time zone, date) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (timestamp without time zone, date); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (timestamp without time zone, date) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = timestamptz_ne_date,
    LEFTARG = timestamp with time zone,
    RIGHTARG = date,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (timestamp with time zone, date) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (timestamp with time zone, date); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (timestamp with time zone, date) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = timestamp_ne_timestamptz,
    LEFTARG = timestamp without time zone,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (timestamp without time zone, timestamp with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (timestamp without time zone, timestamp with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (timestamp without time zone, timestamp with time zone) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = timestamptz_ne_timestamp,
    LEFTARG = timestamp with time zone,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (timestamp with time zone, timestamp without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (timestamp with time zone, timestamp without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (timestamp with time zone, timestamp without time zone) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = uuid_ne,
    LEFTARG = uuid,
    RIGHTARG = uuid,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (uuid, uuid) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (uuid, uuid); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (uuid, uuid) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = record_ne,
    LEFTARG = record,
    RIGHTARG = record,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (record, record) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (record, record); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (record, record) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = pg_lsn_ne,
    LEFTARG = pg_lsn,
    RIGHTARG = pg_lsn,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (pg_lsn, pg_lsn) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (pg_lsn, pg_lsn); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (pg_lsn, pg_lsn) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = jsonb_ne,
    LEFTARG = jsonb,
    RIGHTARG = jsonb,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (jsonb, jsonb) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (jsonb, jsonb); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (jsonb, jsonb) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = xidneq,
    LEFTARG = xid,
    RIGHTARG = xid,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (xid, xid) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (xid, xid); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (xid, xid) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = xidneqint4,
    LEFTARG = xid,
    RIGHTARG = integer,
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (xid, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (xid, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (xid, integer) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = macaddr8_ne,
    LEFTARG = macaddr8,
    RIGHTARG = macaddr8,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (macaddr8, macaddr8) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (macaddr8, macaddr8); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (macaddr8, macaddr8) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = enum_ne,
    LEFTARG = anyenum,
    RIGHTARG = anyenum,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (anyenum, anyenum) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (anyenum, anyenum); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (anyenum, anyenum) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = tsvector_ne,
    LEFTARG = tsvector,
    RIGHTARG = tsvector,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (tsvector, tsvector) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (tsvector, tsvector); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (tsvector, tsvector) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = tsquery_ne,
    LEFTARG = tsquery,
    RIGHTARG = tsquery,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (tsquery, tsquery) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (tsquery, tsquery); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (tsquery, tsquery) IS 'not equal';


--
-- Name: <>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<> (
    PROCEDURE = range_ne,
    LEFTARG = anyrange,
    RIGHTARG = anyrange,
    COMMUTATOR = OPERATOR(pgc_dump.<>),
    NEGATOR = OPERATOR(pgc_dump.=),
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR pgc_dump.<> (anyrange, anyrange) OWNER TO pgc_dump;

--
-- Name: OPERATOR <> (anyrange, anyrange); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<> (anyrange, anyrange) IS 'not equal';


--
-- Name: <?>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<?> (
    PROCEDURE = intinterval,
    LEFTARG = abstime,
    RIGHTARG = tinterval
);


ALTER OPERATOR pgc_dump.<?> (abstime, tinterval) OWNER TO pgc_dump;

--
-- Name: OPERATOR <?> (abstime, tinterval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<?> (abstime, tinterval) IS 'is contained by';


--
-- Name: <@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<@ (
    PROCEDURE = poly_contained,
    LEFTARG = polygon,
    RIGHTARG = polygon,
    COMMUTATOR = OPERATOR(pgc_dump.@>),
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.<@ (polygon, polygon) OWNER TO pgc_dump;

--
-- Name: OPERATOR <@ (polygon, polygon); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<@ (polygon, polygon) IS 'is contained by';


--
-- Name: <@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<@ (
    PROCEDURE = box_contained,
    LEFTARG = box,
    RIGHTARG = box,
    COMMUTATOR = OPERATOR(pgc_dump.@>),
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.<@ (box, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR <@ (box, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<@ (box, box) IS 'is contained by';


--
-- Name: <@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<@ (
    PROCEDURE = on_pb,
    LEFTARG = point,
    RIGHTARG = box,
    COMMUTATOR = OPERATOR(pgc_dump.@>),
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.<@ (point, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR <@ (point, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<@ (point, box) IS 'point inside box';


--
-- Name: <@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<@ (
    PROCEDURE = on_ppath,
    LEFTARG = point,
    RIGHTARG = path,
    COMMUTATOR = OPERATOR(pgc_dump.@>)
);


ALTER OPERATOR pgc_dump.<@ (point, path) OWNER TO pgc_dump;

--
-- Name: OPERATOR <@ (point, path); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<@ (point, path) IS 'point within closed path, or point on open path';


--
-- Name: <@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<@ (
    PROCEDURE = pt_contained_poly,
    LEFTARG = point,
    RIGHTARG = polygon,
    COMMUTATOR = OPERATOR(pgc_dump.@>),
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.<@ (point, polygon) OWNER TO pgc_dump;

--
-- Name: OPERATOR <@ (point, polygon); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<@ (point, polygon) IS 'is contained by';


--
-- Name: <@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<@ (
    PROCEDURE = pt_contained_circle,
    LEFTARG = point,
    RIGHTARG = circle,
    COMMUTATOR = OPERATOR(pgc_dump.@>),
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.<@ (point, circle) OWNER TO pgc_dump;

--
-- Name: OPERATOR <@ (point, circle); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<@ (point, circle) IS 'is contained by';


--
-- Name: <@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<@ (
    PROCEDURE = circle_contained,
    LEFTARG = circle,
    RIGHTARG = circle,
    COMMUTATOR = OPERATOR(pgc_dump.@>),
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.<@ (circle, circle) OWNER TO pgc_dump;

--
-- Name: OPERATOR <@ (circle, circle); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<@ (circle, circle) IS 'is contained by';


--
-- Name: <@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<@ (
    PROCEDURE = on_pl,
    LEFTARG = point,
    RIGHTARG = line
);


ALTER OPERATOR pgc_dump.<@ (point, line) OWNER TO pgc_dump;

--
-- Name: OPERATOR <@ (point, line); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<@ (point, line) IS 'point on line';


--
-- Name: <@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<@ (
    PROCEDURE = on_ps,
    LEFTARG = point,
    RIGHTARG = lseg
);


ALTER OPERATOR pgc_dump.<@ (point, lseg) OWNER TO pgc_dump;

--
-- Name: OPERATOR <@ (point, lseg); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<@ (point, lseg) IS 'is contained by';


--
-- Name: <@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<@ (
    PROCEDURE = on_sl,
    LEFTARG = lseg,
    RIGHTARG = line
);


ALTER OPERATOR pgc_dump.<@ (lseg, line) OWNER TO pgc_dump;

--
-- Name: OPERATOR <@ (lseg, line); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<@ (lseg, line) IS 'lseg on line';


--
-- Name: <@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<@ (
    PROCEDURE = on_sb,
    LEFTARG = lseg,
    RIGHTARG = box
);


ALTER OPERATOR pgc_dump.<@ (lseg, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR <@ (lseg, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<@ (lseg, box) IS 'is contained by';


--
-- Name: <@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<@ (
    PROCEDURE = arraycontained,
    LEFTARG = anyarray,
    RIGHTARG = anyarray,
    COMMUTATOR = OPERATOR(pgc_dump.@>),
    RESTRICT = arraycontsel,
    JOIN = arraycontjoinsel
);


ALTER OPERATOR pgc_dump.<@ (anyarray, anyarray) OWNER TO pgc_dump;

--
-- Name: OPERATOR <@ (anyarray, anyarray); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<@ (anyarray, anyarray) IS 'is contained by';


--
-- Name: <@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<@ (
    PROCEDURE = jsonb_contained,
    LEFTARG = jsonb,
    RIGHTARG = jsonb,
    COMMUTATOR = OPERATOR(pgc_dump.@>),
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.<@ (jsonb, jsonb) OWNER TO pgc_dump;

--
-- Name: OPERATOR <@ (jsonb, jsonb); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<@ (jsonb, jsonb) IS 'is contained by';


--
-- Name: <@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<@ (
    PROCEDURE = tsq_mcontained,
    LEFTARG = tsquery,
    RIGHTARG = tsquery,
    COMMUTATOR = OPERATOR(pgc_dump.@>),
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.<@ (tsquery, tsquery) OWNER TO pgc_dump;

--
-- Name: OPERATOR <@ (tsquery, tsquery); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<@ (tsquery, tsquery) IS 'is contained by';


--
-- Name: <@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<@ (
    PROCEDURE = elem_contained_by_range,
    LEFTARG = anyelement,
    RIGHTARG = anyrange,
    COMMUTATOR = OPERATOR(pgc_dump.@>),
    RESTRICT = rangesel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.<@ (anyelement, anyrange) OWNER TO pgc_dump;

--
-- Name: OPERATOR <@ (anyelement, anyrange); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<@ (anyelement, anyrange) IS 'is contained by';


--
-- Name: <@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<@ (
    PROCEDURE = range_contained_by,
    LEFTARG = anyrange,
    RIGHTARG = anyrange,
    COMMUTATOR = OPERATOR(pgc_dump.@>),
    RESTRICT = rangesel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.<@ (anyrange, anyrange) OWNER TO pgc_dump;

--
-- Name: OPERATOR <@ (anyrange, anyrange); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<@ (anyrange, anyrange) IS 'is contained by';


--
-- Name: <^; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<^ (
    PROCEDURE = point_below,
    LEFTARG = point,
    RIGHTARG = point,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.<^ (point, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR <^ (point, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<^ (point, point) IS 'is below';


--
-- Name: <^; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.<^ (
    PROCEDURE = box_below_eq,
    LEFTARG = box,
    RIGHTARG = box,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.<^ (box, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR <^ (box, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.<^ (box, box) IS 'is below (allows touching)';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = int48eq,
    LEFTARG = integer,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (integer, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (integer, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (integer, bigint) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = booleq,
    LEFTARG = boolean,
    RIGHTARG = boolean,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (boolean, boolean) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (boolean, boolean); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (boolean, boolean) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = chareq,
    LEFTARG = "char",
    RIGHTARG = "char",
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= ("char", "char") OWNER TO pgc_dump;

--
-- Name: OPERATOR = ("char", "char"); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= ("char", "char") IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = nameeq,
    LEFTARG = name,
    RIGHTARG = name,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (name, name) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (name, name); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (name, name) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = int2eq,
    LEFTARG = smallint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (smallint, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (smallint, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (smallint, smallint) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = int4eq,
    LEFTARG = integer,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (integer, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (integer, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (integer, integer) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = texteq,
    LEFTARG = text,
    RIGHTARG = text,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (text, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (text, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (text, text) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = xideq,
    LEFTARG = xid,
    RIGHTARG = xid,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (xid, xid) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (xid, xid); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (xid, xid) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = xideqint4,
    LEFTARG = xid,
    RIGHTARG = integer,
    NEGATOR = OPERATOR(pgc_dump.<>),
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (xid, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (xid, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (xid, integer) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = cideq,
    LEFTARG = cid,
    RIGHTARG = cid,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (cid, cid) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (cid, cid); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (cid, cid) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = tideq,
    LEFTARG = tid,
    RIGHTARG = tid,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (tid, tid) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (tid, tid); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (tid, tid) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = int8eq,
    LEFTARG = bigint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (bigint, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (bigint, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (bigint, bigint) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = int84eq,
    LEFTARG = bigint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (bigint, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (bigint, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (bigint, integer) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = box_eq,
    LEFTARG = box,
    RIGHTARG = box,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (box, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (box, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (box, box) IS 'equal by area';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = int24eq,
    LEFTARG = smallint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (smallint, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (smallint, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (smallint, integer) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = int42eq,
    LEFTARG = integer,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (integer, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (integer, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (integer, smallint) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = abstimeeq,
    LEFTARG = abstime,
    RIGHTARG = abstime,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (abstime, abstime) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (abstime, abstime); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (abstime, abstime) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = reltimeeq,
    LEFTARG = reltime,
    RIGHTARG = reltime,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (reltime, reltime) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (reltime, reltime); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (reltime, reltime) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = oideq,
    LEFTARG = oid,
    RIGHTARG = oid,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (oid, oid) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (oid, oid); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (oid, oid) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = float4eq,
    LEFTARG = real,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (real, real) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (real, real); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (real, real) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = oidvectoreq,
    LEFTARG = oidvector,
    RIGHTARG = oidvector,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (oidvector, oidvector) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (oidvector, oidvector); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (oidvector, oidvector) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = float8eq,
    LEFTARG = double precision,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (double precision, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (double precision, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (double precision, double precision) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = path_n_eq,
    LEFTARG = path,
    RIGHTARG = path,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (path, path) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (path, path); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (path, path) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = tintervaleq,
    LEFTARG = tinterval,
    RIGHTARG = tinterval,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (tinterval, tinterval) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (tinterval, tinterval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (tinterval, tinterval) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = cash_eq,
    LEFTARG = money,
    RIGHTARG = money,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (money, money) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (money, money); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (money, money) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = aclitemeq,
    LEFTARG = aclitem,
    RIGHTARG = aclitem,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (aclitem, aclitem) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (aclitem, aclitem); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (aclitem, aclitem) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = bpchareq,
    LEFTARG = character,
    RIGHTARG = character,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (character, character) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (character, character); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (character, character) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = array_eq,
    LEFTARG = anyarray,
    RIGHTARG = anyarray,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (anyarray, anyarray) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (anyarray, anyarray); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (anyarray, anyarray) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = date_eq,
    LEFTARG = date,
    RIGHTARG = date,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (date, date) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (date, date); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (date, date) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = time_eq,
    LEFTARG = time without time zone,
    RIGHTARG = time without time zone,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (time without time zone, time without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (time without time zone, time without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (time without time zone, time without time zone) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = float48eq,
    LEFTARG = real,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (real, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (real, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (real, double precision) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = float84eq,
    LEFTARG = double precision,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (double precision, real) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (double precision, real); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (double precision, real) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = network_eq,
    LEFTARG = inet,
    RIGHTARG = inet,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (inet, inet) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (inet, inet); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (inet, inet) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = macaddr_eq,
    LEFTARG = macaddr,
    RIGHTARG = macaddr,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (macaddr, macaddr) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (macaddr, macaddr); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (macaddr, macaddr) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = timestamptz_eq,
    LEFTARG = timestamp with time zone,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (timestamp with time zone, timestamp with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (timestamp with time zone, timestamp with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (timestamp with time zone, timestamp with time zone) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = interval_eq,
    LEFTARG = interval,
    RIGHTARG = interval,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (interval, interval) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (interval, interval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (interval, interval) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = circle_eq,
    LEFTARG = circle,
    RIGHTARG = circle,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (circle, circle) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (circle, circle); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (circle, circle) IS 'equal by area';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = lseg_eq,
    LEFTARG = lseg,
    RIGHTARG = lseg,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (lseg, lseg) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (lseg, lseg); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (lseg, lseg) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = timetz_eq,
    LEFTARG = time with time zone,
    RIGHTARG = time with time zone,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (time with time zone, time with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (time with time zone, time with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (time with time zone, time with time zone) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = line_eq,
    LEFTARG = line,
    RIGHTARG = line,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (line, line) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (line, line); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (line, line) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = numeric_eq,
    LEFTARG = numeric,
    RIGHTARG = numeric,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (numeric, numeric) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (numeric, numeric); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (numeric, numeric) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = biteq,
    LEFTARG = bit,
    RIGHTARG = bit,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (bit, bit) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (bit, bit); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (bit, bit) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = varbiteq,
    LEFTARG = bit varying,
    RIGHTARG = bit varying,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (bit varying, bit varying) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (bit varying, bit varying); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (bit varying, bit varying) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = int28eq,
    LEFTARG = smallint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (smallint, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (smallint, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (smallint, bigint) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = int82eq,
    LEFTARG = bigint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (bigint, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (bigint, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (bigint, smallint) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = byteaeq,
    LEFTARG = bytea,
    RIGHTARG = bytea,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (bytea, bytea) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (bytea, bytea); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (bytea, bytea) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = timestamp_eq,
    LEFTARG = timestamp without time zone,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (timestamp without time zone, timestamp without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (timestamp without time zone, timestamp without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (timestamp without time zone, timestamp without time zone) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = date_eq_timestamp,
    LEFTARG = date,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (date, timestamp without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (date, timestamp without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (date, timestamp without time zone) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = date_eq_timestamptz,
    LEFTARG = date,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (date, timestamp with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (date, timestamp with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (date, timestamp with time zone) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = timestamp_eq_date,
    LEFTARG = timestamp without time zone,
    RIGHTARG = date,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (timestamp without time zone, date) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (timestamp without time zone, date); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (timestamp without time zone, date) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = timestamptz_eq_date,
    LEFTARG = timestamp with time zone,
    RIGHTARG = date,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (timestamp with time zone, date) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (timestamp with time zone, date); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (timestamp with time zone, date) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = timestamp_eq_timestamptz,
    LEFTARG = timestamp without time zone,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (timestamp without time zone, timestamp with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (timestamp without time zone, timestamp with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (timestamp without time zone, timestamp with time zone) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = timestamptz_eq_timestamp,
    LEFTARG = timestamp with time zone,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (timestamp with time zone, timestamp without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (timestamp with time zone, timestamp without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (timestamp with time zone, timestamp without time zone) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = uuid_eq,
    LEFTARG = uuid,
    RIGHTARG = uuid,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (uuid, uuid) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (uuid, uuid); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (uuid, uuid) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = record_eq,
    LEFTARG = record,
    RIGHTARG = record,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (record, record) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (record, record); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (record, record) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = pg_lsn_eq,
    LEFTARG = pg_lsn,
    RIGHTARG = pg_lsn,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (pg_lsn, pg_lsn) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (pg_lsn, pg_lsn); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (pg_lsn, pg_lsn) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = jsonb_eq,
    LEFTARG = jsonb,
    RIGHTARG = jsonb,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (jsonb, jsonb) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (jsonb, jsonb); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (jsonb, jsonb) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = macaddr8_eq,
    LEFTARG = macaddr8,
    RIGHTARG = macaddr8,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (macaddr8, macaddr8) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (macaddr8, macaddr8); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (macaddr8, macaddr8) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = enum_eq,
    LEFTARG = anyenum,
    RIGHTARG = anyenum,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (anyenum, anyenum) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (anyenum, anyenum); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (anyenum, anyenum) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = tsvector_eq,
    LEFTARG = tsvector,
    RIGHTARG = tsvector,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (tsvector, tsvector) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (tsvector, tsvector); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (tsvector, tsvector) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = tsquery_eq,
    LEFTARG = tsquery,
    RIGHTARG = tsquery,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (tsquery, tsquery) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (tsquery, tsquery); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (tsquery, tsquery) IS 'equal';


--
-- Name: =; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.= (
    PROCEDURE = range_eq,
    LEFTARG = anyrange,
    RIGHTARG = anyrange,
    COMMUTATOR = OPERATOR(pgc_dump.=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    MERGES,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.= (anyrange, anyrange) OWNER TO pgc_dump;

--
-- Name: OPERATOR = (anyrange, anyrange); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.= (anyrange, anyrange) IS 'equal';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = boolgt,
    LEFTARG = boolean,
    RIGHTARG = boolean,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (boolean, boolean) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (boolean, boolean); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (boolean, boolean) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = int48gt,
    LEFTARG = integer,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (integer, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (integer, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (integer, bigint) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = int8gt,
    LEFTARG = bigint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (bigint, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (bigint, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (bigint, bigint) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = int84gt,
    LEFTARG = bigint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (bigint, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (bigint, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (bigint, integer) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = box_gt,
    LEFTARG = box,
    RIGHTARG = box,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = areasel,
    JOIN = areajoinsel
);


ALTER OPERATOR pgc_dump.> (box, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (box, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (box, box) IS 'greater than by area';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = int2gt,
    LEFTARG = smallint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (smallint, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (smallint, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (smallint, smallint) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = int4gt,
    LEFTARG = integer,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (integer, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (integer, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (integer, integer) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = int24gt,
    LEFTARG = smallint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (smallint, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (smallint, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (smallint, integer) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = int42gt,
    LEFTARG = integer,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (integer, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (integer, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (integer, smallint) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = abstimegt,
    LEFTARG = abstime,
    RIGHTARG = abstime,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (abstime, abstime) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (abstime, abstime); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (abstime, abstime) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = reltimegt,
    LEFTARG = reltime,
    RIGHTARG = reltime,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (reltime, reltime) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (reltime, reltime); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (reltime, reltime) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = oidgt,
    LEFTARG = oid,
    RIGHTARG = oid,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (oid, oid) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (oid, oid); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (oid, oid) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = float4gt,
    LEFTARG = real,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (real, real) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (real, real); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (real, real) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = chargt,
    LEFTARG = "char",
    RIGHTARG = "char",
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> ("char", "char") OWNER TO pgc_dump;

--
-- Name: OPERATOR > ("char", "char"); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> ("char", "char") IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = oidvectorgt,
    LEFTARG = oidvector,
    RIGHTARG = oidvector,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (oidvector, oidvector) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (oidvector, oidvector); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (oidvector, oidvector) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = namegt,
    LEFTARG = name,
    RIGHTARG = name,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (name, name) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (name, name); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (name, name) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = text_gt,
    LEFTARG = text,
    RIGHTARG = text,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (text, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (text, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (text, text) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = float8gt,
    LEFTARG = double precision,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (double precision, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (double precision, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (double precision, double precision) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = path_n_gt,
    LEFTARG = path,
    RIGHTARG = path,
    COMMUTATOR = OPERATOR(pgc_dump.<)
);


ALTER OPERATOR pgc_dump.> (path, path) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (path, path); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (path, path) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = tintervalgt,
    LEFTARG = tinterval,
    RIGHTARG = tinterval,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (tinterval, tinterval) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (tinterval, tinterval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (tinterval, tinterval) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = cash_gt,
    LEFTARG = money,
    RIGHTARG = money,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (money, money) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (money, money); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (money, money) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = bpchargt,
    LEFTARG = character,
    RIGHTARG = character,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (character, character) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (character, character); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (character, character) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = array_gt,
    LEFTARG = anyarray,
    RIGHTARG = anyarray,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (anyarray, anyarray) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (anyarray, anyarray); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (anyarray, anyarray) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = date_gt,
    LEFTARG = date,
    RIGHTARG = date,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (date, date) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (date, date); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (date, date) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = time_gt,
    LEFTARG = time without time zone,
    RIGHTARG = time without time zone,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (time without time zone, time without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (time without time zone, time without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (time without time zone, time without time zone) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = float48gt,
    LEFTARG = real,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (real, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (real, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (real, double precision) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = float84gt,
    LEFTARG = double precision,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (double precision, real) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (double precision, real); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (double precision, real) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = network_gt,
    LEFTARG = inet,
    RIGHTARG = inet,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (inet, inet) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (inet, inet); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (inet, inet) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = macaddr_gt,
    LEFTARG = macaddr,
    RIGHTARG = macaddr,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (macaddr, macaddr) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (macaddr, macaddr); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (macaddr, macaddr) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = timestamptz_gt,
    LEFTARG = timestamp with time zone,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (timestamp with time zone, timestamp with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (timestamp with time zone, timestamp with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (timestamp with time zone, timestamp with time zone) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = interval_gt,
    LEFTARG = interval,
    RIGHTARG = interval,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (interval, interval) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (interval, interval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (interval, interval) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = circle_gt,
    LEFTARG = circle,
    RIGHTARG = circle,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = areasel,
    JOIN = areajoinsel
);


ALTER OPERATOR pgc_dump.> (circle, circle) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (circle, circle); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (circle, circle) IS 'greater than by area';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = timetz_gt,
    LEFTARG = time with time zone,
    RIGHTARG = time with time zone,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (time with time zone, time with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (time with time zone, time with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (time with time zone, time with time zone) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = lseg_gt,
    LEFTARG = lseg,
    RIGHTARG = lseg,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=)
);


ALTER OPERATOR pgc_dump.> (lseg, lseg) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (lseg, lseg); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (lseg, lseg) IS 'greater than by length';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = numeric_gt,
    LEFTARG = numeric,
    RIGHTARG = numeric,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (numeric, numeric) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (numeric, numeric); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (numeric, numeric) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = bitgt,
    LEFTARG = bit,
    RIGHTARG = bit,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (bit, bit) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (bit, bit); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (bit, bit) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = varbitgt,
    LEFTARG = bit varying,
    RIGHTARG = bit varying,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (bit varying, bit varying) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (bit varying, bit varying); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (bit varying, bit varying) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = int28gt,
    LEFTARG = smallint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (smallint, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (smallint, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (smallint, bigint) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = int82gt,
    LEFTARG = bigint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (bigint, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (bigint, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (bigint, smallint) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = byteagt,
    LEFTARG = bytea,
    RIGHTARG = bytea,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (bytea, bytea) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (bytea, bytea); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (bytea, bytea) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = timestamp_gt,
    LEFTARG = timestamp without time zone,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (timestamp without time zone, timestamp without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (timestamp without time zone, timestamp without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (timestamp without time zone, timestamp without time zone) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = date_gt_timestamp,
    LEFTARG = date,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (date, timestamp without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (date, timestamp without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (date, timestamp without time zone) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = date_gt_timestamptz,
    LEFTARG = date,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (date, timestamp with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (date, timestamp with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (date, timestamp with time zone) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = timestamp_gt_date,
    LEFTARG = timestamp without time zone,
    RIGHTARG = date,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (timestamp without time zone, date) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (timestamp without time zone, date); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (timestamp without time zone, date) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = timestamptz_gt_date,
    LEFTARG = timestamp with time zone,
    RIGHTARG = date,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (timestamp with time zone, date) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (timestamp with time zone, date); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (timestamp with time zone, date) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = timestamp_gt_timestamptz,
    LEFTARG = timestamp without time zone,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (timestamp without time zone, timestamp with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (timestamp without time zone, timestamp with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (timestamp without time zone, timestamp with time zone) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = timestamptz_gt_timestamp,
    LEFTARG = timestamp with time zone,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (timestamp with time zone, timestamp without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (timestamp with time zone, timestamp without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (timestamp with time zone, timestamp without time zone) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = tidgt,
    LEFTARG = tid,
    RIGHTARG = tid,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (tid, tid) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (tid, tid); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (tid, tid) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = uuid_gt,
    LEFTARG = uuid,
    RIGHTARG = uuid,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (uuid, uuid) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (uuid, uuid); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (uuid, uuid) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = record_gt,
    LEFTARG = record,
    RIGHTARG = record,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (record, record) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (record, record); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (record, record) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = pg_lsn_gt,
    LEFTARG = pg_lsn,
    RIGHTARG = pg_lsn,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (pg_lsn, pg_lsn) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (pg_lsn, pg_lsn); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (pg_lsn, pg_lsn) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = jsonb_gt,
    LEFTARG = jsonb,
    RIGHTARG = jsonb,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (jsonb, jsonb) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (jsonb, jsonb); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (jsonb, jsonb) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = macaddr8_gt,
    LEFTARG = macaddr8,
    RIGHTARG = macaddr8,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (macaddr8, macaddr8) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (macaddr8, macaddr8); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (macaddr8, macaddr8) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = enum_gt,
    LEFTARG = anyenum,
    RIGHTARG = anyenum,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (anyenum, anyenum) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (anyenum, anyenum); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (anyenum, anyenum) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = tsvector_gt,
    LEFTARG = tsvector,
    RIGHTARG = tsvector,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (tsvector, tsvector) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (tsvector, tsvector); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (tsvector, tsvector) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = tsquery_gt,
    LEFTARG = tsquery,
    RIGHTARG = tsquery,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (tsquery, tsquery) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (tsquery, tsquery); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (tsquery, tsquery) IS 'greater than';


--
-- Name: >; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.> (
    PROCEDURE = range_gt,
    LEFTARG = anyrange,
    RIGHTARG = anyrange,
    COMMUTATOR = OPERATOR(pgc_dump.<),
    NEGATOR = OPERATOR(pgc_dump.<=),
    RESTRICT = rangesel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.> (anyrange, anyrange) OWNER TO pgc_dump;

--
-- Name: OPERATOR > (anyrange, anyrange); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.> (anyrange, anyrange) IS 'greater than';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = int48ge,
    LEFTARG = integer,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (integer, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (integer, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (integer, bigint) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = int8ge,
    LEFTARG = bigint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (bigint, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (bigint, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (bigint, bigint) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = int84ge,
    LEFTARG = bigint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (bigint, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (bigint, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (bigint, integer) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = box_ge,
    LEFTARG = box,
    RIGHTARG = box,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = areasel,
    JOIN = areajoinsel
);


ALTER OPERATOR pgc_dump.>= (box, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (box, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (box, box) IS 'greater than or equal by area';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = int2ge,
    LEFTARG = smallint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (smallint, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (smallint, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (smallint, smallint) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = int4ge,
    LEFTARG = integer,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (integer, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (integer, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (integer, integer) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = int24ge,
    LEFTARG = smallint,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (smallint, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (smallint, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (smallint, integer) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = int42ge,
    LEFTARG = integer,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (integer, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (integer, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (integer, smallint) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = abstimege,
    LEFTARG = abstime,
    RIGHTARG = abstime,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (abstime, abstime) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (abstime, abstime); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (abstime, abstime) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = reltimege,
    LEFTARG = reltime,
    RIGHTARG = reltime,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (reltime, reltime) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (reltime, reltime); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (reltime, reltime) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = oidge,
    LEFTARG = oid,
    RIGHTARG = oid,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (oid, oid) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (oid, oid); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (oid, oid) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = float4ge,
    LEFTARG = real,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (real, real) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (real, real); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (real, real) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = charge,
    LEFTARG = "char",
    RIGHTARG = "char",
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= ("char", "char") OWNER TO pgc_dump;

--
-- Name: OPERATOR >= ("char", "char"); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= ("char", "char") IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = oidvectorge,
    LEFTARG = oidvector,
    RIGHTARG = oidvector,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (oidvector, oidvector) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (oidvector, oidvector); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (oidvector, oidvector) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = namege,
    LEFTARG = name,
    RIGHTARG = name,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (name, name) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (name, name); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (name, name) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = text_ge,
    LEFTARG = text,
    RIGHTARG = text,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (text, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (text, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (text, text) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = float8ge,
    LEFTARG = double precision,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (double precision, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (double precision, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (double precision, double precision) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = path_n_ge,
    LEFTARG = path,
    RIGHTARG = path,
    COMMUTATOR = OPERATOR(pgc_dump.<=)
);


ALTER OPERATOR pgc_dump.>= (path, path) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (path, path); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (path, path) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = tintervalge,
    LEFTARG = tinterval,
    RIGHTARG = tinterval,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (tinterval, tinterval) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (tinterval, tinterval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (tinterval, tinterval) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = cash_ge,
    LEFTARG = money,
    RIGHTARG = money,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (money, money) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (money, money); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (money, money) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = bpcharge,
    LEFTARG = character,
    RIGHTARG = character,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (character, character) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (character, character); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (character, character) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = array_ge,
    LEFTARG = anyarray,
    RIGHTARG = anyarray,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (anyarray, anyarray) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (anyarray, anyarray); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (anyarray, anyarray) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = date_ge,
    LEFTARG = date,
    RIGHTARG = date,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (date, date) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (date, date); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (date, date) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = time_ge,
    LEFTARG = time without time zone,
    RIGHTARG = time without time zone,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (time without time zone, time without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (time without time zone, time without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (time without time zone, time without time zone) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = float48ge,
    LEFTARG = real,
    RIGHTARG = double precision,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (real, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (real, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (real, double precision) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = float84ge,
    LEFTARG = double precision,
    RIGHTARG = real,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (double precision, real) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (double precision, real); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (double precision, real) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = network_ge,
    LEFTARG = inet,
    RIGHTARG = inet,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (inet, inet) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (inet, inet); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (inet, inet) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = macaddr_ge,
    LEFTARG = macaddr,
    RIGHTARG = macaddr,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (macaddr, macaddr) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (macaddr, macaddr); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (macaddr, macaddr) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = timestamptz_ge,
    LEFTARG = timestamp with time zone,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (timestamp with time zone, timestamp with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (timestamp with time zone, timestamp with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (timestamp with time zone, timestamp with time zone) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = interval_ge,
    LEFTARG = interval,
    RIGHTARG = interval,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (interval, interval) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (interval, interval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (interval, interval) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = circle_ge,
    LEFTARG = circle,
    RIGHTARG = circle,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = areasel,
    JOIN = areajoinsel
);


ALTER OPERATOR pgc_dump.>= (circle, circle) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (circle, circle); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (circle, circle) IS 'greater than or equal by area';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = timetz_ge,
    LEFTARG = time with time zone,
    RIGHTARG = time with time zone,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (time with time zone, time with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (time with time zone, time with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (time with time zone, time with time zone) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = lseg_ge,
    LEFTARG = lseg,
    RIGHTARG = lseg,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<)
);


ALTER OPERATOR pgc_dump.>= (lseg, lseg) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (lseg, lseg); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (lseg, lseg) IS 'greater than or equal by length';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = boolge,
    LEFTARG = boolean,
    RIGHTARG = boolean,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (boolean, boolean) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (boolean, boolean); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (boolean, boolean) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = numeric_ge,
    LEFTARG = numeric,
    RIGHTARG = numeric,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (numeric, numeric) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (numeric, numeric); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (numeric, numeric) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = bitge,
    LEFTARG = bit,
    RIGHTARG = bit,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (bit, bit) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (bit, bit); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (bit, bit) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = varbitge,
    LEFTARG = bit varying,
    RIGHTARG = bit varying,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (bit varying, bit varying) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (bit varying, bit varying); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (bit varying, bit varying) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = int28ge,
    LEFTARG = smallint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (smallint, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (smallint, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (smallint, bigint) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = int82ge,
    LEFTARG = bigint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (bigint, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (bigint, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (bigint, smallint) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = byteage,
    LEFTARG = bytea,
    RIGHTARG = bytea,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (bytea, bytea) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (bytea, bytea); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (bytea, bytea) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = timestamp_ge,
    LEFTARG = timestamp without time zone,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (timestamp without time zone, timestamp without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (timestamp without time zone, timestamp without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (timestamp without time zone, timestamp without time zone) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = date_ge_timestamp,
    LEFTARG = date,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (date, timestamp without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (date, timestamp without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (date, timestamp without time zone) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = date_ge_timestamptz,
    LEFTARG = date,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (date, timestamp with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (date, timestamp with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (date, timestamp with time zone) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = timestamp_ge_date,
    LEFTARG = timestamp without time zone,
    RIGHTARG = date,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (timestamp without time zone, date) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (timestamp without time zone, date); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (timestamp without time zone, date) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = timestamptz_ge_date,
    LEFTARG = timestamp with time zone,
    RIGHTARG = date,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (timestamp with time zone, date) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (timestamp with time zone, date); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (timestamp with time zone, date) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = timestamp_ge_timestamptz,
    LEFTARG = timestamp without time zone,
    RIGHTARG = timestamp with time zone,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (timestamp without time zone, timestamp with time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (timestamp without time zone, timestamp with time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (timestamp without time zone, timestamp with time zone) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = timestamptz_ge_timestamp,
    LEFTARG = timestamp with time zone,
    RIGHTARG = timestamp without time zone,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (timestamp with time zone, timestamp without time zone) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (timestamp with time zone, timestamp without time zone); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (timestamp with time zone, timestamp without time zone) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = tidge,
    LEFTARG = tid,
    RIGHTARG = tid,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (tid, tid) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (tid, tid); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (tid, tid) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = uuid_ge,
    LEFTARG = uuid,
    RIGHTARG = uuid,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (uuid, uuid) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (uuid, uuid); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (uuid, uuid) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = record_ge,
    LEFTARG = record,
    RIGHTARG = record,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (record, record) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (record, record); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (record, record) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = pg_lsn_ge,
    LEFTARG = pg_lsn,
    RIGHTARG = pg_lsn,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (pg_lsn, pg_lsn) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (pg_lsn, pg_lsn); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (pg_lsn, pg_lsn) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = jsonb_ge,
    LEFTARG = jsonb,
    RIGHTARG = jsonb,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (jsonb, jsonb) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (jsonb, jsonb); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (jsonb, jsonb) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = macaddr8_ge,
    LEFTARG = macaddr8,
    RIGHTARG = macaddr8,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (macaddr8, macaddr8) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (macaddr8, macaddr8); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (macaddr8, macaddr8) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = enum_ge,
    LEFTARG = anyenum,
    RIGHTARG = anyenum,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (anyenum, anyenum) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (anyenum, anyenum); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (anyenum, anyenum) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = tsvector_ge,
    LEFTARG = tsvector,
    RIGHTARG = tsvector,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (tsvector, tsvector) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (tsvector, tsvector); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (tsvector, tsvector) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = tsquery_ge,
    LEFTARG = tsquery,
    RIGHTARG = tsquery,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (tsquery, tsquery) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (tsquery, tsquery); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (tsquery, tsquery) IS 'greater than or equal';


--
-- Name: >=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>= (
    PROCEDURE = range_ge,
    LEFTARG = anyrange,
    RIGHTARG = anyrange,
    COMMUTATOR = OPERATOR(pgc_dump.<=),
    NEGATOR = OPERATOR(pgc_dump.<),
    RESTRICT = rangesel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>= (anyrange, anyrange) OWNER TO pgc_dump;

--
-- Name: OPERATOR >= (anyrange, anyrange); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>= (anyrange, anyrange) IS 'greater than or equal';


--
-- Name: >>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>> (
    PROCEDURE = poly_right,
    LEFTARG = polygon,
    RIGHTARG = polygon,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.>> (polygon, polygon) OWNER TO pgc_dump;

--
-- Name: OPERATOR >> (polygon, polygon); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>> (polygon, polygon) IS 'is right of';


--
-- Name: >>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>> (
    PROCEDURE = box_right,
    LEFTARG = box,
    RIGHTARG = box,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.>> (box, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR >> (box, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>> (box, box) IS 'is right of';


--
-- Name: >>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>> (
    PROCEDURE = point_right,
    LEFTARG = point,
    RIGHTARG = point,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.>> (point, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR >> (point, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>> (point, point) IS 'is right of';


--
-- Name: >>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>> (
    PROCEDURE = network_sup,
    LEFTARG = inet,
    RIGHTARG = inet,
    COMMUTATOR = OPERATOR(pgc_dump.<<),
    RESTRICT = networksel,
    JOIN = networkjoinsel
);


ALTER OPERATOR pgc_dump.>> (inet, inet) OWNER TO pgc_dump;

--
-- Name: OPERATOR >> (inet, inet); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>> (inet, inet) IS 'is supernet';


--
-- Name: >>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>> (
    PROCEDURE = circle_right,
    LEFTARG = circle,
    RIGHTARG = circle,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.>> (circle, circle) OWNER TO pgc_dump;

--
-- Name: OPERATOR >> (circle, circle); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>> (circle, circle) IS 'is right of';


--
-- Name: >>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>> (
    PROCEDURE = bitshiftright,
    LEFTARG = bit,
    RIGHTARG = integer
);


ALTER OPERATOR pgc_dump.>> (bit, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR >> (bit, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>> (bit, integer) IS 'bitwise shift right';


--
-- Name: >>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>> (
    PROCEDURE = int2shr,
    LEFTARG = smallint,
    RIGHTARG = integer
);


ALTER OPERATOR pgc_dump.>> (smallint, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR >> (smallint, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>> (smallint, integer) IS 'bitwise shift right';


--
-- Name: >>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>> (
    PROCEDURE = int4shr,
    LEFTARG = integer,
    RIGHTARG = integer
);


ALTER OPERATOR pgc_dump.>> (integer, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR >> (integer, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>> (integer, integer) IS 'bitwise shift right';


--
-- Name: >>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>> (
    PROCEDURE = int8shr,
    LEFTARG = bigint,
    RIGHTARG = integer
);


ALTER OPERATOR pgc_dump.>> (bigint, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR >> (bigint, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>> (bigint, integer) IS 'bitwise shift right';


--
-- Name: >>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>> (
    PROCEDURE = range_after,
    LEFTARG = anyrange,
    RIGHTARG = anyrange,
    COMMUTATOR = OPERATOR(pgc_dump.<<),
    RESTRICT = rangesel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.>> (anyrange, anyrange) OWNER TO pgc_dump;

--
-- Name: OPERATOR >> (anyrange, anyrange); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>> (anyrange, anyrange) IS 'is right of';


--
-- Name: >>=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>>= (
    PROCEDURE = network_supeq,
    LEFTARG = inet,
    RIGHTARG = inet,
    COMMUTATOR = OPERATOR(pgc_dump.<<=),
    RESTRICT = networksel,
    JOIN = networkjoinsel
);


ALTER OPERATOR pgc_dump.>>= (inet, inet) OWNER TO pgc_dump;

--
-- Name: OPERATOR >>= (inet, inet); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>>= (inet, inet) IS 'is supernet or equal';


--
-- Name: >^; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>^ (
    PROCEDURE = point_above,
    LEFTARG = point,
    RIGHTARG = point,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.>^ (point, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR >^ (point, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>^ (point, point) IS 'is above';


--
-- Name: >^; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.>^ (
    PROCEDURE = box_above_eq,
    LEFTARG = box,
    RIGHTARG = box,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.>^ (box, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR >^ (box, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.>^ (box, box) IS 'is above (allows touching)';


--
-- Name: ?; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.? (
    PROCEDURE = jsonb_exists,
    LEFTARG = jsonb,
    RIGHTARG = text,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.? (jsonb, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR ? (jsonb, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.? (jsonb, text) IS 'key exists';


--
-- Name: ?#; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.?# (
    PROCEDURE = path_inter,
    LEFTARG = path,
    RIGHTARG = path
);


ALTER OPERATOR pgc_dump.?# (path, path) OWNER TO pgc_dump;

--
-- Name: OPERATOR ?# (path, path); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.?# (path, path) IS 'intersect';


--
-- Name: ?#; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.?# (
    PROCEDURE = box_overlap,
    LEFTARG = box,
    RIGHTARG = box,
    RESTRICT = areasel,
    JOIN = areajoinsel
);


ALTER OPERATOR pgc_dump.?# (box, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR ?# (box, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.?# (box, box) IS 'deprecated, use && instead';


--
-- Name: ?#; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.?# (
    PROCEDURE = lseg_intersect,
    LEFTARG = lseg,
    RIGHTARG = lseg,
    COMMUTATOR = OPERATOR(pgc_dump.?#)
);


ALTER OPERATOR pgc_dump.?# (lseg, lseg) OWNER TO pgc_dump;

--
-- Name: OPERATOR ?# (lseg, lseg); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.?# (lseg, lseg) IS 'intersect';


--
-- Name: ?#; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.?# (
    PROCEDURE = inter_sl,
    LEFTARG = lseg,
    RIGHTARG = line
);


ALTER OPERATOR pgc_dump.?# (lseg, line) OWNER TO pgc_dump;

--
-- Name: OPERATOR ?# (lseg, line); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.?# (lseg, line) IS 'intersect';


--
-- Name: ?#; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.?# (
    PROCEDURE = inter_sb,
    LEFTARG = lseg,
    RIGHTARG = box
);


ALTER OPERATOR pgc_dump.?# (lseg, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR ?# (lseg, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.?# (lseg, box) IS 'intersect';


--
-- Name: ?#; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.?# (
    PROCEDURE = inter_lb,
    LEFTARG = line,
    RIGHTARG = box
);


ALTER OPERATOR pgc_dump.?# (line, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR ?# (line, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.?# (line, box) IS 'intersect';


--
-- Name: ?#; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.?# (
    PROCEDURE = line_intersect,
    LEFTARG = line,
    RIGHTARG = line,
    COMMUTATOR = OPERATOR(pgc_dump.?#)
);


ALTER OPERATOR pgc_dump.?# (line, line) OWNER TO pgc_dump;

--
-- Name: OPERATOR ?# (line, line); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.?# (line, line) IS 'intersect';


--
-- Name: ?&; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.?& (
    PROCEDURE = jsonb_exists_all,
    LEFTARG = jsonb,
    RIGHTARG = text[],
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.?& (jsonb, text[]) OWNER TO pgc_dump;

--
-- Name: OPERATOR ?& (jsonb, text[]); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.?& (jsonb, text[]) IS 'all keys exist';


--
-- Name: ?-; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.?- (
    PROCEDURE = lseg_horizontal,
    RIGHTARG = lseg
);


ALTER OPERATOR pgc_dump.?- (NONE, lseg) OWNER TO pgc_dump;

--
-- Name: OPERATOR ?- (NONE, lseg); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.?- (NONE, lseg) IS 'horizontal';


--
-- Name: ?-; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.?- (
    PROCEDURE = line_horizontal,
    RIGHTARG = line
);


ALTER OPERATOR pgc_dump.?- (NONE, line) OWNER TO pgc_dump;

--
-- Name: OPERATOR ?- (NONE, line); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.?- (NONE, line) IS 'horizontal';


--
-- Name: ?-; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.?- (
    PROCEDURE = point_horiz,
    LEFTARG = point,
    RIGHTARG = point,
    COMMUTATOR = OPERATOR(pgc_dump.?-)
);


ALTER OPERATOR pgc_dump.?- (point, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR ?- (point, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.?- (point, point) IS 'horizontally aligned';


--
-- Name: ?-|; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.?-| (
    PROCEDURE = lseg_perp,
    LEFTARG = lseg,
    RIGHTARG = lseg,
    COMMUTATOR = OPERATOR(pgc_dump.?-|)
);


ALTER OPERATOR pgc_dump.?-| (lseg, lseg) OWNER TO pgc_dump;

--
-- Name: OPERATOR ?-| (lseg, lseg); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.?-| (lseg, lseg) IS 'perpendicular';


--
-- Name: ?-|; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.?-| (
    PROCEDURE = line_perp,
    LEFTARG = line,
    RIGHTARG = line,
    COMMUTATOR = OPERATOR(pgc_dump.?-|)
);


ALTER OPERATOR pgc_dump.?-| (line, line) OWNER TO pgc_dump;

--
-- Name: OPERATOR ?-| (line, line); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.?-| (line, line) IS 'perpendicular';


--
-- Name: ?|; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.?| (
    PROCEDURE = lseg_vertical,
    RIGHTARG = lseg
);


ALTER OPERATOR pgc_dump.?| (NONE, lseg) OWNER TO pgc_dump;

--
-- Name: OPERATOR ?| (NONE, lseg); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.?| (NONE, lseg) IS 'vertical';


--
-- Name: ?|; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.?| (
    PROCEDURE = line_vertical,
    RIGHTARG = line
);


ALTER OPERATOR pgc_dump.?| (NONE, line) OWNER TO pgc_dump;

--
-- Name: OPERATOR ?| (NONE, line); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.?| (NONE, line) IS 'vertical';


--
-- Name: ?|; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.?| (
    PROCEDURE = point_vert,
    LEFTARG = point,
    RIGHTARG = point,
    COMMUTATOR = OPERATOR(pgc_dump.?|)
);


ALTER OPERATOR pgc_dump.?| (point, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR ?| (point, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.?| (point, point) IS 'vertically aligned';


--
-- Name: ?|; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.?| (
    PROCEDURE = jsonb_exists_any,
    LEFTARG = jsonb,
    RIGHTARG = text[],
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.?| (jsonb, text[]) OWNER TO pgc_dump;

--
-- Name: OPERATOR ?| (jsonb, text[]); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.?| (jsonb, text[]) IS 'any key exists';


--
-- Name: ?||; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.?|| (
    PROCEDURE = lseg_parallel,
    LEFTARG = lseg,
    RIGHTARG = lseg,
    COMMUTATOR = OPERATOR(pgc_dump.?||)
);


ALTER OPERATOR pgc_dump.?|| (lseg, lseg) OWNER TO pgc_dump;

--
-- Name: OPERATOR ?|| (lseg, lseg); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.?|| (lseg, lseg) IS 'parallel';


--
-- Name: ?||; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.?|| (
    PROCEDURE = line_parallel,
    LEFTARG = line,
    RIGHTARG = line,
    COMMUTATOR = OPERATOR(pgc_dump.?||)
);


ALTER OPERATOR pgc_dump.?|| (line, line) OWNER TO pgc_dump;

--
-- Name: OPERATOR ?|| (line, line); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.?|| (line, line) IS 'parallel';


--
-- Name: @; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@ (
    PROCEDURE = int8abs,
    RIGHTARG = bigint
);


ALTER OPERATOR pgc_dump.@ (NONE, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR @ (NONE, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@ (NONE, bigint) IS 'absolute value';


--
-- Name: @; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@ (
    PROCEDURE = float4abs,
    RIGHTARG = real
);


ALTER OPERATOR pgc_dump.@ (NONE, real) OWNER TO pgc_dump;

--
-- Name: OPERATOR @ (NONE, real); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@ (NONE, real) IS 'absolute value';


--
-- Name: @; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@ (
    PROCEDURE = float8abs,
    RIGHTARG = double precision
);


ALTER OPERATOR pgc_dump.@ (NONE, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR @ (NONE, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@ (NONE, double precision) IS 'absolute value';


--
-- Name: @; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@ (
    PROCEDURE = int2abs,
    RIGHTARG = smallint
);


ALTER OPERATOR pgc_dump.@ (NONE, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR @ (NONE, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@ (NONE, smallint) IS 'absolute value';


--
-- Name: @; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@ (
    PROCEDURE = int4abs,
    RIGHTARG = integer
);


ALTER OPERATOR pgc_dump.@ (NONE, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR @ (NONE, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@ (NONE, integer) IS 'absolute value';


--
-- Name: @; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@ (
    PROCEDURE = numeric_abs,
    RIGHTARG = numeric
);


ALTER OPERATOR pgc_dump.@ (NONE, numeric) OWNER TO pgc_dump;

--
-- Name: OPERATOR @ (NONE, numeric); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@ (NONE, numeric) IS 'absolute value';


--
-- Name: @; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@ (
    PROCEDURE = poly_contained,
    LEFTARG = polygon,
    RIGHTARG = polygon,
    COMMUTATOR = OPERATOR(pgc_dump.~),
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.@ (polygon, polygon) OWNER TO pgc_dump;

--
-- Name: OPERATOR @ (polygon, polygon); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@ (polygon, polygon) IS 'deprecated, use <@ instead';


--
-- Name: @; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@ (
    PROCEDURE = box_contained,
    LEFTARG = box,
    RIGHTARG = box,
    COMMUTATOR = OPERATOR(pgc_dump.~),
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.@ (box, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR @ (box, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@ (box, box) IS 'deprecated, use <@ instead';


--
-- Name: @; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@ (
    PROCEDURE = circle_contained,
    LEFTARG = circle,
    RIGHTARG = circle,
    COMMUTATOR = OPERATOR(pgc_dump.~),
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.@ (circle, circle) OWNER TO pgc_dump;

--
-- Name: OPERATOR @ (circle, circle); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@ (circle, circle) IS 'deprecated, use <@ instead';


--
-- Name: @; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@ (
    PROCEDURE = on_pb,
    LEFTARG = point,
    RIGHTARG = box
);


ALTER OPERATOR pgc_dump.@ (point, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR @ (point, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@ (point, box) IS 'deprecated, use <@ instead';


--
-- Name: @; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@ (
    PROCEDURE = on_ppath,
    LEFTARG = point,
    RIGHTARG = path,
    COMMUTATOR = OPERATOR(pgc_dump.~)
);


ALTER OPERATOR pgc_dump.@ (point, path) OWNER TO pgc_dump;

--
-- Name: OPERATOR @ (point, path); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@ (point, path) IS 'deprecated, use <@ instead';


--
-- Name: @; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@ (
    PROCEDURE = pt_contained_poly,
    LEFTARG = point,
    RIGHTARG = polygon,
    COMMUTATOR = OPERATOR(pgc_dump.~)
);


ALTER OPERATOR pgc_dump.@ (point, polygon) OWNER TO pgc_dump;

--
-- Name: OPERATOR @ (point, polygon); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@ (point, polygon) IS 'deprecated, use <@ instead';


--
-- Name: @; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@ (
    PROCEDURE = pt_contained_circle,
    LEFTARG = point,
    RIGHTARG = circle,
    COMMUTATOR = OPERATOR(pgc_dump.~)
);


ALTER OPERATOR pgc_dump.@ (point, circle) OWNER TO pgc_dump;

--
-- Name: OPERATOR @ (point, circle); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@ (point, circle) IS 'deprecated, use <@ instead';


--
-- Name: @; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@ (
    PROCEDURE = on_pl,
    LEFTARG = point,
    RIGHTARG = line
);


ALTER OPERATOR pgc_dump.@ (point, line) OWNER TO pgc_dump;

--
-- Name: OPERATOR @ (point, line); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@ (point, line) IS 'deprecated, use <@ instead';


--
-- Name: @; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@ (
    PROCEDURE = on_ps,
    LEFTARG = point,
    RIGHTARG = lseg
);


ALTER OPERATOR pgc_dump.@ (point, lseg) OWNER TO pgc_dump;

--
-- Name: OPERATOR @ (point, lseg); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@ (point, lseg) IS 'deprecated, use <@ instead';


--
-- Name: @; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@ (
    PROCEDURE = on_sl,
    LEFTARG = lseg,
    RIGHTARG = line
);


ALTER OPERATOR pgc_dump.@ (lseg, line) OWNER TO pgc_dump;

--
-- Name: OPERATOR @ (lseg, line); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@ (lseg, line) IS 'deprecated, use <@ instead';


--
-- Name: @; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@ (
    PROCEDURE = on_sb,
    LEFTARG = lseg,
    RIGHTARG = box
);


ALTER OPERATOR pgc_dump.@ (lseg, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR @ (lseg, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@ (lseg, box) IS 'deprecated, use <@ instead';


--
-- Name: @-@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@-@ (
    PROCEDURE = path_length,
    RIGHTARG = path
);


ALTER OPERATOR pgc_dump.@-@ (NONE, path) OWNER TO pgc_dump;

--
-- Name: OPERATOR @-@ (NONE, path); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@-@ (NONE, path) IS 'sum of path segment lengths';


--
-- Name: @-@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@-@ (
    PROCEDURE = lseg_length,
    RIGHTARG = lseg
);


ALTER OPERATOR pgc_dump.@-@ (NONE, lseg) OWNER TO pgc_dump;

--
-- Name: OPERATOR @-@ (NONE, lseg); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@-@ (NONE, lseg) IS 'distance between endpoints';


--
-- Name: @>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@> (
    PROCEDURE = box_contain_pt,
    LEFTARG = box,
    RIGHTARG = point,
    COMMUTATOR = OPERATOR(pgc_dump.<@),
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.@> (box, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR @> (box, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@> (box, point) IS 'contains';


--
-- Name: @>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@> (
    PROCEDURE = poly_contain,
    LEFTARG = polygon,
    RIGHTARG = polygon,
    COMMUTATOR = OPERATOR(pgc_dump.<@),
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.@> (polygon, polygon) OWNER TO pgc_dump;

--
-- Name: OPERATOR @> (polygon, polygon); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@> (polygon, polygon) IS 'contains';


--
-- Name: @>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@> (
    PROCEDURE = box_contain,
    LEFTARG = box,
    RIGHTARG = box,
    COMMUTATOR = OPERATOR(pgc_dump.<@),
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.@> (box, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR @> (box, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@> (box, box) IS 'contains';


--
-- Name: @>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@> (
    PROCEDURE = path_contain_pt,
    LEFTARG = path,
    RIGHTARG = point,
    COMMUTATOR = OPERATOR(pgc_dump.<@)
);


ALTER OPERATOR pgc_dump.@> (path, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR @> (path, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@> (path, point) IS 'contains';


--
-- Name: @>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@> (
    PROCEDURE = poly_contain_pt,
    LEFTARG = polygon,
    RIGHTARG = point,
    COMMUTATOR = OPERATOR(pgc_dump.<@),
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.@> (polygon, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR @> (polygon, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@> (polygon, point) IS 'contains';


--
-- Name: @>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@> (
    PROCEDURE = circle_contain_pt,
    LEFTARG = circle,
    RIGHTARG = point,
    COMMUTATOR = OPERATOR(pgc_dump.<@),
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.@> (circle, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR @> (circle, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@> (circle, point) IS 'contains';


--
-- Name: @>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@> (
    PROCEDURE = aclcontains,
    LEFTARG = aclitem[],
    RIGHTARG = aclitem
);


ALTER OPERATOR pgc_dump.@> (aclitem[], aclitem) OWNER TO pgc_dump;

--
-- Name: OPERATOR @> (aclitem[], aclitem); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@> (aclitem[], aclitem) IS 'contains';


--
-- Name: @>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@> (
    PROCEDURE = circle_contain,
    LEFTARG = circle,
    RIGHTARG = circle,
    COMMUTATOR = OPERATOR(pgc_dump.<@),
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.@> (circle, circle) OWNER TO pgc_dump;

--
-- Name: OPERATOR @> (circle, circle); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@> (circle, circle) IS 'contains';


--
-- Name: @>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@> (
    PROCEDURE = arraycontains,
    LEFTARG = anyarray,
    RIGHTARG = anyarray,
    COMMUTATOR = OPERATOR(pgc_dump.<@),
    RESTRICT = arraycontsel,
    JOIN = arraycontjoinsel
);


ALTER OPERATOR pgc_dump.@> (anyarray, anyarray) OWNER TO pgc_dump;

--
-- Name: OPERATOR @> (anyarray, anyarray); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@> (anyarray, anyarray) IS 'contains';


--
-- Name: @>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@> (
    PROCEDURE = jsonb_contains,
    LEFTARG = jsonb,
    RIGHTARG = jsonb,
    COMMUTATOR = OPERATOR(pgc_dump.<@),
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.@> (jsonb, jsonb) OWNER TO pgc_dump;

--
-- Name: OPERATOR @> (jsonb, jsonb); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@> (jsonb, jsonb) IS 'contains';


--
-- Name: @>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@> (
    PROCEDURE = tsq_mcontains,
    LEFTARG = tsquery,
    RIGHTARG = tsquery,
    COMMUTATOR = OPERATOR(pgc_dump.<@),
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.@> (tsquery, tsquery) OWNER TO pgc_dump;

--
-- Name: OPERATOR @> (tsquery, tsquery); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@> (tsquery, tsquery) IS 'contains';


--
-- Name: @>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@> (
    PROCEDURE = range_contains_elem,
    LEFTARG = anyrange,
    RIGHTARG = anyelement,
    COMMUTATOR = OPERATOR(pgc_dump.<@),
    RESTRICT = rangesel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.@> (anyrange, anyelement) OWNER TO pgc_dump;

--
-- Name: OPERATOR @> (anyrange, anyelement); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@> (anyrange, anyelement) IS 'contains';


--
-- Name: @>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@> (
    PROCEDURE = range_contains,
    LEFTARG = anyrange,
    RIGHTARG = anyrange,
    COMMUTATOR = OPERATOR(pgc_dump.<@),
    RESTRICT = rangesel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.@> (anyrange, anyrange) OWNER TO pgc_dump;

--
-- Name: OPERATOR @> (anyrange, anyrange); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@> (anyrange, anyrange) IS 'contains';


--
-- Name: @@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@@ (
    PROCEDURE = box_center,
    RIGHTARG = box
);


ALTER OPERATOR pgc_dump.@@ (NONE, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR @@ (NONE, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@@ (NONE, box) IS 'center of';


--
-- Name: @@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@@ (
    PROCEDURE = lseg_center,
    RIGHTARG = lseg
);


ALTER OPERATOR pgc_dump.@@ (NONE, lseg) OWNER TO pgc_dump;

--
-- Name: OPERATOR @@ (NONE, lseg); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@@ (NONE, lseg) IS 'center of';


--
-- Name: @@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@@ (
    PROCEDURE = path_center,
    RIGHTARG = path
);


ALTER OPERATOR pgc_dump.@@ (NONE, path) OWNER TO pgc_dump;

--
-- Name: OPERATOR @@ (NONE, path); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@@ (NONE, path) IS 'center of';


--
-- Name: @@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@@ (
    PROCEDURE = poly_center,
    RIGHTARG = polygon
);


ALTER OPERATOR pgc_dump.@@ (NONE, polygon) OWNER TO pgc_dump;

--
-- Name: OPERATOR @@ (NONE, polygon); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@@ (NONE, polygon) IS 'center of';


--
-- Name: @@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@@ (
    PROCEDURE = circle_center,
    RIGHTARG = circle
);


ALTER OPERATOR pgc_dump.@@ (NONE, circle) OWNER TO pgc_dump;

--
-- Name: OPERATOR @@ (NONE, circle); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@@ (NONE, circle) IS 'center of';


--
-- Name: @@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@@ (
    PROCEDURE = ts_match_vq,
    LEFTARG = tsvector,
    RIGHTARG = tsquery,
    COMMUTATOR = OPERATOR(pgc_dump.@@),
    RESTRICT = tsmatchsel,
    JOIN = tsmatchjoinsel
);


ALTER OPERATOR pgc_dump.@@ (tsvector, tsquery) OWNER TO pgc_dump;

--
-- Name: OPERATOR @@ (tsvector, tsquery); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@@ (tsvector, tsquery) IS 'text search match';


--
-- Name: @@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@@ (
    PROCEDURE = ts_match_qv,
    LEFTARG = tsquery,
    RIGHTARG = tsvector,
    COMMUTATOR = OPERATOR(pgc_dump.@@),
    RESTRICT = tsmatchsel,
    JOIN = tsmatchjoinsel
);


ALTER OPERATOR pgc_dump.@@ (tsquery, tsvector) OWNER TO pgc_dump;

--
-- Name: OPERATOR @@ (tsquery, tsvector); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@@ (tsquery, tsvector) IS 'text search match';


--
-- Name: @@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@@ (
    PROCEDURE = ts_match_tt,
    LEFTARG = text,
    RIGHTARG = text,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.@@ (text, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR @@ (text, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@@ (text, text) IS 'text search match';


--
-- Name: @@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@@ (
    PROCEDURE = ts_match_tq,
    LEFTARG = text,
    RIGHTARG = tsquery,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.@@ (text, tsquery) OWNER TO pgc_dump;

--
-- Name: OPERATOR @@ (text, tsquery); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@@ (text, tsquery) IS 'text search match';


--
-- Name: @@@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@@@ (
    PROCEDURE = ts_match_vq,
    LEFTARG = tsvector,
    RIGHTARG = tsquery,
    COMMUTATOR = OPERATOR(pgc_dump.@@@),
    RESTRICT = tsmatchsel,
    JOIN = tsmatchjoinsel
);


ALTER OPERATOR pgc_dump.@@@ (tsvector, tsquery) OWNER TO pgc_dump;

--
-- Name: OPERATOR @@@ (tsvector, tsquery); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@@@ (tsvector, tsquery) IS 'deprecated, use @@ instead';


--
-- Name: @@@; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.@@@ (
    PROCEDURE = ts_match_qv,
    LEFTARG = tsquery,
    RIGHTARG = tsvector,
    COMMUTATOR = OPERATOR(pgc_dump.@@@),
    RESTRICT = tsmatchsel,
    JOIN = tsmatchjoinsel
);


ALTER OPERATOR pgc_dump.@@@ (tsquery, tsvector) OWNER TO pgc_dump;

--
-- Name: OPERATOR @@@ (tsquery, tsvector); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.@@@ (tsquery, tsvector) IS 'deprecated, use @@ instead';


--
-- Name: ^; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.^ (
    PROCEDURE = dpow,
    LEFTARG = double precision,
    RIGHTARG = double precision
);


ALTER OPERATOR pgc_dump.^ (double precision, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR ^ (double precision, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.^ (double precision, double precision) IS 'exponentiation';


--
-- Name: ^; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.^ (
    PROCEDURE = numeric_power,
    LEFTARG = numeric,
    RIGHTARG = numeric
);


ALTER OPERATOR pgc_dump.^ (numeric, numeric) OWNER TO pgc_dump;

--
-- Name: OPERATOR ^ (numeric, numeric); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.^ (numeric, numeric) IS 'exponentiation';


--
-- Name: |; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.| (
    PROCEDURE = tintervalstart,
    RIGHTARG = tinterval
);


ALTER OPERATOR pgc_dump.| (NONE, tinterval) OWNER TO pgc_dump;

--
-- Name: OPERATOR | (NONE, tinterval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.| (NONE, tinterval) IS 'start of interval';


--
-- Name: |; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.| (
    PROCEDURE = bitor,
    LEFTARG = bit,
    RIGHTARG = bit,
    COMMUTATOR = OPERATOR(pgc_dump.|)
);


ALTER OPERATOR pgc_dump.| (bit, bit) OWNER TO pgc_dump;

--
-- Name: OPERATOR | (bit, bit); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.| (bit, bit) IS 'bitwise or';


--
-- Name: |; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.| (
    PROCEDURE = int2or,
    LEFTARG = smallint,
    RIGHTARG = smallint,
    COMMUTATOR = OPERATOR(pgc_dump.|)
);


ALTER OPERATOR pgc_dump.| (smallint, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR | (smallint, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.| (smallint, smallint) IS 'bitwise or';


--
-- Name: |; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.| (
    PROCEDURE = int4or,
    LEFTARG = integer,
    RIGHTARG = integer,
    COMMUTATOR = OPERATOR(pgc_dump.|)
);


ALTER OPERATOR pgc_dump.| (integer, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR | (integer, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.| (integer, integer) IS 'bitwise or';


--
-- Name: |; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.| (
    PROCEDURE = int8or,
    LEFTARG = bigint,
    RIGHTARG = bigint,
    COMMUTATOR = OPERATOR(pgc_dump.|)
);


ALTER OPERATOR pgc_dump.| (bigint, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR | (bigint, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.| (bigint, bigint) IS 'bitwise or';


--
-- Name: |; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.| (
    PROCEDURE = inetor,
    LEFTARG = inet,
    RIGHTARG = inet
);


ALTER OPERATOR pgc_dump.| (inet, inet) OWNER TO pgc_dump;

--
-- Name: OPERATOR | (inet, inet); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.| (inet, inet) IS 'bitwise or';


--
-- Name: |; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.| (
    PROCEDURE = macaddr_or,
    LEFTARG = macaddr,
    RIGHTARG = macaddr
);


ALTER OPERATOR pgc_dump.| (macaddr, macaddr) OWNER TO pgc_dump;

--
-- Name: OPERATOR | (macaddr, macaddr); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.| (macaddr, macaddr) IS 'bitwise or';


--
-- Name: |; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.| (
    PROCEDURE = macaddr8_or,
    LEFTARG = macaddr8,
    RIGHTARG = macaddr8
);


ALTER OPERATOR pgc_dump.| (macaddr8, macaddr8) OWNER TO pgc_dump;

--
-- Name: OPERATOR | (macaddr8, macaddr8); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.| (macaddr8, macaddr8) IS 'bitwise or';


--
-- Name: |&>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.|&> (
    PROCEDURE = box_overabove,
    LEFTARG = box,
    RIGHTARG = box,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.|&> (box, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR |&> (box, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.|&> (box, box) IS 'overlaps or is above';


--
-- Name: |&>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.|&> (
    PROCEDURE = poly_overabove,
    LEFTARG = polygon,
    RIGHTARG = polygon,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.|&> (polygon, polygon) OWNER TO pgc_dump;

--
-- Name: OPERATOR |&> (polygon, polygon); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.|&> (polygon, polygon) IS 'overlaps or is above';


--
-- Name: |&>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.|&> (
    PROCEDURE = circle_overabove,
    LEFTARG = circle,
    RIGHTARG = circle,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.|&> (circle, circle) OWNER TO pgc_dump;

--
-- Name: OPERATOR |&> (circle, circle); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.|&> (circle, circle) IS 'overlaps or is above';


--
-- Name: |/; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.|/ (
    PROCEDURE = dsqrt,
    RIGHTARG = double precision
);


ALTER OPERATOR pgc_dump.|/ (NONE, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR |/ (NONE, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.|/ (NONE, double precision) IS 'square root';


--
-- Name: |>>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.|>> (
    PROCEDURE = circle_above,
    LEFTARG = circle,
    RIGHTARG = circle,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.|>> (circle, circle) OWNER TO pgc_dump;

--
-- Name: OPERATOR |>> (circle, circle); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.|>> (circle, circle) IS 'is above';


--
-- Name: |>>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.|>> (
    PROCEDURE = box_above,
    LEFTARG = box,
    RIGHTARG = box,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.|>> (box, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR |>> (box, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.|>> (box, box) IS 'is above';


--
-- Name: |>>; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.|>> (
    PROCEDURE = poly_above,
    LEFTARG = polygon,
    RIGHTARG = polygon,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR pgc_dump.|>> (polygon, polygon) OWNER TO pgc_dump;

--
-- Name: OPERATOR |>> (polygon, polygon); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.|>> (polygon, polygon) IS 'is above';


--
-- Name: ||; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.|| (
    PROCEDURE = array_append,
    LEFTARG = anyarray,
    RIGHTARG = anyelement
);


ALTER OPERATOR pgc_dump.|| (anyarray, anyelement) OWNER TO pgc_dump;

--
-- Name: OPERATOR || (anyarray, anyelement); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.|| (anyarray, anyelement) IS 'append element onto end of array';


--
-- Name: ||; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.|| (
    PROCEDURE = array_prepend,
    LEFTARG = anyelement,
    RIGHTARG = anyarray
);


ALTER OPERATOR pgc_dump.|| (anyelement, anyarray) OWNER TO pgc_dump;

--
-- Name: OPERATOR || (anyelement, anyarray); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.|| (anyelement, anyarray) IS 'prepend element onto front of array';


--
-- Name: ||; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.|| (
    PROCEDURE = array_cat,
    LEFTARG = anyarray,
    RIGHTARG = anyarray
);


ALTER OPERATOR pgc_dump.|| (anyarray, anyarray) OWNER TO pgc_dump;

--
-- Name: OPERATOR || (anyarray, anyarray); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.|| (anyarray, anyarray) IS 'concatenate';


--
-- Name: ||; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.|| (
    PROCEDURE = textcat,
    LEFTARG = text,
    RIGHTARG = text
);


ALTER OPERATOR pgc_dump.|| (text, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR || (text, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.|| (text, text) IS 'concatenate';


--
-- Name: ||; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.|| (
    PROCEDURE = bitcat,
    LEFTARG = bit varying,
    RIGHTARG = bit varying
);


ALTER OPERATOR pgc_dump.|| (bit varying, bit varying) OWNER TO pgc_dump;

--
-- Name: OPERATOR || (bit varying, bit varying); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.|| (bit varying, bit varying) IS 'concatenate';


--
-- Name: ||; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.|| (
    PROCEDURE = byteacat,
    LEFTARG = bytea,
    RIGHTARG = bytea
);


ALTER OPERATOR pgc_dump.|| (bytea, bytea) OWNER TO pgc_dump;

--
-- Name: OPERATOR || (bytea, bytea); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.|| (bytea, bytea) IS 'concatenate';


--
-- Name: ||; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.|| (
    PROCEDURE = textanycat,
    LEFTARG = text,
    RIGHTARG = anynonarray
);


ALTER OPERATOR pgc_dump.|| (text, anynonarray) OWNER TO pgc_dump;

--
-- Name: OPERATOR || (text, anynonarray); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.|| (text, anynonarray) IS 'concatenate';


--
-- Name: ||; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.|| (
    PROCEDURE = anytextcat,
    LEFTARG = anynonarray,
    RIGHTARG = text
);


ALTER OPERATOR pgc_dump.|| (anynonarray, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR || (anynonarray, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.|| (anynonarray, text) IS 'concatenate';


--
-- Name: ||; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.|| (
    PROCEDURE = jsonb_concat,
    LEFTARG = jsonb,
    RIGHTARG = jsonb
);


ALTER OPERATOR pgc_dump.|| (jsonb, jsonb) OWNER TO pgc_dump;

--
-- Name: OPERATOR || (jsonb, jsonb); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.|| (jsonb, jsonb) IS 'concatenate';


--
-- Name: ||; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.|| (
    PROCEDURE = tsvector_concat,
    LEFTARG = tsvector,
    RIGHTARG = tsvector
);


ALTER OPERATOR pgc_dump.|| (tsvector, tsvector) OWNER TO pgc_dump;

--
-- Name: OPERATOR || (tsvector, tsvector); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.|| (tsvector, tsvector) IS 'concatenate';


--
-- Name: ||; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.|| (
    PROCEDURE = tsquery_or,
    LEFTARG = tsquery,
    RIGHTARG = tsquery
);


ALTER OPERATOR pgc_dump.|| (tsquery, tsquery) OWNER TO pgc_dump;

--
-- Name: OPERATOR || (tsquery, tsquery); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.|| (tsquery, tsquery) IS 'OR-concatenate';


--
-- Name: ||/; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.||/ (
    PROCEDURE = dcbrt,
    RIGHTARG = double precision
);


ALTER OPERATOR pgc_dump.||/ (NONE, double precision) OWNER TO pgc_dump;

--
-- Name: OPERATOR ||/ (NONE, double precision); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.||/ (NONE, double precision) IS 'cube root';


--
-- Name: ~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~ (
    PROCEDURE = bitnot,
    RIGHTARG = bit
);


ALTER OPERATOR pgc_dump.~ (NONE, bit) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~ (NONE, bit); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~ (NONE, bit) IS 'bitwise not';


--
-- Name: ~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~ (
    PROCEDURE = int2not,
    RIGHTARG = smallint
);


ALTER OPERATOR pgc_dump.~ (NONE, smallint) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~ (NONE, smallint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~ (NONE, smallint) IS 'bitwise not';


--
-- Name: ~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~ (
    PROCEDURE = int4not,
    RIGHTARG = integer
);


ALTER OPERATOR pgc_dump.~ (NONE, integer) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~ (NONE, integer); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~ (NONE, integer) IS 'bitwise not';


--
-- Name: ~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~ (
    PROCEDURE = int8not,
    RIGHTARG = bigint
);


ALTER OPERATOR pgc_dump.~ (NONE, bigint) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~ (NONE, bigint); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~ (NONE, bigint) IS 'bitwise not';


--
-- Name: ~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~ (
    PROCEDURE = inetnot,
    RIGHTARG = inet
);


ALTER OPERATOR pgc_dump.~ (NONE, inet) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~ (NONE, inet); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~ (NONE, inet) IS 'bitwise not';


--
-- Name: ~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~ (
    PROCEDURE = macaddr_not,
    RIGHTARG = macaddr
);


ALTER OPERATOR pgc_dump.~ (NONE, macaddr) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~ (NONE, macaddr); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~ (NONE, macaddr) IS 'bitwise not';


--
-- Name: ~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~ (
    PROCEDURE = macaddr8_not,
    RIGHTARG = macaddr8
);


ALTER OPERATOR pgc_dump.~ (NONE, macaddr8) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~ (NONE, macaddr8); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~ (NONE, macaddr8) IS 'bitwise not';


--
-- Name: ~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~ (
    PROCEDURE = nameregexeq,
    LEFTARG = name,
    RIGHTARG = text,
    NEGATOR = OPERATOR(pgc_dump.!~),
    RESTRICT = regexeqsel,
    JOIN = regexeqjoinsel
);


ALTER OPERATOR pgc_dump.~ (name, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~ (name, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~ (name, text) IS 'matches regular expression, case-sensitive';


--
-- Name: ~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~ (
    PROCEDURE = textregexeq,
    LEFTARG = text,
    RIGHTARG = text,
    NEGATOR = OPERATOR(pgc_dump.!~),
    RESTRICT = regexeqsel,
    JOIN = regexeqjoinsel
);


ALTER OPERATOR pgc_dump.~ (text, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~ (text, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~ (text, text) IS 'matches regular expression, case-sensitive';


--
-- Name: ~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~ (
    PROCEDURE = bpcharregexeq,
    LEFTARG = character,
    RIGHTARG = text,
    NEGATOR = OPERATOR(pgc_dump.!~),
    RESTRICT = regexeqsel,
    JOIN = regexeqjoinsel
);


ALTER OPERATOR pgc_dump.~ (character, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~ (character, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~ (character, text) IS 'matches regular expression, case-sensitive';


--
-- Name: ~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~ (
    PROCEDURE = poly_contain,
    LEFTARG = polygon,
    RIGHTARG = polygon,
    COMMUTATOR = OPERATOR(pgc_dump.@),
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.~ (polygon, polygon) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~ (polygon, polygon); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~ (polygon, polygon) IS 'deprecated, use @> instead';


--
-- Name: ~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~ (
    PROCEDURE = box_contain,
    LEFTARG = box,
    RIGHTARG = box,
    COMMUTATOR = OPERATOR(pgc_dump.@),
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.~ (box, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~ (box, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~ (box, box) IS 'deprecated, use @> instead';


--
-- Name: ~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~ (
    PROCEDURE = circle_contain,
    LEFTARG = circle,
    RIGHTARG = circle,
    COMMUTATOR = OPERATOR(pgc_dump.@),
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR pgc_dump.~ (circle, circle) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~ (circle, circle); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~ (circle, circle) IS 'deprecated, use @> instead';


--
-- Name: ~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~ (
    PROCEDURE = path_contain_pt,
    LEFTARG = path,
    RIGHTARG = point,
    COMMUTATOR = OPERATOR(pgc_dump.@)
);


ALTER OPERATOR pgc_dump.~ (path, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~ (path, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~ (path, point) IS 'deprecated, use @> instead';


--
-- Name: ~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~ (
    PROCEDURE = poly_contain_pt,
    LEFTARG = polygon,
    RIGHTARG = point,
    COMMUTATOR = OPERATOR(pgc_dump.@)
);


ALTER OPERATOR pgc_dump.~ (polygon, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~ (polygon, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~ (polygon, point) IS 'deprecated, use @> instead';


--
-- Name: ~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~ (
    PROCEDURE = circle_contain_pt,
    LEFTARG = circle,
    RIGHTARG = point,
    COMMUTATOR = OPERATOR(pgc_dump.@)
);


ALTER OPERATOR pgc_dump.~ (circle, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~ (circle, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~ (circle, point) IS 'deprecated, use @> instead';


--
-- Name: ~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~ (
    PROCEDURE = aclcontains,
    LEFTARG = aclitem[],
    RIGHTARG = aclitem
);


ALTER OPERATOR pgc_dump.~ (aclitem[], aclitem) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~ (aclitem[], aclitem); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~ (aclitem[], aclitem) IS 'deprecated, use @> instead';


--
-- Name: ~*; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~* (
    PROCEDURE = nameicregexeq,
    LEFTARG = name,
    RIGHTARG = text,
    NEGATOR = OPERATOR(pgc_dump.!~*),
    RESTRICT = icregexeqsel,
    JOIN = icregexeqjoinsel
);


ALTER OPERATOR pgc_dump.~* (name, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~* (name, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~* (name, text) IS 'matches regular expression, case-insensitive';


--
-- Name: ~*; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~* (
    PROCEDURE = texticregexeq,
    LEFTARG = text,
    RIGHTARG = text,
    NEGATOR = OPERATOR(pgc_dump.!~*),
    RESTRICT = icregexeqsel,
    JOIN = icregexeqjoinsel
);


ALTER OPERATOR pgc_dump.~* (text, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~* (text, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~* (text, text) IS 'matches regular expression, case-insensitive';


--
-- Name: ~*; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~* (
    PROCEDURE = bpcharicregexeq,
    LEFTARG = character,
    RIGHTARG = text,
    NEGATOR = OPERATOR(pgc_dump.!~*),
    RESTRICT = icregexeqsel,
    JOIN = icregexeqjoinsel
);


ALTER OPERATOR pgc_dump.~* (character, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~* (character, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~* (character, text) IS 'matches regular expression, case-insensitive';


--
-- Name: ~<=~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~<=~ (
    PROCEDURE = text_pattern_le,
    LEFTARG = text,
    RIGHTARG = text,
    COMMUTATOR = OPERATOR(pgc_dump.~>=~),
    NEGATOR = OPERATOR(pgc_dump.~>~),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.~<=~ (text, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~<=~ (text, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~<=~ (text, text) IS 'less than or equal';


--
-- Name: ~<=~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~<=~ (
    PROCEDURE = bpchar_pattern_le,
    LEFTARG = character,
    RIGHTARG = character,
    COMMUTATOR = OPERATOR(pgc_dump.~>=~),
    NEGATOR = OPERATOR(pgc_dump.~>~),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.~<=~ (character, character) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~<=~ (character, character); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~<=~ (character, character) IS 'less than or equal';


--
-- Name: ~<~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~<~ (
    PROCEDURE = text_pattern_lt,
    LEFTARG = text,
    RIGHTARG = text,
    COMMUTATOR = OPERATOR(pgc_dump.~>~),
    NEGATOR = OPERATOR(pgc_dump.~>=~),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.~<~ (text, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~<~ (text, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~<~ (text, text) IS 'less than';


--
-- Name: ~<~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~<~ (
    PROCEDURE = bpchar_pattern_lt,
    LEFTARG = character,
    RIGHTARG = character,
    COMMUTATOR = OPERATOR(pgc_dump.~>~),
    NEGATOR = OPERATOR(pgc_dump.~>=~),
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);


ALTER OPERATOR pgc_dump.~<~ (character, character) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~<~ (character, character); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~<~ (character, character) IS 'less than';


--
-- Name: ~=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~= (
    PROCEDURE = poly_same,
    LEFTARG = polygon,
    RIGHTARG = polygon,
    COMMUTATOR = OPERATOR(pgc_dump.~=),
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.~= (polygon, polygon) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~= (polygon, polygon); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~= (polygon, polygon) IS 'same as';


--
-- Name: ~=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~= (
    PROCEDURE = box_same,
    LEFTARG = box,
    RIGHTARG = box,
    COMMUTATOR = OPERATOR(pgc_dump.~=),
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.~= (box, box) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~= (box, box); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~= (box, box) IS 'same as';


--
-- Name: ~=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~= (
    PROCEDURE = point_eq,
    LEFTARG = point,
    RIGHTARG = point,
    COMMUTATOR = OPERATOR(pgc_dump.~=),
    NEGATOR = OPERATOR(pgc_dump.<>),
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.~= (point, point) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~= (point, point); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~= (point, point) IS 'same as';


--
-- Name: ~=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~= (
    PROCEDURE = tintervalsame,
    LEFTARG = tinterval,
    RIGHTARG = tinterval,
    COMMUTATOR = OPERATOR(pgc_dump.~=),
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.~= (tinterval, tinterval) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~= (tinterval, tinterval); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~= (tinterval, tinterval) IS 'same as';


--
-- Name: ~=; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~= (
    PROCEDURE = circle_same,
    LEFTARG = circle,
    RIGHTARG = circle,
    COMMUTATOR = OPERATOR(pgc_dump.~=),
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR pgc_dump.~= (circle, circle) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~= (circle, circle); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~= (circle, circle) IS 'same as';


--
-- Name: ~>=~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~>=~ (
    PROCEDURE = text_pattern_ge,
    LEFTARG = text,
    RIGHTARG = text,
    COMMUTATOR = OPERATOR(pgc_dump.~<=~),
    NEGATOR = OPERATOR(pgc_dump.~<~),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.~>=~ (text, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~>=~ (text, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~>=~ (text, text) IS 'greater than or equal';


--
-- Name: ~>=~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~>=~ (
    PROCEDURE = bpchar_pattern_ge,
    LEFTARG = character,
    RIGHTARG = character,
    COMMUTATOR = OPERATOR(pgc_dump.~<=~),
    NEGATOR = OPERATOR(pgc_dump.~<~),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.~>=~ (character, character) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~>=~ (character, character); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~>=~ (character, character) IS 'greater than or equal';


--
-- Name: ~>~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~>~ (
    PROCEDURE = text_pattern_gt,
    LEFTARG = text,
    RIGHTARG = text,
    COMMUTATOR = OPERATOR(pgc_dump.~<~),
    NEGATOR = OPERATOR(pgc_dump.~<=~),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.~>~ (text, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~>~ (text, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~>~ (text, text) IS 'greater than';


--
-- Name: ~>~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~>~ (
    PROCEDURE = bpchar_pattern_gt,
    LEFTARG = character,
    RIGHTARG = character,
    COMMUTATOR = OPERATOR(pgc_dump.~<~),
    NEGATOR = OPERATOR(pgc_dump.~<=~),
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);


ALTER OPERATOR pgc_dump.~>~ (character, character) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~>~ (character, character); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~>~ (character, character) IS 'greater than';


--
-- Name: ~~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~~ (
    PROCEDURE = namelike,
    LEFTARG = name,
    RIGHTARG = text,
    NEGATOR = OPERATOR(pgc_dump.!~~),
    RESTRICT = likesel,
    JOIN = likejoinsel
);


ALTER OPERATOR pgc_dump.~~ (name, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~~ (name, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~~ (name, text) IS 'matches LIKE expression';


--
-- Name: ~~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~~ (
    PROCEDURE = textlike,
    LEFTARG = text,
    RIGHTARG = text,
    NEGATOR = OPERATOR(pgc_dump.!~~),
    RESTRICT = likesel,
    JOIN = likejoinsel
);


ALTER OPERATOR pgc_dump.~~ (text, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~~ (text, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~~ (text, text) IS 'matches LIKE expression';


--
-- Name: ~~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~~ (
    PROCEDURE = bpcharlike,
    LEFTARG = character,
    RIGHTARG = text,
    NEGATOR = OPERATOR(pgc_dump.!~~),
    RESTRICT = likesel,
    JOIN = likejoinsel
);


ALTER OPERATOR pgc_dump.~~ (character, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~~ (character, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~~ (character, text) IS 'matches LIKE expression';


--
-- Name: ~~; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~~ (
    PROCEDURE = bytealike,
    LEFTARG = bytea,
    RIGHTARG = bytea,
    NEGATOR = OPERATOR(pgc_dump.!~~),
    RESTRICT = likesel,
    JOIN = likejoinsel
);


ALTER OPERATOR pgc_dump.~~ (bytea, bytea) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~~ (bytea, bytea); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~~ (bytea, bytea) IS 'matches LIKE expression';


--
-- Name: ~~*; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~~* (
    PROCEDURE = nameiclike,
    LEFTARG = name,
    RIGHTARG = text,
    NEGATOR = OPERATOR(pgc_dump.!~~*),
    RESTRICT = iclikesel,
    JOIN = iclikejoinsel
);


ALTER OPERATOR pgc_dump.~~* (name, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~~* (name, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~~* (name, text) IS 'matches LIKE expression, case-insensitive';


--
-- Name: ~~*; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~~* (
    PROCEDURE = texticlike,
    LEFTARG = text,
    RIGHTARG = text,
    NEGATOR = OPERATOR(pgc_dump.!~~*),
    RESTRICT = iclikesel,
    JOIN = iclikejoinsel
);


ALTER OPERATOR pgc_dump.~~* (text, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~~* (text, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~~* (text, text) IS 'matches LIKE expression, case-insensitive';


--
-- Name: ~~*; Type: OPERATOR; Schema: pgc_dump; Owner: pgc_dump
--

CREATE OPERATOR pgc_dump.~~* (
    PROCEDURE = bpchariclike,
    LEFTARG = character,
    RIGHTARG = text,
    NEGATOR = OPERATOR(pgc_dump.!~~*),
    RESTRICT = iclikesel,
    JOIN = iclikejoinsel
);


ALTER OPERATOR pgc_dump.~~* (character, text) OWNER TO pgc_dump;

--
-- Name: OPERATOR ~~* (character, text); Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON OPERATOR pgc_dump.~~* (character, text) IS 'matches LIKE expression, case-insensitive';

--
-- Name: default; Type: TEXT SEARCH PARSER; Schema: pgc_dump; Owner: 
--

CREATE TEXT SEARCH PARSER pgc_dump."default" (
    START = prsd_start,
    GETTOKEN = prsd_nexttoken,
    END = prsd_end,
    HEADLINE = prsd_headline,
    LEXTYPES = prsd_lextype );


--
-- Name: TEXT SEARCH PARSER "default"; Type: COMMENT; Schema: pgc_dump; Owner: 
--

COMMENT ON TEXT SEARCH PARSER pgc_dump."default" IS 'default word parser';


--
-- Name: ispell; Type: TEXT SEARCH TEMPLATE; Schema: pgc_dump; Owner: 
--

CREATE TEXT SEARCH TEMPLATE pgc_dump.ispell (
    INIT = dispell_init,
    LEXIZE = dispell_lexize );


--
-- Name: TEXT SEARCH TEMPLATE ispell; Type: COMMENT; Schema: pgc_dump; Owner: 
--

COMMENT ON TEXT SEARCH TEMPLATE pgc_dump.ispell IS 'ispell dictionary';


--
-- Name: simple; Type: TEXT SEARCH TEMPLATE; Schema: pgc_dump; Owner: 
--

CREATE TEXT SEARCH TEMPLATE pgc_dump.simple (
    INIT = dsimple_init,
    LEXIZE = dsimple_lexize );


--
-- Name: TEXT SEARCH TEMPLATE simple; Type: COMMENT; Schema: pgc_dump; Owner: 
--

COMMENT ON TEXT SEARCH TEMPLATE pgc_dump.simple IS 'simple dictionary: just lower case and check for stopword';


--
-- Name: snowball; Type: TEXT SEARCH TEMPLATE; Schema: pgc_dump; Owner: 
--

CREATE TEXT SEARCH TEMPLATE pgc_dump.snowball (
    INIT = dsnowball_init,
    LEXIZE = dsnowball_lexize );


--
-- Name: TEXT SEARCH TEMPLATE snowball; Type: COMMENT; Schema: pgc_dump; Owner: 
--

COMMENT ON TEXT SEARCH TEMPLATE pgc_dump.snowball IS 'snowball stemmer';


--
-- Name: synonym; Type: TEXT SEARCH TEMPLATE; Schema: pgc_dump; Owner: 
--

CREATE TEXT SEARCH TEMPLATE pgc_dump.synonym (
    INIT = dsynonym_init,
    LEXIZE = dsynonym_lexize );


--
-- Name: TEXT SEARCH TEMPLATE synonym; Type: COMMENT; Schema: pgc_dump; Owner: 
--

COMMENT ON TEXT SEARCH TEMPLATE pgc_dump.synonym IS 'synonym dictionary: replace word by its synonym';


--
-- Name: thesaurus; Type: TEXT SEARCH TEMPLATE; Schema: pgc_dump; Owner: 
--

CREATE TEXT SEARCH TEMPLATE pgc_dump.thesaurus (
    INIT = thesaurus_init,
    LEXIZE = thesaurus_lexize );


--
-- Name: TEXT SEARCH TEMPLATE thesaurus; Type: COMMENT; Schema: pgc_dump; Owner: 
--

COMMENT ON TEXT SEARCH TEMPLATE pgc_dump.thesaurus IS 'thesaurus dictionary: phrase by phrase substitution';


--
-- Name: danish_stem; Type: TEXT SEARCH DICTIONARY; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH DICTIONARY pgc_dump.danish_stem (
    TEMPLATE = pgc_dump.snowball,
    language = 'danish', stopwords = 'danish' );


ALTER TEXT SEARCH DICTIONARY pgc_dump.danish_stem OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH DICTIONARY danish_stem; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH DICTIONARY pgc_dump.danish_stem IS 'snowball stemmer for danish language';


--
-- Name: dutch_stem; Type: TEXT SEARCH DICTIONARY; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH DICTIONARY pgc_dump.dutch_stem (
    TEMPLATE = pgc_dump.snowball,
    language = 'dutch', stopwords = 'dutch' );


ALTER TEXT SEARCH DICTIONARY pgc_dump.dutch_stem OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH DICTIONARY dutch_stem; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH DICTIONARY pgc_dump.dutch_stem IS 'snowball stemmer for dutch language';


--
-- Name: english_stem; Type: TEXT SEARCH DICTIONARY; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH DICTIONARY pgc_dump.english_stem (
    TEMPLATE = pgc_dump.snowball,
    language = 'english', stopwords = 'english' );


ALTER TEXT SEARCH DICTIONARY pgc_dump.english_stem OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH DICTIONARY english_stem; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH DICTIONARY pgc_dump.english_stem IS 'snowball stemmer for english language';


--
-- Name: finnish_stem; Type: TEXT SEARCH DICTIONARY; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH DICTIONARY pgc_dump.finnish_stem (
    TEMPLATE = pgc_dump.snowball,
    language = 'finnish', stopwords = 'finnish' );


ALTER TEXT SEARCH DICTIONARY pgc_dump.finnish_stem OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH DICTIONARY finnish_stem; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH DICTIONARY pgc_dump.finnish_stem IS 'snowball stemmer for finnish language';


--
-- Name: french_stem; Type: TEXT SEARCH DICTIONARY; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH DICTIONARY pgc_dump.french_stem (
    TEMPLATE = pgc_dump.snowball,
    language = 'french', stopwords = 'french' );


ALTER TEXT SEARCH DICTIONARY pgc_dump.french_stem OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH DICTIONARY french_stem; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH DICTIONARY pgc_dump.french_stem IS 'snowball stemmer for french language';


--
-- Name: german_stem; Type: TEXT SEARCH DICTIONARY; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH DICTIONARY pgc_dump.german_stem (
    TEMPLATE = pgc_dump.snowball,
    language = 'german', stopwords = 'german' );


ALTER TEXT SEARCH DICTIONARY pgc_dump.german_stem OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH DICTIONARY german_stem; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH DICTIONARY pgc_dump.german_stem IS 'snowball stemmer for german language';


--
-- Name: hungarian_stem; Type: TEXT SEARCH DICTIONARY; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH DICTIONARY pgc_dump.hungarian_stem (
    TEMPLATE = pgc_dump.snowball,
    language = 'hungarian', stopwords = 'hungarian' );


ALTER TEXT SEARCH DICTIONARY pgc_dump.hungarian_stem OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH DICTIONARY hungarian_stem; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH DICTIONARY pgc_dump.hungarian_stem IS 'snowball stemmer for hungarian language';


--
-- Name: italian_stem; Type: TEXT SEARCH DICTIONARY; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH DICTIONARY pgc_dump.italian_stem (
    TEMPLATE = pgc_dump.snowball,
    language = 'italian', stopwords = 'italian' );


ALTER TEXT SEARCH DICTIONARY pgc_dump.italian_stem OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH DICTIONARY italian_stem; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH DICTIONARY pgc_dump.italian_stem IS 'snowball stemmer for italian language';


--
-- Name: norwegian_stem; Type: TEXT SEARCH DICTIONARY; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH DICTIONARY pgc_dump.norwegian_stem (
    TEMPLATE = pgc_dump.snowball,
    language = 'norwegian', stopwords = 'norwegian' );


ALTER TEXT SEARCH DICTIONARY pgc_dump.norwegian_stem OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH DICTIONARY norwegian_stem; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH DICTIONARY pgc_dump.norwegian_stem IS 'snowball stemmer for norwegian language';


--
-- Name: portuguese_stem; Type: TEXT SEARCH DICTIONARY; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH DICTIONARY pgc_dump.portuguese_stem (
    TEMPLATE = pgc_dump.snowball,
    language = 'portuguese', stopwords = 'portuguese' );


ALTER TEXT SEARCH DICTIONARY pgc_dump.portuguese_stem OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH DICTIONARY portuguese_stem; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH DICTIONARY pgc_dump.portuguese_stem IS 'snowball stemmer for portuguese language';


--
-- Name: romanian_stem; Type: TEXT SEARCH DICTIONARY; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH DICTIONARY pgc_dump.romanian_stem (
    TEMPLATE = pgc_dump.snowball,
    language = 'romanian' );


ALTER TEXT SEARCH DICTIONARY pgc_dump.romanian_stem OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH DICTIONARY romanian_stem; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH DICTIONARY pgc_dump.romanian_stem IS 'snowball stemmer for romanian language';


--
-- Name: russian_stem; Type: TEXT SEARCH DICTIONARY; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH DICTIONARY pgc_dump.russian_stem (
    TEMPLATE = pgc_dump.snowball,
    language = 'russian', stopwords = 'russian' );


ALTER TEXT SEARCH DICTIONARY pgc_dump.russian_stem OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH DICTIONARY russian_stem; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH DICTIONARY pgc_dump.russian_stem IS 'snowball stemmer for russian language';


--
-- Name: simple; Type: TEXT SEARCH DICTIONARY; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH DICTIONARY pgc_dump.simple (
    TEMPLATE = pgc_dump.simple );


ALTER TEXT SEARCH DICTIONARY pgc_dump.simple OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH DICTIONARY simple; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH DICTIONARY pgc_dump.simple IS 'simple dictionary: just lower case and check for stopword';


--
-- Name: spanish_stem; Type: TEXT SEARCH DICTIONARY; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH DICTIONARY pgc_dump.spanish_stem (
    TEMPLATE = pgc_dump.snowball,
    language = 'spanish', stopwords = 'spanish' );


ALTER TEXT SEARCH DICTIONARY pgc_dump.spanish_stem OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH DICTIONARY spanish_stem; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH DICTIONARY pgc_dump.spanish_stem IS 'snowball stemmer for spanish language';


--
-- Name: swedish_stem; Type: TEXT SEARCH DICTIONARY; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH DICTIONARY pgc_dump.swedish_stem (
    TEMPLATE = pgc_dump.snowball,
    language = 'swedish', stopwords = 'swedish' );


ALTER TEXT SEARCH DICTIONARY pgc_dump.swedish_stem OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH DICTIONARY swedish_stem; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH DICTIONARY pgc_dump.swedish_stem IS 'snowball stemmer for swedish language';


--
-- Name: turkish_stem; Type: TEXT SEARCH DICTIONARY; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH DICTIONARY pgc_dump.turkish_stem (
    TEMPLATE = pgc_dump.snowball,
    language = 'turkish', stopwords = 'turkish' );


ALTER TEXT SEARCH DICTIONARY pgc_dump.turkish_stem OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH DICTIONARY turkish_stem; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH DICTIONARY pgc_dump.turkish_stem IS 'snowball stemmer for turkish language';


--
-- Name: danish; Type: TEXT SEARCH CONFIGURATION; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH CONFIGURATION pgc_dump.danish (
    PARSER = pgc_dump."default" );

ALTER TEXT SEARCH CONFIGURATION pgc_dump.danish
    ADD MAPPING FOR asciiword WITH danish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.danish
    ADD MAPPING FOR word WITH danish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.danish
    ADD MAPPING FOR numword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.danish
    ADD MAPPING FOR email WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.danish
    ADD MAPPING FOR url WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.danish
    ADD MAPPING FOR host WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.danish
    ADD MAPPING FOR sfloat WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.danish
    ADD MAPPING FOR version WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.danish
    ADD MAPPING FOR hword_numpart WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.danish
    ADD MAPPING FOR hword_part WITH danish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.danish
    ADD MAPPING FOR hword_asciipart WITH danish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.danish
    ADD MAPPING FOR numhword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.danish
    ADD MAPPING FOR asciihword WITH danish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.danish
    ADD MAPPING FOR hword WITH danish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.danish
    ADD MAPPING FOR url_path WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.danish
    ADD MAPPING FOR file WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.danish
    ADD MAPPING FOR "float" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.danish
    ADD MAPPING FOR "int" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.danish
    ADD MAPPING FOR uint WITH simple;


ALTER TEXT SEARCH CONFIGURATION pgc_dump.danish OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH CONFIGURATION danish; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH CONFIGURATION pgc_dump.danish IS 'configuration for danish language';


--
-- Name: dutch; Type: TEXT SEARCH CONFIGURATION; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH CONFIGURATION pgc_dump.dutch (
    PARSER = pgc_dump."default" );

ALTER TEXT SEARCH CONFIGURATION pgc_dump.dutch
    ADD MAPPING FOR asciiword WITH dutch_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.dutch
    ADD MAPPING FOR word WITH dutch_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.dutch
    ADD MAPPING FOR numword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.dutch
    ADD MAPPING FOR email WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.dutch
    ADD MAPPING FOR url WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.dutch
    ADD MAPPING FOR host WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.dutch
    ADD MAPPING FOR sfloat WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.dutch
    ADD MAPPING FOR version WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.dutch
    ADD MAPPING FOR hword_numpart WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.dutch
    ADD MAPPING FOR hword_part WITH dutch_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.dutch
    ADD MAPPING FOR hword_asciipart WITH dutch_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.dutch
    ADD MAPPING FOR numhword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.dutch
    ADD MAPPING FOR asciihword WITH dutch_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.dutch
    ADD MAPPING FOR hword WITH dutch_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.dutch
    ADD MAPPING FOR url_path WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.dutch
    ADD MAPPING FOR file WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.dutch
    ADD MAPPING FOR "float" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.dutch
    ADD MAPPING FOR "int" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.dutch
    ADD MAPPING FOR uint WITH simple;


ALTER TEXT SEARCH CONFIGURATION pgc_dump.dutch OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH CONFIGURATION dutch; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH CONFIGURATION pgc_dump.dutch IS 'configuration for dutch language';


--
-- Name: english; Type: TEXT SEARCH CONFIGURATION; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH CONFIGURATION pgc_dump.english (
    PARSER = pgc_dump."default" );

ALTER TEXT SEARCH CONFIGURATION pgc_dump.english
    ADD MAPPING FOR asciiword WITH english_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.english
    ADD MAPPING FOR word WITH english_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.english
    ADD MAPPING FOR numword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.english
    ADD MAPPING FOR email WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.english
    ADD MAPPING FOR url WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.english
    ADD MAPPING FOR host WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.english
    ADD MAPPING FOR sfloat WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.english
    ADD MAPPING FOR version WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.english
    ADD MAPPING FOR hword_numpart WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.english
    ADD MAPPING FOR hword_part WITH english_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.english
    ADD MAPPING FOR hword_asciipart WITH english_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.english
    ADD MAPPING FOR numhword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.english
    ADD MAPPING FOR asciihword WITH english_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.english
    ADD MAPPING FOR hword WITH english_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.english
    ADD MAPPING FOR url_path WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.english
    ADD MAPPING FOR file WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.english
    ADD MAPPING FOR "float" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.english
    ADD MAPPING FOR "int" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.english
    ADD MAPPING FOR uint WITH simple;


ALTER TEXT SEARCH CONFIGURATION pgc_dump.english OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH CONFIGURATION english; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH CONFIGURATION pgc_dump.english IS 'configuration for english language';


--
-- Name: finnish; Type: TEXT SEARCH CONFIGURATION; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH CONFIGURATION pgc_dump.finnish (
    PARSER = pgc_dump."default" );

ALTER TEXT SEARCH CONFIGURATION pgc_dump.finnish
    ADD MAPPING FOR asciiword WITH finnish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.finnish
    ADD MAPPING FOR word WITH finnish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.finnish
    ADD MAPPING FOR numword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.finnish
    ADD MAPPING FOR email WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.finnish
    ADD MAPPING FOR url WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.finnish
    ADD MAPPING FOR host WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.finnish
    ADD MAPPING FOR sfloat WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.finnish
    ADD MAPPING FOR version WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.finnish
    ADD MAPPING FOR hword_numpart WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.finnish
    ADD MAPPING FOR hword_part WITH finnish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.finnish
    ADD MAPPING FOR hword_asciipart WITH finnish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.finnish
    ADD MAPPING FOR numhword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.finnish
    ADD MAPPING FOR asciihword WITH finnish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.finnish
    ADD MAPPING FOR hword WITH finnish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.finnish
    ADD MAPPING FOR url_path WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.finnish
    ADD MAPPING FOR file WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.finnish
    ADD MAPPING FOR "float" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.finnish
    ADD MAPPING FOR "int" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.finnish
    ADD MAPPING FOR uint WITH simple;


ALTER TEXT SEARCH CONFIGURATION pgc_dump.finnish OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH CONFIGURATION finnish; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH CONFIGURATION pgc_dump.finnish IS 'configuration for finnish language';


--
-- Name: french; Type: TEXT SEARCH CONFIGURATION; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH CONFIGURATION pgc_dump.french (
    PARSER = pgc_dump."default" );

ALTER TEXT SEARCH CONFIGURATION pgc_dump.french
    ADD MAPPING FOR asciiword WITH french_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.french
    ADD MAPPING FOR word WITH french_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.french
    ADD MAPPING FOR numword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.french
    ADD MAPPING FOR email WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.french
    ADD MAPPING FOR url WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.french
    ADD MAPPING FOR host WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.french
    ADD MAPPING FOR sfloat WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.french
    ADD MAPPING FOR version WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.french
    ADD MAPPING FOR hword_numpart WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.french
    ADD MAPPING FOR hword_part WITH french_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.french
    ADD MAPPING FOR hword_asciipart WITH french_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.french
    ADD MAPPING FOR numhword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.french
    ADD MAPPING FOR asciihword WITH french_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.french
    ADD MAPPING FOR hword WITH french_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.french
    ADD MAPPING FOR url_path WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.french
    ADD MAPPING FOR file WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.french
    ADD MAPPING FOR "float" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.french
    ADD MAPPING FOR "int" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.french
    ADD MAPPING FOR uint WITH simple;


ALTER TEXT SEARCH CONFIGURATION pgc_dump.french OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH CONFIGURATION french; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH CONFIGURATION pgc_dump.french IS 'configuration for french language';


--
-- Name: german; Type: TEXT SEARCH CONFIGURATION; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH CONFIGURATION pgc_dump.german (
    PARSER = pgc_dump."default" );

ALTER TEXT SEARCH CONFIGURATION pgc_dump.german
    ADD MAPPING FOR asciiword WITH german_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.german
    ADD MAPPING FOR word WITH german_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.german
    ADD MAPPING FOR numword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.german
    ADD MAPPING FOR email WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.german
    ADD MAPPING FOR url WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.german
    ADD MAPPING FOR host WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.german
    ADD MAPPING FOR sfloat WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.german
    ADD MAPPING FOR version WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.german
    ADD MAPPING FOR hword_numpart WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.german
    ADD MAPPING FOR hword_part WITH german_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.german
    ADD MAPPING FOR hword_asciipart WITH german_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.german
    ADD MAPPING FOR numhword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.german
    ADD MAPPING FOR asciihword WITH german_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.german
    ADD MAPPING FOR hword WITH german_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.german
    ADD MAPPING FOR url_path WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.german
    ADD MAPPING FOR file WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.german
    ADD MAPPING FOR "float" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.german
    ADD MAPPING FOR "int" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.german
    ADD MAPPING FOR uint WITH simple;


ALTER TEXT SEARCH CONFIGURATION pgc_dump.german OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH CONFIGURATION german; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH CONFIGURATION pgc_dump.german IS 'configuration for german language';


--
-- Name: hungarian; Type: TEXT SEARCH CONFIGURATION; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH CONFIGURATION pgc_dump.hungarian (
    PARSER = pgc_dump."default" );

ALTER TEXT SEARCH CONFIGURATION pgc_dump.hungarian
    ADD MAPPING FOR asciiword WITH hungarian_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.hungarian
    ADD MAPPING FOR word WITH hungarian_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.hungarian
    ADD MAPPING FOR numword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.hungarian
    ADD MAPPING FOR email WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.hungarian
    ADD MAPPING FOR url WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.hungarian
    ADD MAPPING FOR host WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.hungarian
    ADD MAPPING FOR sfloat WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.hungarian
    ADD MAPPING FOR version WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.hungarian
    ADD MAPPING FOR hword_numpart WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.hungarian
    ADD MAPPING FOR hword_part WITH hungarian_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.hungarian
    ADD MAPPING FOR hword_asciipart WITH hungarian_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.hungarian
    ADD MAPPING FOR numhword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.hungarian
    ADD MAPPING FOR asciihword WITH hungarian_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.hungarian
    ADD MAPPING FOR hword WITH hungarian_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.hungarian
    ADD MAPPING FOR url_path WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.hungarian
    ADD MAPPING FOR file WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.hungarian
    ADD MAPPING FOR "float" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.hungarian
    ADD MAPPING FOR "int" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.hungarian
    ADD MAPPING FOR uint WITH simple;


ALTER TEXT SEARCH CONFIGURATION pgc_dump.hungarian OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH CONFIGURATION hungarian; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH CONFIGURATION pgc_dump.hungarian IS 'configuration for hungarian language';


--
-- Name: italian; Type: TEXT SEARCH CONFIGURATION; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH CONFIGURATION pgc_dump.italian (
    PARSER = pgc_dump."default" );

ALTER TEXT SEARCH CONFIGURATION pgc_dump.italian
    ADD MAPPING FOR asciiword WITH italian_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.italian
    ADD MAPPING FOR word WITH italian_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.italian
    ADD MAPPING FOR numword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.italian
    ADD MAPPING FOR email WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.italian
    ADD MAPPING FOR url WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.italian
    ADD MAPPING FOR host WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.italian
    ADD MAPPING FOR sfloat WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.italian
    ADD MAPPING FOR version WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.italian
    ADD MAPPING FOR hword_numpart WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.italian
    ADD MAPPING FOR hword_part WITH italian_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.italian
    ADD MAPPING FOR hword_asciipart WITH italian_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.italian
    ADD MAPPING FOR numhword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.italian
    ADD MAPPING FOR asciihword WITH italian_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.italian
    ADD MAPPING FOR hword WITH italian_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.italian
    ADD MAPPING FOR url_path WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.italian
    ADD MAPPING FOR file WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.italian
    ADD MAPPING FOR "float" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.italian
    ADD MAPPING FOR "int" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.italian
    ADD MAPPING FOR uint WITH simple;


ALTER TEXT SEARCH CONFIGURATION pgc_dump.italian OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH CONFIGURATION italian; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH CONFIGURATION pgc_dump.italian IS 'configuration for italian language';


--
-- Name: norwegian; Type: TEXT SEARCH CONFIGURATION; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH CONFIGURATION pgc_dump.norwegian (
    PARSER = pgc_dump."default" );

ALTER TEXT SEARCH CONFIGURATION pgc_dump.norwegian
    ADD MAPPING FOR asciiword WITH norwegian_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.norwegian
    ADD MAPPING FOR word WITH norwegian_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.norwegian
    ADD MAPPING FOR numword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.norwegian
    ADD MAPPING FOR email WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.norwegian
    ADD MAPPING FOR url WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.norwegian
    ADD MAPPING FOR host WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.norwegian
    ADD MAPPING FOR sfloat WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.norwegian
    ADD MAPPING FOR version WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.norwegian
    ADD MAPPING FOR hword_numpart WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.norwegian
    ADD MAPPING FOR hword_part WITH norwegian_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.norwegian
    ADD MAPPING FOR hword_asciipart WITH norwegian_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.norwegian
    ADD MAPPING FOR numhword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.norwegian
    ADD MAPPING FOR asciihword WITH norwegian_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.norwegian
    ADD MAPPING FOR hword WITH norwegian_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.norwegian
    ADD MAPPING FOR url_path WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.norwegian
    ADD MAPPING FOR file WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.norwegian
    ADD MAPPING FOR "float" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.norwegian
    ADD MAPPING FOR "int" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.norwegian
    ADD MAPPING FOR uint WITH simple;


ALTER TEXT SEARCH CONFIGURATION pgc_dump.norwegian OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH CONFIGURATION norwegian; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH CONFIGURATION pgc_dump.norwegian IS 'configuration for norwegian language';


--
-- Name: portuguese; Type: TEXT SEARCH CONFIGURATION; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH CONFIGURATION pgc_dump.portuguese (
    PARSER = pgc_dump."default" );

ALTER TEXT SEARCH CONFIGURATION pgc_dump.portuguese
    ADD MAPPING FOR asciiword WITH portuguese_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.portuguese
    ADD MAPPING FOR word WITH portuguese_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.portuguese
    ADD MAPPING FOR numword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.portuguese
    ADD MAPPING FOR email WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.portuguese
    ADD MAPPING FOR url WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.portuguese
    ADD MAPPING FOR host WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.portuguese
    ADD MAPPING FOR sfloat WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.portuguese
    ADD MAPPING FOR version WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.portuguese
    ADD MAPPING FOR hword_numpart WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.portuguese
    ADD MAPPING FOR hword_part WITH portuguese_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.portuguese
    ADD MAPPING FOR hword_asciipart WITH portuguese_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.portuguese
    ADD MAPPING FOR numhword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.portuguese
    ADD MAPPING FOR asciihword WITH portuguese_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.portuguese
    ADD MAPPING FOR hword WITH portuguese_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.portuguese
    ADD MAPPING FOR url_path WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.portuguese
    ADD MAPPING FOR file WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.portuguese
    ADD MAPPING FOR "float" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.portuguese
    ADD MAPPING FOR "int" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.portuguese
    ADD MAPPING FOR uint WITH simple;


ALTER TEXT SEARCH CONFIGURATION pgc_dump.portuguese OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH CONFIGURATION portuguese; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH CONFIGURATION pgc_dump.portuguese IS 'configuration for portuguese language';


--
-- Name: romanian; Type: TEXT SEARCH CONFIGURATION; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH CONFIGURATION pgc_dump.romanian (
    PARSER = pgc_dump."default" );

ALTER TEXT SEARCH CONFIGURATION pgc_dump.romanian
    ADD MAPPING FOR asciiword WITH romanian_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.romanian
    ADD MAPPING FOR word WITH romanian_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.romanian
    ADD MAPPING FOR numword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.romanian
    ADD MAPPING FOR email WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.romanian
    ADD MAPPING FOR url WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.romanian
    ADD MAPPING FOR host WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.romanian
    ADD MAPPING FOR sfloat WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.romanian
    ADD MAPPING FOR version WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.romanian
    ADD MAPPING FOR hword_numpart WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.romanian
    ADD MAPPING FOR hword_part WITH romanian_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.romanian
    ADD MAPPING FOR hword_asciipart WITH romanian_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.romanian
    ADD MAPPING FOR numhword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.romanian
    ADD MAPPING FOR asciihword WITH romanian_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.romanian
    ADD MAPPING FOR hword WITH romanian_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.romanian
    ADD MAPPING FOR url_path WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.romanian
    ADD MAPPING FOR file WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.romanian
    ADD MAPPING FOR "float" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.romanian
    ADD MAPPING FOR "int" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.romanian
    ADD MAPPING FOR uint WITH simple;


ALTER TEXT SEARCH CONFIGURATION pgc_dump.romanian OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH CONFIGURATION romanian; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH CONFIGURATION pgc_dump.romanian IS 'configuration for romanian language';


--
-- Name: russian; Type: TEXT SEARCH CONFIGURATION; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH CONFIGURATION pgc_dump.russian (
    PARSER = pgc_dump."default" );

ALTER TEXT SEARCH CONFIGURATION pgc_dump.russian
    ADD MAPPING FOR asciiword WITH english_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.russian
    ADD MAPPING FOR word WITH russian_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.russian
    ADD MAPPING FOR numword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.russian
    ADD MAPPING FOR email WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.russian
    ADD MAPPING FOR url WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.russian
    ADD MAPPING FOR host WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.russian
    ADD MAPPING FOR sfloat WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.russian
    ADD MAPPING FOR version WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.russian
    ADD MAPPING FOR hword_numpart WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.russian
    ADD MAPPING FOR hword_part WITH russian_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.russian
    ADD MAPPING FOR hword_asciipart WITH english_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.russian
    ADD MAPPING FOR numhword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.russian
    ADD MAPPING FOR asciihword WITH english_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.russian
    ADD MAPPING FOR hword WITH russian_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.russian
    ADD MAPPING FOR url_path WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.russian
    ADD MAPPING FOR file WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.russian
    ADD MAPPING FOR "float" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.russian
    ADD MAPPING FOR "int" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.russian
    ADD MAPPING FOR uint WITH simple;


ALTER TEXT SEARCH CONFIGURATION pgc_dump.russian OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH CONFIGURATION russian; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH CONFIGURATION pgc_dump.russian IS 'configuration for russian language';


--
-- Name: simple; Type: TEXT SEARCH CONFIGURATION; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH CONFIGURATION pgc_dump.simple (
    PARSER = pgc_dump."default" );

ALTER TEXT SEARCH CONFIGURATION pgc_dump.simple
    ADD MAPPING FOR asciiword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.simple
    ADD MAPPING FOR word WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.simple
    ADD MAPPING FOR numword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.simple
    ADD MAPPING FOR email WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.simple
    ADD MAPPING FOR url WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.simple
    ADD MAPPING FOR host WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.simple
    ADD MAPPING FOR sfloat WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.simple
    ADD MAPPING FOR version WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.simple
    ADD MAPPING FOR hword_numpart WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.simple
    ADD MAPPING FOR hword_part WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.simple
    ADD MAPPING FOR hword_asciipart WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.simple
    ADD MAPPING FOR numhword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.simple
    ADD MAPPING FOR asciihword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.simple
    ADD MAPPING FOR hword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.simple
    ADD MAPPING FOR url_path WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.simple
    ADD MAPPING FOR file WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.simple
    ADD MAPPING FOR "float" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.simple
    ADD MAPPING FOR "int" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.simple
    ADD MAPPING FOR uint WITH simple;


ALTER TEXT SEARCH CONFIGURATION pgc_dump.simple OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH CONFIGURATION simple; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH CONFIGURATION pgc_dump.simple IS 'simple configuration';


--
-- Name: spanish; Type: TEXT SEARCH CONFIGURATION; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH CONFIGURATION pgc_dump.spanish (
    PARSER = pgc_dump."default" );

ALTER TEXT SEARCH CONFIGURATION pgc_dump.spanish
    ADD MAPPING FOR asciiword WITH spanish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.spanish
    ADD MAPPING FOR word WITH spanish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.spanish
    ADD MAPPING FOR numword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.spanish
    ADD MAPPING FOR email WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.spanish
    ADD MAPPING FOR url WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.spanish
    ADD MAPPING FOR host WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.spanish
    ADD MAPPING FOR sfloat WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.spanish
    ADD MAPPING FOR version WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.spanish
    ADD MAPPING FOR hword_numpart WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.spanish
    ADD MAPPING FOR hword_part WITH spanish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.spanish
    ADD MAPPING FOR hword_asciipart WITH spanish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.spanish
    ADD MAPPING FOR numhword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.spanish
    ADD MAPPING FOR asciihword WITH spanish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.spanish
    ADD MAPPING FOR hword WITH spanish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.spanish
    ADD MAPPING FOR url_path WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.spanish
    ADD MAPPING FOR file WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.spanish
    ADD MAPPING FOR "float" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.spanish
    ADD MAPPING FOR "int" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.spanish
    ADD MAPPING FOR uint WITH simple;


ALTER TEXT SEARCH CONFIGURATION pgc_dump.spanish OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH CONFIGURATION spanish; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH CONFIGURATION pgc_dump.spanish IS 'configuration for spanish language';


--
-- Name: swedish; Type: TEXT SEARCH CONFIGURATION; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH CONFIGURATION pgc_dump.swedish (
    PARSER = pgc_dump."default" );

ALTER TEXT SEARCH CONFIGURATION pgc_dump.swedish
    ADD MAPPING FOR asciiword WITH swedish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.swedish
    ADD MAPPING FOR word WITH swedish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.swedish
    ADD MAPPING FOR numword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.swedish
    ADD MAPPING FOR email WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.swedish
    ADD MAPPING FOR url WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.swedish
    ADD MAPPING FOR host WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.swedish
    ADD MAPPING FOR sfloat WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.swedish
    ADD MAPPING FOR version WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.swedish
    ADD MAPPING FOR hword_numpart WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.swedish
    ADD MAPPING FOR hword_part WITH swedish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.swedish
    ADD MAPPING FOR hword_asciipart WITH swedish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.swedish
    ADD MAPPING FOR numhword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.swedish
    ADD MAPPING FOR asciihword WITH swedish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.swedish
    ADD MAPPING FOR hword WITH swedish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.swedish
    ADD MAPPING FOR url_path WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.swedish
    ADD MAPPING FOR file WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.swedish
    ADD MAPPING FOR "float" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.swedish
    ADD MAPPING FOR "int" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.swedish
    ADD MAPPING FOR uint WITH simple;


ALTER TEXT SEARCH CONFIGURATION pgc_dump.swedish OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH CONFIGURATION swedish; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH CONFIGURATION pgc_dump.swedish IS 'configuration for swedish language';


--
-- Name: turkish; Type: TEXT SEARCH CONFIGURATION; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TEXT SEARCH CONFIGURATION pgc_dump.turkish (
    PARSER = pgc_dump."default" );

ALTER TEXT SEARCH CONFIGURATION pgc_dump.turkish
    ADD MAPPING FOR asciiword WITH turkish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.turkish
    ADD MAPPING FOR word WITH turkish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.turkish
    ADD MAPPING FOR numword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.turkish
    ADD MAPPING FOR email WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.turkish
    ADD MAPPING FOR url WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.turkish
    ADD MAPPING FOR host WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.turkish
    ADD MAPPING FOR sfloat WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.turkish
    ADD MAPPING FOR version WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.turkish
    ADD MAPPING FOR hword_numpart WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.turkish
    ADD MAPPING FOR hword_part WITH turkish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.turkish
    ADD MAPPING FOR hword_asciipart WITH turkish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.turkish
    ADD MAPPING FOR numhword WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.turkish
    ADD MAPPING FOR asciihword WITH turkish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.turkish
    ADD MAPPING FOR hword WITH turkish_stem;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.turkish
    ADD MAPPING FOR url_path WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.turkish
    ADD MAPPING FOR file WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.turkish
    ADD MAPPING FOR "float" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.turkish
    ADD MAPPING FOR "int" WITH simple;

ALTER TEXT SEARCH CONFIGURATION pgc_dump.turkish
    ADD MAPPING FOR uint WITH simple;


ALTER TEXT SEARCH CONFIGURATION pgc_dump.turkish OWNER TO pgc_dump;

--
-- Name: TEXT SEARCH CONFIGURATION turkish; Type: COMMENT; Schema: pgc_dump; Owner: pgc_dump
--

COMMENT ON TEXT SEARCH CONFIGURATION pgc_dump.turkish IS 'configuration for turkish language';

--
-- Name: pg_aggregate; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_aggregate (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	aggfnoid regproc NOT NULL,
    aggkind "char" NOT NULL,
    aggnumdirectargs smallint NOT NULL,
    aggtransfn regproc NOT NULL,
    aggfinalfn regproc NOT NULL,
    aggcombinefn regproc NOT NULL,
    aggserialfn regproc NOT NULL,
    aggdeserialfn regproc NOT NULL,
    aggmtransfn regproc NOT NULL,
    aggminvtransfn regproc NOT NULL,
    aggmfinalfn regproc NOT NULL,
    aggfinalextra boolean NOT NULL,
    aggmfinalextra boolean NOT NULL,
    aggfinalmodify "char" NOT NULL,
    aggmfinalmodify "char" NOT NULL,
    aggsortop oid NOT NULL,
    aggtranstype oid NOT NULL,
    aggtransspace integer NOT NULL,
    aggmtranstype oid NOT NULL,
    aggmtransspace integer NOT NULL,
    agginitval text,
    aggminitval text
);

ALTER TABLE ONLY pgc_dump.pg_aggregate REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_aggregate OWNER TO pgc_dump;



--
-- Name: pg_am; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_am (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	amname name NOT NULL,
    amhandler regproc NOT NULL,
    amtype "char" NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_am REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_am OWNER TO pgc_dump;

--
-- Name: pg_amop; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_amop (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	amopfamily oid NOT NULL,
    amoplefttype oid NOT NULL,
    amoprighttype oid NOT NULL,
    amopstrategy smallint NOT NULL,
    amoppurpose "char" NOT NULL,
    amopopr oid NOT NULL,
    amopmethod oid NOT NULL,
    amopsortfamily oid NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_amop REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_amop OWNER TO pgc_dump;

--
-- Name: pg_amproc; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_amproc (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	amprocfamily oid NOT NULL,
    amproclefttype oid NOT NULL,
    amprocrighttype oid NOT NULL,
    amprocnum smallint NOT NULL,
    amproc regproc NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_amproc REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_amproc OWNER TO pgc_dump;

--
-- Name: pg_attrdef; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_attrdef (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	toid oid not null,
	adrelid oid NOT NULL,
    adnum smallint NOT NULL,
    adbin pg_node_tree,
    adsrc text
);

ALTER TABLE ONLY pgc_dump.pg_attrdef REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_attrdef OWNER TO pgc_dump;



--
-- Name: pg_attribute; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_attribute (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	attrelid oid NOT NULL,
    attname name NOT NULL,
    atttypid oid NOT NULL,
    attstattarget integer NOT NULL,
    attlen smallint NOT NULL,
    attnum smallint NOT NULL,
    attndims integer NOT NULL,
    attcacheoff integer NOT NULL,
    atttypmod integer NOT NULL,
    attbyval boolean NOT NULL,
    attstorage "char" NOT NULL,
    attalign "char" NOT NULL,
    attnotnull boolean NOT NULL,
    atthasdef boolean NOT NULL,
    atthasmissing boolean NOT NULL,
    attidentity "char" NOT NULL,
    attisdropped boolean NOT NULL,
    attislocal boolean NOT NULL,
    attinhcount integer NOT NULL,
    attcollation oid NOT NULL,
    attacl aclitem[],
    attoptions text[],
    attfdwoptions text[],
    attmissingval text[]
);

ALTER TABLE ONLY pgc_dump.pg_attribute REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_attribute OWNER TO pgc_dump;



--
-- Name: pg_auth_members; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE TABLE pgc_dump.pg_auth_members (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	roleid oid NOT NULL,
    member oid NOT NULL,
    grantor oid NOT NULL,
    admin_option boolean NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_auth_members REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_auth_members OWNER TO pgc_dump;



--
-- Name: pg_authid; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE TABLE pgc_dump.pg_authid (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	rolname name NOT NULL,
    rolsuper boolean NOT NULL,
    rolinherit boolean NOT NULL,
    rolcreaterole boolean NOT NULL,
    rolcreatedb boolean NOT NULL,
    rolcanlogin boolean NOT NULL,
    rolreplication boolean NOT NULL,
    rolbypassrls boolean NOT NULL,
    rolconnlimit integer NOT NULL,
    rolpassword text,
    rolvaliduntil timestamp with time zone
);

ALTER TABLE ONLY pgc_dump.pg_authid REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_authid OWNER TO pgc_dump;

--
-- Name: pg_available_extension_versions; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_available_extension_versions AS
 SELECT e.name,
    e.version,
    (x.extname IS NOT NULL) AS installed,
    e.superuser,
    e.relocatable,
    e.schema,
    e.requires,
    e.comment
   FROM (pg_available_extension_versions() e(name, version, superuser, relocatable, schema, requires, comment)
     LEFT JOIN pg_extension x ON (((e.name = x.extname) AND (e.version = x.extversion))));


ALTER TABLE pgc_dump.pg_available_extension_versions OWNER TO pgc_dump;

--
-- Name: pg_available_extensions; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_available_extensions AS
 SELECT e.name,
    e.default_version,
    x.extversion AS installed_version,
    e.comment
   FROM (pg_available_extensions() e(name, default_version, comment)
     LEFT JOIN pg_extension x ON ((e.name = x.extname)));


ALTER TABLE pgc_dump.pg_available_extensions OWNER TO pgc_dump;

SET default_tablespace = '';

--
-- Name: pg_cast; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_cast (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	castsource oid NOT NULL,
    casttarget oid NOT NULL,
    castfunc oid NOT NULL,
    castcontext "char" NOT NULL,
    castmethod "char" NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_cast REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_cast OWNER TO pgc_dump;

--
-- Name: pg_class; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_class (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	"toid" oid not null,
	relname name NOT NULL,
    relnamespace oid NOT NULL,
    reltype oid NOT NULL,
    reloftype oid NOT NULL,
    relowner oid NOT NULL,
    relam oid NOT NULL,
    relfilenode oid NOT NULL,
    reltablespace oid NOT NULL,
    relpages integer NOT NULL,
    reltuples real NOT NULL,
    relallvisible integer NOT NULL,
    reltoastrelid oid NOT NULL,
    relhasindex boolean NOT NULL,
    relisshared boolean NOT NULL,
    relpersistence "char" NOT NULL,
    relkind "char" NOT NULL,
    relnatts smallint NOT NULL,
    relchecks smallint NOT NULL,
    relhasoids boolean NOT NULL,
    relhasrules boolean NOT NULL,
    relhastriggers boolean NOT NULL,
    relhassubclass boolean NOT NULL,
    relrowsecurity boolean NOT NULL,
    relforcerowsecurity boolean NOT NULL,
    relispopulated boolean NOT NULL,
    relreplident "char" NOT NULL,
    relispartition boolean NOT NULL,
    relrewrite oid  NULL,
    relfrozenxid xid NOT NULL,
    relminmxid xid NOT NULL,
    relacl aclitem[],
    reloptions text[],
    relpartbound pg_node_tree
);

ALTER TABLE ONLY pgc_dump.pg_class REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_class OWNER TO pgc_dump;

--
-- Name: pg_collation; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_collation (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	collname name NOT NULL,
    collnamespace oid NOT NULL,
    collowner oid NOT NULL,
    collprovider "char" NOT NULL,
    collencoding integer NOT NULL,
    collcollate name NOT NULL,
    collctype name NOT NULL,
    collversion text
);

ALTER TABLE ONLY pgc_dump.pg_collation REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_collation OWNER TO pgc_dump;

--
-- Name: pg_config; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_config AS
 SELECT pg_config.name,
    pg_config.setting
   FROM pg_config() pg_config(name, setting);


ALTER TABLE pgc_dump.pg_config OWNER TO pgc_dump;

create table pgc_dump.pg_view_def(
	db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	toid	oid NOT NULL,
	viewdef text
);
ALTER TABLE ONLY pgc_dump.pg_view_def REPLICA IDENTITY NOTHING;
ALTER TABLE pgc_dump.pg_view_def OWNER TO pgc_dump;

--
-- Name: pg_constraint; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_constraint (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	toid oid not null,
	conname name NOT NULL,
    connamespace oid NOT NULL,
    contype "char" NOT NULL,
    condeferrable boolean NOT NULL,
    condeferred boolean NOT NULL,
    convalidated boolean NOT NULL,
    conrelid oid NOT NULL,
    contypid oid NOT NULL,
    conindid oid NOT NULL,
    conparentid oid NOT NULL,
    confrelid oid NOT NULL,
    confupdtype "char" NOT NULL,
    confdeltype "char" NOT NULL,
    confmatchtype "char" NOT NULL,
    conislocal boolean NOT NULL,
    coninhcount integer NOT NULL,
    connoinherit boolean NOT NULL,
    conkey smallint[],
    confkey smallint[],
    conpfeqop oid[],
    conppeqop oid[],
    conffeqop oid[],
    conexclop oid[],
    conbin pg_node_tree,
    consrc text,
	condef text
);

ALTER TABLE ONLY pgc_dump.pg_constraint REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_constraint OWNER TO pgc_dump;

--
-- Name: pg_conversion; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_conversion (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	conname name NOT NULL,
    connamespace oid NOT NULL,
    conowner oid NOT NULL,
    conforencoding integer NOT NULL,
    contoencoding integer NOT NULL,
    conproc regproc NOT NULL,
    condefault boolean NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_conversion REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_conversion OWNER TO pgc_dump;

--
-- Name: pg_cursors; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_cursors AS
 SELECT c.name,
    c.statement,
    c.is_holdable,
    c.is_binary,
    c.is_scrollable,
    c.creation_time
   FROM pg_cursor() c(name, statement, is_holdable, is_binary, is_scrollable, creation_time);


ALTER TABLE pgc_dump.pg_cursors OWNER TO pgc_dump;



--
-- Name: pg_database; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE TABLE pgc_dump.pg_database (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	datname name NOT NULL,
    datdba oid NOT NULL,
    encoding integer NOT NULL,
    datcollate name NOT NULL,
    datctype name NOT NULL,
    datistemplate boolean NOT NULL,
    datallowconn boolean NOT NULL,
    datconnlimit integer NOT NULL,
    datlastsysoid oid NOT NULL,
    datfrozenxid xid NOT NULL,
    datminmxid xid NOT NULL,
    dattablespace oid NOT NULL,
    datacl aclitem[]
);

ALTER TABLE ONLY pgc_dump.pg_database REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_database OWNER TO pgc_dump;

SET default_with_oids = false;

--
-- Name: pg_db_role_setting; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE TABLE pgc_dump.pg_db_role_setting (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	setdatabase oid NOT NULL,
    setrole oid NOT NULL,
    setconfig text[]
);

ALTER TABLE ONLY pgc_dump.pg_db_role_setting REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_db_role_setting OWNER TO pgc_dump;

SET default_tablespace = '';



--
-- Name: pg_default_acl; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_default_acl (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	defaclrole oid NOT NULL,
    defaclnamespace oid NOT NULL,
    defaclobjtype "char" NOT NULL,
    defaclacl aclitem[]
);

ALTER TABLE ONLY pgc_dump.pg_default_acl REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_default_acl OWNER TO pgc_dump;

SET default_with_oids = false;

--
-- Name: pg_depend; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_depend (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	classid oid NOT NULL,
    objid oid NOT NULL,
    objsubid integer NOT NULL,
    refclassid oid NOT NULL,
    refobjid oid NOT NULL,
    refobjsubid integer NOT NULL,
    deptype "char" NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_depend REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_depend OWNER TO pgc_dump;

--
-- Name: pg_description; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_description (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	objoid oid NOT NULL,
    classoid oid NOT NULL,
    objsubid integer NOT NULL,
    description text NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_description REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_description OWNER TO pgc_dump;



--
-- Name: pg_enum; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_enum (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	enumtypid oid NOT NULL,
    enumsortorder real NOT NULL,
    enumlabel name NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_enum REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_enum OWNER TO pgc_dump;

--
-- Name: pg_event_trigger; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_event_trigger (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	evtname name NOT NULL,
    evtevent name NOT NULL,
    evtowner oid NOT NULL,
    evtfoid oid NOT NULL,
    evtenabled "char" NOT NULL,
    evttags text[]
);

ALTER TABLE ONLY pgc_dump.pg_event_trigger REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_event_trigger OWNER TO pgc_dump;

--
-- Name: pg_extension; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_extension (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	extname name NOT NULL,
    extowner oid NOT NULL,
    extnamespace oid NOT NULL,
    extrelocatable boolean NOT NULL,
    extversion text NOT NULL,
    extconfig oid[],
    extcondition text[]
);

ALTER TABLE ONLY pgc_dump.pg_extension REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_extension OWNER TO pgc_dump;

--
-- Name: pg_foreign_data_wrapper; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_foreign_data_wrapper (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	fdwname name NOT NULL,
    fdwowner oid NOT NULL,
    fdwhandler oid NOT NULL,
    fdwvalidator oid NOT NULL,
    fdwacl aclitem[],
    fdwoptions text[]
);

ALTER TABLE ONLY pgc_dump.pg_foreign_data_wrapper REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_foreign_data_wrapper OWNER TO pgc_dump;

--
-- Name: pg_foreign_server; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_foreign_server (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	srvname name NOT NULL,
    srvowner oid NOT NULL,
    srvfdw oid NOT NULL,
    srvtype text,
    srvversion text,
    srvacl aclitem[],
    srvoptions text[]
);

ALTER TABLE ONLY pgc_dump.pg_foreign_server REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_foreign_server OWNER TO pgc_dump;

SET default_with_oids = false;

--
-- Name: pg_foreign_table; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_foreign_table (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	ftrelid oid NOT NULL,
    ftserver oid NOT NULL,
    ftoptions text[]
);

ALTER TABLE ONLY pgc_dump.pg_foreign_table REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_foreign_table OWNER TO pgc_dump;


--
-- Name: pg_hba_file_rules; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

create table pgc_dump.pg_roles(
	db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	rolname name NOT NULL,
	rolsuper boolean NOT NULL,
	rolinherit boolean NOT NULL,
	rolcreaterole boolean NOT NULL,
	rolcreatedb boolean NOT NULL,
    rolcanlogin boolean NOT NULL,
	rolreplication boolean NOT NULL,
	rolconnlimit integer NOT NULL,
	rolpassword text,
	rolvaliduntil timestamp with time zone,
	rolbypassrls boolean NOT NULL,
	rolconfig text[]
);
ALTER TABLE ONLY pgc_dump.pg_roles REPLICA IDENTITY NOTHING;
ALTER TABLE pgc_dump.pg_roles OWNER TO pgc_dump;

--
-- Name: pg_index; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_index (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	indexrelid oid NOT NULL,
    indrelid oid NOT NULL,
    indnatts smallint NOT NULL,
    indnkeyatts smallint NOT NULL,
    indisunique boolean NOT NULL,
    indisprimary boolean NOT NULL,
    indisexclusion boolean NOT NULL,
    indimmediate boolean NOT NULL,
    indisclustered boolean NOT NULL,
    indisvalid boolean NOT NULL,
    indcheckxmin boolean NOT NULL,
    indisready boolean NOT NULL,
    indislive boolean NOT NULL,
    indisreplident boolean NOT NULL,
    indkey int2vector NOT NULL,
    indcollation oidvector NOT NULL,
    indclass oidvector NOT NULL,
    indoption int2vector NOT NULL,
    indexprs pg_node_tree,
    indpred pg_node_tree,
	indexdef text
);

ALTER TABLE ONLY pgc_dump.pg_index REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_index OWNER TO pgc_dump;

--
-- Name: pg_indexes; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_indexes AS
 SELECT n.nspname AS schemaname,
    c.relname AS tablename,
    i.relname AS indexname,
    t.spcname AS tablespace,
    pg_get_indexdef(i.oid) AS indexdef
   FROM ((((pg_index x
     JOIN pg_class c ON ((c.oid = x.indrelid)))
     JOIN pg_class i ON ((i.oid = x.indexrelid)))
     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
     LEFT JOIN pg_tablespace t ON ((t.oid = i.reltablespace)))
  WHERE ((c.relkind = ANY (ARRAY['r'::"char", 'm'::"char"])) AND (i.relkind = 'i'::"char"));


ALTER TABLE pgc_dump.pg_indexes OWNER TO pgc_dump;

--
-- Name: pg_inherits; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_inherits (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	inhrelid oid NOT NULL,
    inhparent oid NOT NULL,
    inhseqno integer NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_inherits REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_inherits OWNER TO pgc_dump;

--
-- Name: pg_init_privs; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_init_privs (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	objoid oid NOT NULL,
    classoid oid NOT NULL,
    objsubid integer NOT NULL,
    privtype "char" NOT NULL,
    initprivs aclitem[]  NULL
);

ALTER TABLE ONLY pgc_dump.pg_init_privs REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_init_privs OWNER TO pgc_dump;



--
-- Name: pg_language; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_language (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	lanname name NOT NULL,
    lanowner oid NOT NULL,
    lanispl boolean NOT NULL,
    lanpltrusted boolean NOT NULL,
    lanplcallfoid oid NOT NULL,
    laninline oid NOT NULL,
    lanvalidator oid NOT NULL,
    lanacl aclitem[]
);

ALTER TABLE ONLY pgc_dump.pg_language REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_language OWNER TO pgc_dump;

SET default_with_oids = false;

--
-- Name: pg_largeobject; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_largeobject (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	loid oid NOT NULL,
    pageno integer NOT NULL,
    data bytea NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_largeobject REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_largeobject OWNER TO pgc_dump;



--
-- Name: pg_largeobject_metadata; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_largeobject_metadata (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	lomowner oid NOT NULL,
    lomacl aclitem[]
);

ALTER TABLE ONLY pgc_dump.pg_largeobject_metadata REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_largeobject_metadata OWNER TO pgc_dump;

--
-- Name: pg_locks; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_locks AS
 SELECT l.locktype,
    l.database,
    l.relation,
    l.page,
    l.tuple,
    l.virtualxid,
    l.transactionid,
    l.classid,
    l.objid,
    l.objsubid,
    l.virtualtransaction,
    l.pid,
    l.mode,
    l.granted,
    l.fastpath
   FROM pg_lock_status() l(locktype, database, relation, page, tuple, virtualxid, transactionid, classid, objid, objsubid, virtualtransaction, pid, mode, granted, fastpath);


ALTER TABLE pgc_dump.pg_locks OWNER TO pgc_dump;

--
-- Name: pg_matviews; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_matviews AS
 SELECT n.nspname AS schemaname,
    c.relname AS matviewname,
    pg_get_userbyid(c.relowner) AS matviewowner,
    t.spcname AS tablespace,
    c.relhasindex AS hasindexes,
    c.relispopulated AS ispopulated,
    pg_get_viewdef(c.oid) AS definition
   FROM ((pg_class c
     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
     LEFT JOIN pg_tablespace t ON ((t.oid = c.reltablespace)))
  WHERE (c.relkind = 'm'::"char");


ALTER TABLE pgc_dump.pg_matviews OWNER TO pgc_dump;

--
-- Name: pg_namespace; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_namespace (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	nspname name NOT NULL,
    nspowner oid NOT NULL,
    nspacl aclitem[]
);

ALTER TABLE ONLY pgc_dump.pg_namespace REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_namespace OWNER TO pgc_dump;

--
-- Name: pg_opclass; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_opclass (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	opcmethod oid NOT NULL,
    opcname name NOT NULL,
    opcnamespace oid NOT NULL,
    opcowner oid NOT NULL,
    opcfamily oid NOT NULL,
    opcintype oid NOT NULL,
    opcdefault boolean NOT NULL,
    opckeytype oid NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_opclass REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_opclass OWNER TO pgc_dump;

--
-- Name: pg_operator; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_operator (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	oprname name NOT NULL,
    oprnamespace oid NOT NULL,
    oprowner oid NOT NULL,
    oprkind "char" NOT NULL,
    oprcanmerge boolean NOT NULL,
    oprcanhash boolean NOT NULL,
    oprleft oid NOT NULL,
    oprright oid NOT NULL,
    oprresult oid NOT NULL,
    oprcom oid NOT NULL,
    oprnegate oid NOT NULL,
    oprcode regproc NOT NULL,
    oprrest regproc NOT NULL,
    oprjoin regproc NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_operator REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_operator OWNER TO pgc_dump;

--
-- Name: pg_opfamily; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_opfamily (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	opfmethod oid NOT NULL,
    opfname name NOT NULL,
    opfnamespace oid NOT NULL,
    opfowner oid NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_opfamily REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_opfamily OWNER TO pgc_dump;

SET default_with_oids = false;

--
-- Name: pg_partitioned_table; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_partitioned_table (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	partrelid oid NOT NULL,
    partstrat "char" NOT NULL,
    partnatts smallint NOT NULL,
    partdefid oid NOT NULL,
    partattrs int2vector NOT NULL,
    partclass oidvector NOT NULL,
    partcollation oidvector NOT NULL,
    partexprs pg_node_tree
);

ALTER TABLE ONLY pgc_dump.pg_partitioned_table REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_partitioned_table OWNER TO pgc_dump;



--
-- Name: pg_pltemplate; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE TABLE pgc_dump.pg_pltemplate (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	tmplname name NOT NULL,
    tmpltrusted boolean NOT NULL,
    tmpldbacreate boolean NOT NULL,
    tmplhandler text NOT NULL,
    tmplinline text,
    tmplvalidator text,
    tmpllibrary text NOT NULL,
    tmplacl aclitem[]
);

ALTER TABLE ONLY pgc_dump.pg_pltemplate REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_pltemplate OWNER TO pgc_dump;

--
-- Name: pg_policies; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_policies AS
 SELECT n.nspname AS schemaname,
    c.relname AS tablename,
    pol.polname AS policyname,
        CASE
            WHEN pol.polpermissive THEN 'PERMISSIVE'::text
            ELSE 'RESTRICTIVE'::text
        END AS permissive,
        CASE
            WHEN (pol.polroles = '{0}'::oid[]) THEN (string_to_array('public'::text, ''::text))::name[]
            ELSE ARRAY( SELECT pg_authid.rolname
               FROM pg_authid
              WHERE (pg_authid.oid = ANY (pol.polroles))
              ORDER BY pg_authid.rolname)
        END AS roles,
        CASE pol.polcmd
            WHEN 'r'::"char" THEN 'SELECT'::text
            WHEN 'a'::"char" THEN 'INSERT'::text
            WHEN 'w'::"char" THEN 'UPDATE'::text
            WHEN 'd'::"char" THEN 'DELETE'::text
            WHEN '*'::"char" THEN 'ALL'::text
            ELSE NULL::text
        END AS cmd,
    pg_get_expr(pol.polqual, pol.polrelid) AS qual,
    pg_get_expr(pol.polwithcheck, pol.polrelid) AS with_check
   FROM ((pg_policy pol
     JOIN pg_class c ON ((c.oid = pol.polrelid)))
     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)));


ALTER TABLE pgc_dump.pg_policies OWNER TO pgc_dump;

SET default_tablespace = '';



--
-- Name: pg_policy; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_policy (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	polname name NOT NULL,
    polrelid oid NOT NULL,
    polcmd "char" NOT NULL,
    polpermissive boolean NOT NULL,
    polroles oid[],
    polqual pg_node_tree,
    polwithcheck pg_node_tree
);

ALTER TABLE ONLY pgc_dump.pg_policy REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_policy OWNER TO pgc_dump;

--
-- Name: pg_prepared_statements; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_prepared_statements AS
 SELECT p.name,
    p.statement,
    p.prepare_time,
    p.parameter_types,
    p.from_sql
   FROM pg_prepared_statement() p(name, statement, prepare_time, parameter_types, from_sql);


ALTER TABLE pgc_dump.pg_prepared_statements OWNER TO pgc_dump;

--
-- Name: pg_prepared_xacts; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_prepared_xacts AS
 SELECT p.transaction,
    p.gid,
    p.prepared,
    u.rolname AS owner,
    d.datname AS database
   FROM ((pg_prepared_xact() p(transaction, gid, prepared, ownerid, dbid)
     LEFT JOIN pg_authid u ON ((p.ownerid = u.oid)))
     LEFT JOIN pg_database d ON ((p.dbid = d.oid)));


ALTER TABLE pgc_dump.pg_prepared_xacts OWNER TO pgc_dump;

--
-- Name: pg_proc; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_proc (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	proname name NOT NULL,
    pronamespace oid NOT NULL,
    proowner oid NOT NULL,
    prolang oid NOT NULL,
    procost real NOT NULL,
    prorows real NOT NULL,
    provariadic oid NOT NULL,
    protransform regproc NOT NULL,
    prokind "char" NOT NULL,
    prosecdef boolean NOT NULL,
    proleakproof boolean NOT NULL,
    proisstrict boolean NOT NULL,
    proretset boolean NOT NULL,
    provolatile "char" NOT NULL,
    proparallel "char" NOT NULL,
    pronargs smallint NOT NULL,
    pronargdefaults smallint NOT NULL,
    prorettype oid NOT NULL,
    proargtypes oidvector NOT NULL,
    proallargtypes oid[],
    proargmodes "char"[],
    proargnames text[],
    proargdefaults pg_node_tree,
    protrftypes oid[],
    prosrc text NOT NULL,
    probin text,
    proconfig text[],
    proacl aclitem[],
    funcargs text,
	funciargs text,
	funcresult text
);

ALTER TABLE ONLY pgc_dump.pg_proc REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_proc OWNER TO pgc_dump;

--
-- Name: pg_publication; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_publication (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	pubname name NOT NULL,
    pubowner oid NOT NULL,
    puballtables boolean NOT NULL,
    pubinsert boolean NOT NULL,
    pubupdate boolean NOT NULL,
    pubdelete boolean NOT NULL,
    pubtruncate boolean NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_publication REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_publication OWNER TO pgc_dump;

--
-- Name: pg_publication_rel; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_publication_rel (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	prpubid oid NOT NULL,
    prrelid oid NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_publication_rel REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_publication_rel OWNER TO pgc_dump;

--
-- Name: pg_publication_tables; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_publication_tables AS
 SELECT p.pubname,
    n.nspname AS schemaname,
    c.relname AS tablename
   FROM pg_publication p,
    (pg_class c
     JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
  WHERE (c.oid IN ( SELECT pg_get_publication_tables.relid
           FROM pg_get_publication_tables((p.pubname)::text) pg_get_publication_tables(relid)));


ALTER TABLE pgc_dump.pg_publication_tables OWNER TO pgc_dump;

SET default_with_oids = false;

--
-- Name: pg_range; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_range (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	rngtypid oid NOT NULL,
    rngsubtype oid NOT NULL,
    rngcollation oid NOT NULL,
    rngsubopc oid NOT NULL,
    rngcanonical regproc NOT NULL,
    rngsubdiff regproc NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_range REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_range OWNER TO pgc_dump;



--
-- Name: pg_replication_origin; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE TABLE pgc_dump.pg_replication_origin (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	roident oid NOT NULL,
    roname text NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_replication_origin REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_replication_origin OWNER TO pgc_dump;

--
-- Name: pg_replication_origin_status; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_replication_origin_status AS
 SELECT pg_show_replication_origin_status.local_id,
    pg_show_replication_origin_status.external_id,
    pg_show_replication_origin_status.remote_lsn,
    pg_show_replication_origin_status.local_lsn
   FROM pg_show_replication_origin_status() pg_show_replication_origin_status(local_id, external_id, remote_lsn, local_lsn);


ALTER TABLE pgc_dump.pg_replication_origin_status OWNER TO pgc_dump;

--
-- Name: pg_replication_slots; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_replication_slots AS
 SELECT l.slot_name,
    l.plugin,
    l.slot_type,
    l.datoid,
    d.datname AS database,
    l.temporary,
    l.active,
    l.active_pid,
    l.xmin,
    l.catalog_xmin,
    l.restart_lsn,
    l.confirmed_flush_lsn
   FROM (pg_get_replication_slots() l(slot_name, plugin, slot_type, datoid, temporary, active, active_pid, xmin, catalog_xmin, restart_lsn, confirmed_flush_lsn)
     LEFT JOIN pg_database d ON ((l.datoid = d.oid)));


ALTER TABLE pgc_dump.pg_replication_slots OWNER TO pgc_dump;

SET default_tablespace = '';



--
-- Name: pg_rewrite; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_rewrite (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	rulename name NOT NULL,
    ev_class oid NOT NULL,
    ev_type "char" NOT NULL,
    ev_enabled "char" NOT NULL,
    is_instead boolean NOT NULL,
    ev_qual pg_node_tree,
    ev_action pg_node_tree
);

ALTER TABLE ONLY pgc_dump.pg_rewrite REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_rewrite OWNER TO pgc_dump;

--
-- Name: pg_rules; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_rules AS
 SELECT n.nspname AS schemaname,
    c.relname AS tablename,
    r.rulename,
    pg_get_ruledef(r.oid) AS definition
   FROM ((pg_rewrite r
     JOIN pg_class c ON ((c.oid = r.ev_class)))
     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
  WHERE (r.rulename <> '_RETURN'::name);


ALTER TABLE pgc_dump.pg_rules OWNER TO pgc_dump;

SET default_with_oids = false;

--
-- Name: pg_seclabel; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_seclabel (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	objoid oid NOT NULL,
    classoid oid NOT NULL,
    objsubid integer NOT NULL,
    provider text NOT NULL,
    label text NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_seclabel REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_seclabel OWNER TO pgc_dump;

--
-- Name: pg_seclabels; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_seclabels AS
 SELECT l.objoid,
    l.classoid,
    l.objsubid,
        CASE
            WHEN (rel.relkind = ANY (ARRAY['r'::"char", 'p'::"char"])) THEN 'table'::text
            WHEN (rel.relkind = 'v'::"char") THEN 'view'::text
            WHEN (rel.relkind = 'm'::"char") THEN 'materialized view'::text
            WHEN (rel.relkind = 'S'::"char") THEN 'sequence'::text
            WHEN (rel.relkind = 'f'::"char") THEN 'foreign table'::text
            ELSE NULL::text
        END AS objtype,
    rel.relnamespace AS objnamespace,
        CASE
            WHEN pg_table_is_visible(rel.oid) THEN quote_ident((rel.relname)::text)
            ELSE ((quote_ident((nsp.nspname)::text) || '.'::text) || quote_ident((rel.relname)::text))
        END AS objname,
    l.provider,
    l.label
   FROM ((pg_seclabel l
     JOIN pg_class rel ON (((l.classoid = rel.tableoid) AND (l.objoid = rel.oid))))
     JOIN pg_namespace nsp ON ((rel.relnamespace = nsp.oid)))
  WHERE (l.objsubid = 0)
UNION ALL
 SELECT l.objoid,
    l.classoid,
    l.objsubid,
    'column'::text AS objtype,
    rel.relnamespace AS objnamespace,
    ((
        CASE
            WHEN pg_table_is_visible(rel.oid) THEN quote_ident((rel.relname)::text)
            ELSE ((quote_ident((nsp.nspname)::text) || '.'::text) || quote_ident((rel.relname)::text))
        END || '.'::text) || (att.attname)::text) AS objname,
    l.provider,
    l.label
   FROM (((pg_seclabel l
     JOIN pg_class rel ON (((l.classoid = rel.tableoid) AND (l.objoid = rel.oid))))
     JOIN pg_attribute att ON (((rel.oid = att.attrelid) AND (l.objsubid = att.attnum))))
     JOIN pg_namespace nsp ON ((rel.relnamespace = nsp.oid)))
  WHERE (l.objsubid <> 0)
UNION ALL
 SELECT l.objoid,
    l.classoid,
    l.objsubid,
        CASE pro.prokind
            WHEN 'a'::"char" THEN 'aggregate'::text
            WHEN 'f'::"char" THEN 'function'::text
            WHEN 'p'::"char" THEN 'procedure'::text
            WHEN 'w'::"char" THEN 'window'::text
            ELSE NULL::text
        END AS objtype,
    pro.pronamespace AS objnamespace,
    (((
        CASE
            WHEN pg_function_is_visible(pro.oid) THEN quote_ident((pro.proname)::text)
            ELSE ((quote_ident((nsp.nspname)::text) || '.'::text) || quote_ident((pro.proname)::text))
        END || '('::text) || pg_get_function_arguments(pro.oid)) || ')'::text) AS objname,
    l.provider,
    l.label
   FROM ((pg_seclabel l
     JOIN pg_proc pro ON (((l.classoid = pro.tableoid) AND (l.objoid = pro.oid))))
     JOIN pg_namespace nsp ON ((pro.pronamespace = nsp.oid)))
  WHERE (l.objsubid = 0)
UNION ALL
 SELECT l.objoid,
    l.classoid,
    l.objsubid,
        CASE
            WHEN (typ.typtype = 'd'::"char") THEN 'domain'::text
            ELSE 'type'::text
        END AS objtype,
    typ.typnamespace AS objnamespace,
        CASE
            WHEN pg_type_is_visible(typ.oid) THEN quote_ident((typ.typname)::text)
            ELSE ((quote_ident((nsp.nspname)::text) || '.'::text) || quote_ident((typ.typname)::text))
        END AS objname,
    l.provider,
    l.label
   FROM ((pg_seclabel l
     JOIN pg_type typ ON (((l.classoid = typ.tableoid) AND (l.objoid = typ.oid))))
     JOIN pg_namespace nsp ON ((typ.typnamespace = nsp.oid)))
  WHERE (l.objsubid = 0)
UNION ALL
 SELECT l.objoid,
    l.classoid,
    l.objsubid,
    'large object'::text AS objtype,
    NULL::oid AS objnamespace,
    (l.objoid)::text AS objname,
    l.provider,
    l.label
   FROM (pg_seclabel l
     JOIN pg_largeobject_metadata lom ON ((l.objoid = lom.oid)))
  WHERE ((l.classoid = ('pg_largeobject'::regclass)::oid) AND (l.objsubid = 0))
UNION ALL
 SELECT l.objoid,
    l.classoid,
    l.objsubid,
    'language'::text AS objtype,
    NULL::oid AS objnamespace,
    quote_ident((lan.lanname)::text) AS objname,
    l.provider,
    l.label
   FROM (pg_seclabel l
     JOIN pg_language lan ON (((l.classoid = lan.tableoid) AND (l.objoid = lan.oid))))
  WHERE (l.objsubid = 0)
UNION ALL
 SELECT l.objoid,
    l.classoid,
    l.objsubid,
    'schema'::text AS objtype,
    nsp.oid AS objnamespace,
    quote_ident((nsp.nspname)::text) AS objname,
    l.provider,
    l.label
   FROM (pg_seclabel l
     JOIN pg_namespace nsp ON (((l.classoid = nsp.tableoid) AND (l.objoid = nsp.oid))))
  WHERE (l.objsubid = 0)
UNION ALL
 SELECT l.objoid,
    l.classoid,
    l.objsubid,
    'event trigger'::text AS objtype,
    NULL::oid AS objnamespace,
    quote_ident((evt.evtname)::text) AS objname,
    l.provider,
    l.label
   FROM (pg_seclabel l
     JOIN pg_event_trigger evt ON (((l.classoid = evt.tableoid) AND (l.objoid = evt.oid))))
  WHERE (l.objsubid = 0)
UNION ALL
 SELECT l.objoid,
    l.classoid,
    l.objsubid,
    'publication'::text AS objtype,
    NULL::oid AS objnamespace,
    quote_ident((p.pubname)::text) AS objname,
    l.provider,
    l.label
   FROM (pg_seclabel l
     JOIN pg_publication p ON (((l.classoid = p.tableoid) AND (l.objoid = p.oid))))
  WHERE (l.objsubid = 0)
UNION ALL
 SELECT l.objoid,
    l.classoid,
    0 AS objsubid,
    'subscription'::text AS objtype,
    NULL::oid AS objnamespace,
    quote_ident((s.subname)::text) AS objname,
    l.provider,
    l.label
   FROM (pg_shseclabel l
     JOIN pg_subscription s ON (((l.classoid = s.tableoid) AND (l.objoid = s.oid))))
UNION ALL
 SELECT l.objoid,
    l.classoid,
    0 AS objsubid,
    'database'::text AS objtype,
    NULL::oid AS objnamespace,
    quote_ident((dat.datname)::text) AS objname,
    l.provider,
    l.label
   FROM (pg_shseclabel l
     JOIN pg_database dat ON (((l.classoid = dat.tableoid) AND (l.objoid = dat.oid))))
UNION ALL
 SELECT l.objoid,
    l.classoid,
    0 AS objsubid,
    'tablespace'::text AS objtype,
    NULL::oid AS objnamespace,
    quote_ident((spc.spcname)::text) AS objname,
    l.provider,
    l.label
   FROM (pg_shseclabel l
     JOIN pg_tablespace spc ON (((l.classoid = spc.tableoid) AND (l.objoid = spc.oid))))
UNION ALL
 SELECT l.objoid,
    l.classoid,
    0 AS objsubid,
    'role'::text AS objtype,
    NULL::oid AS objnamespace,
    quote_ident((rol.rolname)::text) AS objname,
    l.provider,
    l.label
   FROM (pg_shseclabel l
     JOIN pg_authid rol ON (((l.classoid = rol.tableoid) AND (l.objoid = rol.oid))));


ALTER TABLE pgc_dump.pg_seclabels OWNER TO pgc_dump;

--
-- Name: pg_sequence; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_sequence (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	seqrelid oid NOT NULL,
    seqtypid oid NOT NULL,
    seqstart bigint NOT NULL,
    seqincrement bigint NOT NULL,
    seqmax bigint NOT NULL,
    seqmin bigint NOT NULL,
    seqcache bigint NOT NULL,
    seqcycle boolean NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_sequence REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_sequence OWNER TO pgc_dump;

--
-- Name: pg_sequences; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_sequences AS
 SELECT n.nspname AS schemaname,
    c.relname AS sequencename,
    pg_get_userbyid(c.relowner) AS sequenceowner,
    (s.seqtypid)::regtype AS data_type,
    s.seqstart AS start_value,
    s.seqmin AS min_value,
    s.seqmax AS max_value,
    s.seqincrement AS increment_by,
    s.seqcycle AS cycle,
    s.seqcache AS cache_size,
        CASE
            WHEN has_sequence_privilege(c.oid, 'SELECT,USAGE'::text) THEN pg_sequence_last_value((c.oid)::regclass)
            ELSE NULL::bigint
        END AS last_value
   FROM ((pg_sequence s
     JOIN pg_class c ON ((c.oid = s.seqrelid)))
     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
  WHERE ((NOT pg_is_other_temp_schema(n.oid)) AND (c.relkind = 'S'::"char"));


ALTER TABLE pgc_dump.pg_sequences OWNER TO pgc_dump;

--
-- Name: pg_settings; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_settings AS
 SELECT a.name,
    a.setting,
    a.unit,
    a.category,
    a.short_desc,
    a.extra_desc,
    a.context,
    a.vartype,
    a.source,
    a.min_val,
    a.max_val,
    a.enumvals,
    a.boot_val,
    a.reset_val,
    a.sourcefile,
    a.sourceline,
    a.pending_restart
   FROM pg_show_all_settings() a(name, setting, unit, category, short_desc, extra_desc, context, vartype, source, min_val, max_val, enumvals, boot_val, reset_val, sourcefile, sourceline, pending_restart);


ALTER TABLE pgc_dump.pg_settings OWNER TO pgc_dump;

--
-- Name: pg_shadow; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_shadow AS
 SELECT pg_authid.rolname AS usename,
    pg_authid.oid AS usesysid,
    pg_authid.rolcreatedb AS usecreatedb,
    pg_authid.rolsuper AS usesuper,
    pg_authid.rolreplication AS userepl,
    pg_authid.rolbypassrls AS usebypassrls,
    pg_authid.rolpassword AS passwd,
    (pg_authid.rolvaliduntil)::abstime AS valuntil,
    s.setconfig AS useconfig
   FROM (pg_authid
     LEFT JOIN pg_db_role_setting s ON (((pg_authid.oid = s.setrole) AND (s.setdatabase = (0)::oid))))
  WHERE pg_authid.rolcanlogin;


ALTER TABLE pgc_dump.pg_shadow OWNER TO pgc_dump;



--
-- Name: pg_shdepend; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE TABLE pgc_dump.pg_shdepend (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	dbid oid NOT NULL,
    classid oid NOT NULL,
    objid oid NOT NULL,
    objsubid integer NOT NULL,
    refclassid oid NOT NULL,
    refobjid oid NOT NULL,
    deptype "char" NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_shdepend REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_shdepend OWNER TO pgc_dump;

--
-- Name: pg_shdescription; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE TABLE pgc_dump.pg_shdescription (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	objoid oid NOT NULL,
    classoid oid NOT NULL,
    description text NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_shdescription REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_shdescription OWNER TO pgc_dump;

--
-- Name: pg_shseclabel; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE TABLE pgc_dump.pg_shseclabel (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	objoid oid NOT NULL,
    classoid oid NOT NULL,
    provider text NOT NULL,
    label text NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_shseclabel REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_shseclabel OWNER TO pgc_dump;

--
-- Name: pg_stat_activity; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_stat_activity AS
 SELECT s.datid,
    d.datname,
    s.pid,
    s.usesysid,
    u.rolname AS usename,
    s.application_name,
    s.client_addr,
    s.client_hostname,
    s.client_port,
    s.backend_start,
    s.xact_start,
    s.query_start,
    s.state_change,
    s.wait_event_type,
    s.wait_event,
    s.state,
    s.backend_xid,
    s.backend_xmin,
    s.query,
    s.backend_type
   FROM ((pg_stat_get_activity(NULL::integer) s(datid, pid, usesysid, application_name, state, query, wait_event_type, wait_event, xact_start, query_start, backend_start, state_change, client_addr, client_hostname, client_port, backend_xid, backend_xmin, backend_type, ssl, sslversion, sslcipher, sslbits, sslcompression, sslclientdn)
     LEFT JOIN pg_database d ON ((s.datid = d.oid)))
     LEFT JOIN pg_authid u ON ((s.usesysid = u.oid)));


ALTER TABLE pgc_dump.pg_stat_activity OWNER TO pgc_dump;

--
-- Name: pg_stat_all_indexes; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_stat_all_indexes AS
 SELECT c.oid AS relid,
    i.oid AS indexrelid,
    n.nspname AS schemaname,
    c.relname,
    i.relname AS indexrelname,
    pg_stat_get_numscans(i.oid) AS idx_scan,
    pg_stat_get_tuples_returned(i.oid) AS idx_tup_read,
    pg_stat_get_tuples_fetched(i.oid) AS idx_tup_fetch
   FROM (((pg_class c
     JOIN pg_index x ON ((c.oid = x.indrelid)))
     JOIN pg_class i ON ((i.oid = x.indexrelid)))
     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
  WHERE (c.relkind = ANY (ARRAY['r'::"char", 't'::"char", 'm'::"char"]));


ALTER TABLE pgc_dump.pg_stat_all_indexes OWNER TO pgc_dump;

--
-- Name: pg_stat_all_tables; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_stat_all_tables AS
 SELECT c.oid AS relid,
    n.nspname AS schemaname,
    c.relname,
    pg_stat_get_numscans(c.oid) AS seq_scan,
    pg_stat_get_tuples_returned(c.oid) AS seq_tup_read,
    (sum(pg_stat_get_numscans(i.indexrelid)))::bigint AS idx_scan,
    ((sum(pg_stat_get_tuples_fetched(i.indexrelid)))::bigint + pg_stat_get_tuples_fetched(c.oid)) AS idx_tup_fetch,
    pg_stat_get_tuples_inserted(c.oid) AS n_tup_ins,
    pg_stat_get_tuples_updated(c.oid) AS n_tup_upd,
    pg_stat_get_tuples_deleted(c.oid) AS n_tup_del,
    pg_stat_get_tuples_hot_updated(c.oid) AS n_tup_hot_upd,
    pg_stat_get_live_tuples(c.oid) AS n_live_tup,
    pg_stat_get_dead_tuples(c.oid) AS n_dead_tup,
    pg_stat_get_mod_since_analyze(c.oid) AS n_mod_since_analyze,
    pg_stat_get_last_vacuum_time(c.oid) AS last_vacuum,
    pg_stat_get_last_autovacuum_time(c.oid) AS last_autovacuum,
    pg_stat_get_last_analyze_time(c.oid) AS last_analyze,
    pg_stat_get_last_autoanalyze_time(c.oid) AS last_autoanalyze,
    pg_stat_get_vacuum_count(c.oid) AS vacuum_count,
    pg_stat_get_autovacuum_count(c.oid) AS autovacuum_count,
    pg_stat_get_analyze_count(c.oid) AS analyze_count,
    pg_stat_get_autoanalyze_count(c.oid) AS autoanalyze_count
   FROM ((pg_class c
     LEFT JOIN pg_index i ON ((c.oid = i.indrelid)))
     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
  WHERE (c.relkind = ANY (ARRAY['r'::"char", 't'::"char", 'm'::"char"]))
  GROUP BY c.oid, n.nspname, c.relname;


ALTER TABLE pgc_dump.pg_stat_all_tables OWNER TO pgc_dump;

--
-- Name: pg_stat_archiver; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_stat_archiver AS
 SELECT s.archived_count,
    s.last_archived_wal,
    s.last_archived_time,
    s.failed_count,
    s.last_failed_wal,
    s.last_failed_time,
    s.stats_reset
   FROM pg_stat_get_archiver() s(archived_count, last_archived_wal, last_archived_time, failed_count, last_failed_wal, last_failed_time, stats_reset);


ALTER TABLE pgc_dump.pg_stat_archiver OWNER TO pgc_dump;

--
-- Name: pg_stat_bgwriter; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_stat_bgwriter AS
 SELECT pg_stat_get_bgwriter_timed_checkpoints() AS checkpoints_timed,
    pg_stat_get_bgwriter_requested_checkpoints() AS checkpoints_req,
    pg_stat_get_checkpoint_write_time() AS checkpoint_write_time,
    pg_stat_get_checkpoint_sync_time() AS checkpoint_sync_time,
    pg_stat_get_bgwriter_buf_written_checkpoints() AS buffers_checkpoint,
    pg_stat_get_bgwriter_buf_written_clean() AS buffers_clean,
    pg_stat_get_bgwriter_maxwritten_clean() AS maxwritten_clean,
    pg_stat_get_buf_written_backend() AS buffers_backend,
    pg_stat_get_buf_fsync_backend() AS buffers_backend_fsync,
    pg_stat_get_buf_alloc() AS buffers_alloc,
    pg_stat_get_bgwriter_stat_reset_time() AS stats_reset;


ALTER TABLE pgc_dump.pg_stat_bgwriter OWNER TO pgc_dump;

--
-- Name: pg_stat_database; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_stat_database AS
 SELECT d.oid AS datid,
    d.datname,
    pg_stat_get_db_numbackends(d.oid) AS numbackends,
    pg_stat_get_db_xact_commit(d.oid) AS xact_commit,
    pg_stat_get_db_xact_rollback(d.oid) AS xact_rollback,
    (pg_stat_get_db_blocks_fetched(d.oid) - pg_stat_get_db_blocks_hit(d.oid)) AS blks_read,
    pg_stat_get_db_blocks_hit(d.oid) AS blks_hit,
    pg_stat_get_db_tuples_returned(d.oid) AS tup_returned,
    pg_stat_get_db_tuples_fetched(d.oid) AS tup_fetched,
    pg_stat_get_db_tuples_inserted(d.oid) AS tup_inserted,
    pg_stat_get_db_tuples_updated(d.oid) AS tup_updated,
    pg_stat_get_db_tuples_deleted(d.oid) AS tup_deleted,
    pg_stat_get_db_conflict_all(d.oid) AS conflicts,
    pg_stat_get_db_temp_files(d.oid) AS temp_files,
    pg_stat_get_db_temp_bytes(d.oid) AS temp_bytes,
    pg_stat_get_db_deadlocks(d.oid) AS deadlocks,
    pg_stat_get_db_blk_read_time(d.oid) AS blk_read_time,
    pg_stat_get_db_blk_write_time(d.oid) AS blk_write_time,
    pg_stat_get_db_stat_reset_time(d.oid) AS stats_reset
   FROM pg_database d;


ALTER TABLE pgc_dump.pg_stat_database OWNER TO pgc_dump;

--
-- Name: pg_stat_database_conflicts; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_stat_database_conflicts AS
 SELECT d.oid AS datid,
    d.datname,
    pg_stat_get_db_conflict_tablespace(d.oid) AS confl_tablespace,
    pg_stat_get_db_conflict_lock(d.oid) AS confl_lock,
    pg_stat_get_db_conflict_snapshot(d.oid) AS confl_snapshot,
    pg_stat_get_db_conflict_bufferpin(d.oid) AS confl_bufferpin,
    pg_stat_get_db_conflict_startup_deadlock(d.oid) AS confl_deadlock
   FROM pg_database d;


ALTER TABLE pgc_dump.pg_stat_database_conflicts OWNER TO pgc_dump;

--
-- Name: pg_stat_progress_vacuum; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_stat_progress_vacuum AS
 SELECT s.pid,
    s.datid,
    d.datname,
    s.relid,
        CASE s.param1
            WHEN 0 THEN 'initializing'::text
            WHEN 1 THEN 'scanning heap'::text
            WHEN 2 THEN 'vacuuming indexes'::text
            WHEN 3 THEN 'vacuuming heap'::text
            WHEN 4 THEN 'cleaning up indexes'::text
            WHEN 5 THEN 'truncating heap'::text
            WHEN 6 THEN 'performing final cleanup'::text
            ELSE NULL::text
        END AS phase,
    s.param2 AS heap_blks_total,
    s.param3 AS heap_blks_scanned,
    s.param4 AS heap_blks_vacuumed,
    s.param5 AS index_vacuum_count,
    s.param6 AS max_dead_tuples,
    s.param7 AS num_dead_tuples
   FROM (pg_stat_get_progress_info('VACUUM'::text) s(pid, datid, relid, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10)
     LEFT JOIN pg_database d ON ((s.datid = d.oid)));


ALTER TABLE pgc_dump.pg_stat_progress_vacuum OWNER TO pgc_dump;

--
-- Name: pg_stat_replication; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_stat_replication AS
 SELECT s.pid,
    s.usesysid,
    u.rolname AS usename,
    s.application_name,
    s.client_addr,
    s.client_hostname,
    s.client_port,
    s.backend_start,
    s.backend_xmin,
    w.state,
    w.sent_lsn,
    w.write_lsn,
    w.flush_lsn,
    w.replay_lsn,
    w.write_lag,
    w.flush_lag,
    w.replay_lag,
    w.sync_priority,
    w.sync_state
   FROM ((pg_stat_get_activity(NULL::integer) s(datid, pid, usesysid, application_name, state, query, wait_event_type, wait_event, xact_start, query_start, backend_start, state_change, client_addr, client_hostname, client_port, backend_xid, backend_xmin, backend_type, ssl, sslversion, sslcipher, sslbits, sslcompression, sslclientdn)
     JOIN pg_stat_get_wal_senders() w(pid, state, sent_lsn, write_lsn, flush_lsn, replay_lsn, write_lag, flush_lag, replay_lag, sync_priority, sync_state) ON ((s.pid = w.pid)))
     LEFT JOIN pg_authid u ON ((s.usesysid = u.oid)));


ALTER TABLE pgc_dump.pg_stat_replication OWNER TO pgc_dump;

--
-- Name: pg_stat_ssl; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_stat_ssl AS
 SELECT s.pid,
    s.ssl,
    s.sslversion AS version,
    s.sslcipher AS cipher,
    s.sslbits AS bits,
    s.sslcompression AS compression,
    s.sslclientdn AS clientdn
   FROM pg_stat_get_activity(NULL::integer) s(datid, pid, usesysid, application_name, state, query, wait_event_type, wait_event, xact_start, query_start, backend_start, state_change, client_addr, client_hostname, client_port, backend_xid, backend_xmin, backend_type, ssl, sslversion, sslcipher, sslbits, sslcompression, sslclientdn);


ALTER TABLE pgc_dump.pg_stat_ssl OWNER TO pgc_dump;

--
-- Name: pg_stat_subscription; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_stat_subscription AS
 SELECT su.oid AS subid,
    su.subname,
    st.pid,
    st.relid,
    st.received_lsn,
    st.last_msg_send_time,
    st.last_msg_receipt_time,
    st.latest_end_lsn,
    st.latest_end_time
   FROM (pg_subscription su
     LEFT JOIN pg_stat_get_subscription(NULL::oid) st(subid, relid, pid, received_lsn, last_msg_send_time, last_msg_receipt_time, latest_end_lsn, latest_end_time) ON ((st.subid = su.oid)));


ALTER TABLE pgc_dump.pg_stat_subscription OWNER TO pgc_dump;

--
-- Name: pg_stat_sys_indexes; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_stat_sys_indexes AS
 SELECT pg_stat_all_indexes.relid,
    pg_stat_all_indexes.indexrelid,
    pg_stat_all_indexes.schemaname,
    pg_stat_all_indexes.relname,
    pg_stat_all_indexes.indexrelname,
    pg_stat_all_indexes.idx_scan,
    pg_stat_all_indexes.idx_tup_read,
    pg_stat_all_indexes.idx_tup_fetch
   FROM pg_stat_all_indexes
  WHERE ((pg_stat_all_indexes.schemaname = ANY (ARRAY['pgc_dump'::name, 'information_schema'::name])) OR (pg_stat_all_indexes.schemaname ~ '^pg_toast'::text));


ALTER TABLE pgc_dump.pg_stat_sys_indexes OWNER TO pgc_dump;

--
-- Name: pg_stat_sys_tables; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_stat_sys_tables AS
 SELECT pg_stat_all_tables.relid,
    pg_stat_all_tables.schemaname,
    pg_stat_all_tables.relname,
    pg_stat_all_tables.seq_scan,
    pg_stat_all_tables.seq_tup_read,
    pg_stat_all_tables.idx_scan,
    pg_stat_all_tables.idx_tup_fetch,
    pg_stat_all_tables.n_tup_ins,
    pg_stat_all_tables.n_tup_upd,
    pg_stat_all_tables.n_tup_del,
    pg_stat_all_tables.n_tup_hot_upd,
    pg_stat_all_tables.n_live_tup,
    pg_stat_all_tables.n_dead_tup,
    pg_stat_all_tables.n_mod_since_analyze,
    pg_stat_all_tables.last_vacuum,
    pg_stat_all_tables.last_autovacuum,
    pg_stat_all_tables.last_analyze,
    pg_stat_all_tables.last_autoanalyze,
    pg_stat_all_tables.vacuum_count,
    pg_stat_all_tables.autovacuum_count,
    pg_stat_all_tables.analyze_count,
    pg_stat_all_tables.autoanalyze_count
   FROM pg_stat_all_tables
  WHERE ((pg_stat_all_tables.schemaname = ANY (ARRAY['pgc_dump'::name, 'information_schema'::name])) OR (pg_stat_all_tables.schemaname ~ '^pg_toast'::text));


ALTER TABLE pgc_dump.pg_stat_sys_tables OWNER TO pgc_dump;

--
-- Name: pg_stat_user_functions; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_stat_user_functions AS
 SELECT p.oid AS funcid,
    n.nspname AS schemaname,
    p.proname AS funcname,
    pg_stat_get_function_calls(p.oid) AS calls,
    pg_stat_get_function_total_time(p.oid) AS total_time,
    pg_stat_get_function_self_time(p.oid) AS self_time
   FROM (pg_proc p
     LEFT JOIN pg_namespace n ON ((n.oid = p.pronamespace)))
  WHERE ((p.prolang <> (12)::oid) AND (pg_stat_get_function_calls(p.oid) IS NOT NULL));


ALTER TABLE pgc_dump.pg_stat_user_functions OWNER TO pgc_dump;

--
-- Name: pg_stat_user_indexes; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_stat_user_indexes AS
 SELECT pg_stat_all_indexes.relid,
    pg_stat_all_indexes.indexrelid,
    pg_stat_all_indexes.schemaname,
    pg_stat_all_indexes.relname,
    pg_stat_all_indexes.indexrelname,
    pg_stat_all_indexes.idx_scan,
    pg_stat_all_indexes.idx_tup_read,
    pg_stat_all_indexes.idx_tup_fetch
   FROM pg_stat_all_indexes
  WHERE ((pg_stat_all_indexes.schemaname <> ALL (ARRAY['pgc_dump'::name, 'information_schema'::name])) AND (pg_stat_all_indexes.schemaname !~ '^pg_toast'::text));


ALTER TABLE pgc_dump.pg_stat_user_indexes OWNER TO pgc_dump;

--
-- Name: pg_stat_user_tables; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_stat_user_tables AS
 SELECT pg_stat_all_tables.relid,
    pg_stat_all_tables.schemaname,
    pg_stat_all_tables.relname,
    pg_stat_all_tables.seq_scan,
    pg_stat_all_tables.seq_tup_read,
    pg_stat_all_tables.idx_scan,
    pg_stat_all_tables.idx_tup_fetch,
    pg_stat_all_tables.n_tup_ins,
    pg_stat_all_tables.n_tup_upd,
    pg_stat_all_tables.n_tup_del,
    pg_stat_all_tables.n_tup_hot_upd,
    pg_stat_all_tables.n_live_tup,
    pg_stat_all_tables.n_dead_tup,
    pg_stat_all_tables.n_mod_since_analyze,
    pg_stat_all_tables.last_vacuum,
    pg_stat_all_tables.last_autovacuum,
    pg_stat_all_tables.last_analyze,
    pg_stat_all_tables.last_autoanalyze,
    pg_stat_all_tables.vacuum_count,
    pg_stat_all_tables.autovacuum_count,
    pg_stat_all_tables.analyze_count,
    pg_stat_all_tables.autoanalyze_count
   FROM pg_stat_all_tables
  WHERE ((pg_stat_all_tables.schemaname <> ALL (ARRAY['pgc_dump'::name, 'information_schema'::name])) AND (pg_stat_all_tables.schemaname !~ '^pg_toast'::text));


ALTER TABLE pgc_dump.pg_stat_user_tables OWNER TO pgc_dump;

--
-- Name: pg_stat_wal_receiver; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_stat_wal_receiver AS
 SELECT s.pid,
    s.status,
    s.receive_start_lsn,
    s.receive_start_tli,
    s.received_lsn,
    s.received_tli,
    s.last_msg_send_time,
    s.last_msg_receipt_time,
    s.latest_end_lsn,
    s.latest_end_time,
    s.slot_name,
    s.sender_host,
    s.sender_port,
    s.conninfo
   FROM pg_stat_get_wal_receiver() s(pid, status, receive_start_lsn, receive_start_tli, received_lsn, received_tli, last_msg_send_time, last_msg_receipt_time, latest_end_lsn, latest_end_time, slot_name, sender_host, sender_port, conninfo)
  WHERE (s.pid IS NOT NULL);


ALTER TABLE pgc_dump.pg_stat_wal_receiver OWNER TO pgc_dump;

--
-- Name: pg_stat_xact_all_tables; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_stat_xact_all_tables AS
 SELECT c.oid AS relid,
    n.nspname AS schemaname,
    c.relname,
    pg_stat_get_xact_numscans(c.oid) AS seq_scan,
    pg_stat_get_xact_tuples_returned(c.oid) AS seq_tup_read,
    (sum(pg_stat_get_xact_numscans(i.indexrelid)))::bigint AS idx_scan,
    ((sum(pg_stat_get_xact_tuples_fetched(i.indexrelid)))::bigint + pg_stat_get_xact_tuples_fetched(c.oid)) AS idx_tup_fetch,
    pg_stat_get_xact_tuples_inserted(c.oid) AS n_tup_ins,
    pg_stat_get_xact_tuples_updated(c.oid) AS n_tup_upd,
    pg_stat_get_xact_tuples_deleted(c.oid) AS n_tup_del,
    pg_stat_get_xact_tuples_hot_updated(c.oid) AS n_tup_hot_upd
   FROM ((pg_class c
     LEFT JOIN pg_index i ON ((c.oid = i.indrelid)))
     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
  WHERE (c.relkind = ANY (ARRAY['r'::"char", 't'::"char", 'm'::"char"]))
  GROUP BY c.oid, n.nspname, c.relname;


ALTER TABLE pgc_dump.pg_stat_xact_all_tables OWNER TO pgc_dump;

--
-- Name: pg_stat_xact_sys_tables; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_stat_xact_sys_tables AS
 SELECT pg_stat_xact_all_tables.relid,
    pg_stat_xact_all_tables.schemaname,
    pg_stat_xact_all_tables.relname,
    pg_stat_xact_all_tables.seq_scan,
    pg_stat_xact_all_tables.seq_tup_read,
    pg_stat_xact_all_tables.idx_scan,
    pg_stat_xact_all_tables.idx_tup_fetch,
    pg_stat_xact_all_tables.n_tup_ins,
    pg_stat_xact_all_tables.n_tup_upd,
    pg_stat_xact_all_tables.n_tup_del,
    pg_stat_xact_all_tables.n_tup_hot_upd
   FROM pg_stat_xact_all_tables
  WHERE ((pg_stat_xact_all_tables.schemaname = ANY (ARRAY['pgc_dump'::name, 'information_schema'::name])) OR (pg_stat_xact_all_tables.schemaname ~ '^pg_toast'::text));


ALTER TABLE pgc_dump.pg_stat_xact_sys_tables OWNER TO pgc_dump;

--
-- Name: pg_stat_xact_user_functions; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_stat_xact_user_functions AS
 SELECT p.oid AS funcid,
    n.nspname AS schemaname,
    p.proname AS funcname,
    pg_stat_get_xact_function_calls(p.oid) AS calls,
    pg_stat_get_xact_function_total_time(p.oid) AS total_time,
    pg_stat_get_xact_function_self_time(p.oid) AS self_time
   FROM (pg_proc p
     LEFT JOIN pg_namespace n ON ((n.oid = p.pronamespace)))
  WHERE ((p.prolang <> (12)::oid) AND (pg_stat_get_xact_function_calls(p.oid) IS NOT NULL));


ALTER TABLE pgc_dump.pg_stat_xact_user_functions OWNER TO pgc_dump;

--
-- Name: pg_stat_xact_user_tables; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_stat_xact_user_tables AS
 SELECT pg_stat_xact_all_tables.relid,
    pg_stat_xact_all_tables.schemaname,
    pg_stat_xact_all_tables.relname,
    pg_stat_xact_all_tables.seq_scan,
    pg_stat_xact_all_tables.seq_tup_read,
    pg_stat_xact_all_tables.idx_scan,
    pg_stat_xact_all_tables.idx_tup_fetch,
    pg_stat_xact_all_tables.n_tup_ins,
    pg_stat_xact_all_tables.n_tup_upd,
    pg_stat_xact_all_tables.n_tup_del,
    pg_stat_xact_all_tables.n_tup_hot_upd
   FROM pg_stat_xact_all_tables
  WHERE ((pg_stat_xact_all_tables.schemaname <> ALL (ARRAY['pgc_dump'::name, 'information_schema'::name])) AND (pg_stat_xact_all_tables.schemaname !~ '^pg_toast'::text));


ALTER TABLE pgc_dump.pg_stat_xact_user_tables OWNER TO pgc_dump;

--
-- Name: pg_statio_all_indexes; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_statio_all_indexes AS
 SELECT c.oid AS relid,
    i.oid AS indexrelid,
    n.nspname AS schemaname,
    c.relname,
    i.relname AS indexrelname,
    (pg_stat_get_blocks_fetched(i.oid) - pg_stat_get_blocks_hit(i.oid)) AS idx_blks_read,
    pg_stat_get_blocks_hit(i.oid) AS idx_blks_hit
   FROM (((pg_class c
     JOIN pg_index x ON ((c.oid = x.indrelid)))
     JOIN pg_class i ON ((i.oid = x.indexrelid)))
     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
  WHERE (c.relkind = ANY (ARRAY['r'::"char", 't'::"char", 'm'::"char"]));


ALTER TABLE pgc_dump.pg_statio_all_indexes OWNER TO pgc_dump;

--
-- Name: pg_statio_all_sequences; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_statio_all_sequences AS
 SELECT c.oid AS relid,
    n.nspname AS schemaname,
    c.relname,
    (pg_stat_get_blocks_fetched(c.oid) - pg_stat_get_blocks_hit(c.oid)) AS blks_read,
    pg_stat_get_blocks_hit(c.oid) AS blks_hit
   FROM (pg_class c
     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
  WHERE (c.relkind = 'S'::"char");


ALTER TABLE pgc_dump.pg_statio_all_sequences OWNER TO pgc_dump;

--
-- Name: pg_statio_all_tables; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_statio_all_tables AS
 SELECT c.oid AS relid,
    n.nspname AS schemaname,
    c.relname,
    (pg_stat_get_blocks_fetched(c.oid) - pg_stat_get_blocks_hit(c.oid)) AS heap_blks_read,
    pg_stat_get_blocks_hit(c.oid) AS heap_blks_hit,
    (sum((pg_stat_get_blocks_fetched(i.indexrelid) - pg_stat_get_blocks_hit(i.indexrelid))))::bigint AS idx_blks_read,
    (sum(pg_stat_get_blocks_hit(i.indexrelid)))::bigint AS idx_blks_hit,
    (pg_stat_get_blocks_fetched(t.oid) - pg_stat_get_blocks_hit(t.oid)) AS toast_blks_read,
    pg_stat_get_blocks_hit(t.oid) AS toast_blks_hit,
    (sum((pg_stat_get_blocks_fetched(x.indexrelid) - pg_stat_get_blocks_hit(x.indexrelid))))::bigint AS tidx_blks_read,
    (sum(pg_stat_get_blocks_hit(x.indexrelid)))::bigint AS tidx_blks_hit
   FROM ((((pg_class c
     LEFT JOIN pg_index i ON ((c.oid = i.indrelid)))
     LEFT JOIN pg_class t ON ((c.reltoastrelid = t.oid)))
     LEFT JOIN pg_index x ON ((t.oid = x.indrelid)))
     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
  WHERE (c.relkind = ANY (ARRAY['r'::"char", 't'::"char", 'm'::"char"]))
  GROUP BY c.oid, n.nspname, c.relname, t.oid, x.indrelid;


ALTER TABLE pgc_dump.pg_statio_all_tables OWNER TO pgc_dump;

--
-- Name: pg_statio_sys_indexes; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_statio_sys_indexes AS
 SELECT pg_statio_all_indexes.relid,
    pg_statio_all_indexes.indexrelid,
    pg_statio_all_indexes.schemaname,
    pg_statio_all_indexes.relname,
    pg_statio_all_indexes.indexrelname,
    pg_statio_all_indexes.idx_blks_read,
    pg_statio_all_indexes.idx_blks_hit
   FROM pg_statio_all_indexes
  WHERE ((pg_statio_all_indexes.schemaname = ANY (ARRAY['pgc_dump'::name, 'information_schema'::name])) OR (pg_statio_all_indexes.schemaname ~ '^pg_toast'::text));


ALTER TABLE pgc_dump.pg_statio_sys_indexes OWNER TO pgc_dump;

--
-- Name: pg_statio_sys_sequences; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_statio_sys_sequences AS
 SELECT pg_statio_all_sequences.relid,
    pg_statio_all_sequences.schemaname,
    pg_statio_all_sequences.relname,
    pg_statio_all_sequences.blks_read,
    pg_statio_all_sequences.blks_hit
   FROM pg_statio_all_sequences
  WHERE ((pg_statio_all_sequences.schemaname = ANY (ARRAY['pgc_dump'::name, 'information_schema'::name])) OR (pg_statio_all_sequences.schemaname ~ '^pg_toast'::text));


ALTER TABLE pgc_dump.pg_statio_sys_sequences OWNER TO pgc_dump;

--
-- Name: pg_statio_sys_tables; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_statio_sys_tables AS
 SELECT pg_statio_all_tables.relid,
    pg_statio_all_tables.schemaname,
    pg_statio_all_tables.relname,
    pg_statio_all_tables.heap_blks_read,
    pg_statio_all_tables.heap_blks_hit,
    pg_statio_all_tables.idx_blks_read,
    pg_statio_all_tables.idx_blks_hit,
    pg_statio_all_tables.toast_blks_read,
    pg_statio_all_tables.toast_blks_hit,
    pg_statio_all_tables.tidx_blks_read,
    pg_statio_all_tables.tidx_blks_hit
   FROM pg_statio_all_tables
  WHERE ((pg_statio_all_tables.schemaname = ANY (ARRAY['pgc_dump'::name, 'information_schema'::name])) OR (pg_statio_all_tables.schemaname ~ '^pg_toast'::text));


ALTER TABLE pgc_dump.pg_statio_sys_tables OWNER TO pgc_dump;

--
-- Name: pg_statio_user_indexes; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_statio_user_indexes AS
 SELECT pg_statio_all_indexes.relid,
    pg_statio_all_indexes.indexrelid,
    pg_statio_all_indexes.schemaname,
    pg_statio_all_indexes.relname,
    pg_statio_all_indexes.indexrelname,
    pg_statio_all_indexes.idx_blks_read,
    pg_statio_all_indexes.idx_blks_hit
   FROM pg_statio_all_indexes
  WHERE ((pg_statio_all_indexes.schemaname <> ALL (ARRAY['pgc_dump'::name, 'information_schema'::name])) AND (pg_statio_all_indexes.schemaname !~ '^pg_toast'::text));


ALTER TABLE pgc_dump.pg_statio_user_indexes OWNER TO pgc_dump;

--
-- Name: pg_statio_user_sequences; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_statio_user_sequences AS
 SELECT pg_statio_all_sequences.relid,
    pg_statio_all_sequences.schemaname,
    pg_statio_all_sequences.relname,
    pg_statio_all_sequences.blks_read,
    pg_statio_all_sequences.blks_hit
   FROM pg_statio_all_sequences
  WHERE ((pg_statio_all_sequences.schemaname <> ALL (ARRAY['pgc_dump'::name, 'information_schema'::name])) AND (pg_statio_all_sequences.schemaname !~ '^pg_toast'::text));


ALTER TABLE pgc_dump.pg_statio_user_sequences OWNER TO pgc_dump;

--
-- Name: pg_statio_user_tables; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_statio_user_tables AS
 SELECT pg_statio_all_tables.relid,
    pg_statio_all_tables.schemaname,
    pg_statio_all_tables.relname,
    pg_statio_all_tables.heap_blks_read,
    pg_statio_all_tables.heap_blks_hit,
    pg_statio_all_tables.idx_blks_read,
    pg_statio_all_tables.idx_blks_hit,
    pg_statio_all_tables.toast_blks_read,
    pg_statio_all_tables.toast_blks_hit,
    pg_statio_all_tables.tidx_blks_read,
    pg_statio_all_tables.tidx_blks_hit
   FROM pg_statio_all_tables
  WHERE ((pg_statio_all_tables.schemaname <> ALL (ARRAY['pgc_dump'::name, 'information_schema'::name])) AND (pg_statio_all_tables.schemaname !~ '^pg_toast'::text));


ALTER TABLE pgc_dump.pg_statio_user_tables OWNER TO pgc_dump;

SET default_tablespace = '';

--
-- Name: pg_statistic; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_statistic (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	starelid oid NOT NULL,
    staattnum smallint NOT NULL,
    stainherit boolean NOT NULL,
    stanullfrac real NOT NULL,
    stawidth integer NOT NULL,
    stadistinct real NOT NULL,
    stakind1 smallint NOT NULL,
    stakind2 smallint NOT NULL,
    stakind3 smallint NOT NULL,
    stakind4 smallint NOT NULL,
    stakind5 smallint NOT NULL,
    staop1 oid NOT NULL,
    staop2 oid NOT NULL,
    staop3 oid NOT NULL,
    staop4 oid NOT NULL,
    staop5 oid NOT NULL,
    stanumbers1 real[],
    stanumbers2 real[],
    stanumbers3 real[],
    stanumbers4 real[],
    stanumbers5 real[],
    stavalues1 text[],
    stavalues2 text[],
    stavalues3 text[],
    stavalues4 text[],
    stavalues5 text[]
);

ALTER TABLE ONLY pgc_dump.pg_statistic REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_statistic OWNER TO pgc_dump;



--
-- Name: pg_statistic_ext; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_statistic_ext (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	stxrelid oid NOT NULL,
    stxname name NOT NULL,
    stxnamespace oid NOT NULL,
    stxowner oid NOT NULL,
    stxkeys int2vector NOT NULL,
    stxkind "char"[] NOT NULL,
    stxndistinct pg_ndistinct,
    stxdependencies pg_dependencies
);

ALTER TABLE ONLY pgc_dump.pg_statistic_ext REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_statistic_ext OWNER TO pgc_dump;

--
-- Name: pg_stats; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_stats WITH (security_barrier='true') AS
 SELECT n.nspname AS schemaname,
    c.relname AS tablename,
    a.attname,
    s.stainherit AS inherited,
    s.stanullfrac AS null_frac,
    s.stawidth AS avg_width,
    s.stadistinct AS n_distinct,
        CASE
            WHEN (s.stakind1 = 1) THEN s.stavalues1
            WHEN (s.stakind2 = 1) THEN s.stavalues2
            WHEN (s.stakind3 = 1) THEN s.stavalues3
            WHEN (s.stakind4 = 1) THEN s.stavalues4
            WHEN (s.stakind5 = 1) THEN s.stavalues5
            ELSE NULL::text[]
        END AS most_common_vals,
        CASE
            WHEN (s.stakind1 = 1) THEN s.stanumbers1
            WHEN (s.stakind2 = 1) THEN s.stanumbers2
            WHEN (s.stakind3 = 1) THEN s.stanumbers3
            WHEN (s.stakind4 = 1) THEN s.stanumbers4
            WHEN (s.stakind5 = 1) THEN s.stanumbers5
            ELSE NULL::real[]
        END AS most_common_freqs,
        CASE
            WHEN (s.stakind1 = 2) THEN s.stavalues1
            WHEN (s.stakind2 = 2) THEN s.stavalues2
            WHEN (s.stakind3 = 2) THEN s.stavalues3
            WHEN (s.stakind4 = 2) THEN s.stavalues4
            WHEN (s.stakind5 = 2) THEN s.stavalues5
            ELSE NULL::text[]
        END AS histogram_bounds,
        CASE
            WHEN (s.stakind1 = 3) THEN s.stanumbers1[1]
            WHEN (s.stakind2 = 3) THEN s.stanumbers2[1]
            WHEN (s.stakind3 = 3) THEN s.stanumbers3[1]
            WHEN (s.stakind4 = 3) THEN s.stanumbers4[1]
            WHEN (s.stakind5 = 3) THEN s.stanumbers5[1]
            ELSE NULL::real
        END AS correlation,
        CASE
            WHEN (s.stakind1 = 4) THEN s.stavalues1
            WHEN (s.stakind2 = 4) THEN s.stavalues2
            WHEN (s.stakind3 = 4) THEN s.stavalues3
            WHEN (s.stakind4 = 4) THEN s.stavalues4
            WHEN (s.stakind5 = 4) THEN s.stavalues5
            ELSE NULL::text[]
        END AS most_common_elems,
        CASE
            WHEN (s.stakind1 = 4) THEN s.stanumbers1
            WHEN (s.stakind2 = 4) THEN s.stanumbers2
            WHEN (s.stakind3 = 4) THEN s.stanumbers3
            WHEN (s.stakind4 = 4) THEN s.stanumbers4
            WHEN (s.stakind5 = 4) THEN s.stanumbers5
            ELSE NULL::real[]
        END AS most_common_elem_freqs,
        CASE
            WHEN (s.stakind1 = 5) THEN s.stanumbers1
            WHEN (s.stakind2 = 5) THEN s.stanumbers2
            WHEN (s.stakind3 = 5) THEN s.stanumbers3
            WHEN (s.stakind4 = 5) THEN s.stanumbers4
            WHEN (s.stakind5 = 5) THEN s.stanumbers5
            ELSE NULL::real[]
        END AS elem_count_histogram
   FROM (((pgc_dump.pg_statistic s
     JOIN pgc_dump.pg_class c ON ((c.oid = s.starelid)))
     JOIN pgc_dump.pg_attribute a ON (((c.oid = a.attrelid) AND (a.attnum = s.staattnum))))
     LEFT JOIN pgc_dump.pg_namespace n ON ((n.oid = c.relnamespace)))
  WHERE ((NOT a.attisdropped) AND has_column_privilege(c.oid, a.attnum, 'select'::text) AND ((c.relrowsecurity = false) OR (NOT row_security_active(c.oid))));


ALTER TABLE pgc_dump.pg_stats OWNER TO pgc_dump;



--
-- Name: pg_subscription; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE TABLE pgc_dump.pg_subscription (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	subdbid oid NOT NULL,
    subname name NOT NULL,
    subowner oid NOT NULL,
    subenabled boolean NOT NULL,
    subconninfo text NOT NULL,
    subslotname name NOT NULL,
    subsynccommit text NOT NULL,
    subpublications text[] NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_subscription REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_subscription OWNER TO pgc_dump;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: pg_subscription_rel; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_subscription_rel (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	srsubid oid NOT NULL,
    srrelid oid NOT NULL,
    srsubstate "char" NOT NULL,
    srsublsn pg_lsn NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_subscription_rel REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_subscription_rel OWNER TO pgc_dump;

--
-- Name: pg_tables; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_tables AS
 SELECT n.nspname AS schemaname,
    c.relname AS tablename,
    pg_get_userbyid(c.relowner) AS tableowner,
    t.spcname AS tablespace,
    c.relhasindex AS hasindexes,
    c.relhasrules AS hasrules,
    c.relhastriggers AS hastriggers,
    c.relrowsecurity AS rowsecurity
   FROM ((pg_class c
     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
     LEFT JOIN pg_tablespace t ON ((t.oid = c.reltablespace)))
  WHERE (c.relkind = ANY (ARRAY['r'::"char", 'p'::"char"]));


ALTER TABLE pgc_dump.pg_tables OWNER TO pgc_dump;





--
-- Name: pg_tablespace; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE TABLE pgc_dump.pg_tablespace (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	spcname name NOT NULL,
    spcowner oid NOT NULL,
    spcacl aclitem[],
    spcoptions text[]
);

ALTER TABLE ONLY pgc_dump.pg_tablespace REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_tablespace OWNER TO pgc_dump;

--
-- Name: pg_timezone_abbrevs; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_timezone_abbrevs AS
 SELECT pg_timezone_abbrevs.abbrev,
    pg_timezone_abbrevs.utc_offset,
    pg_timezone_abbrevs.is_dst
   FROM pg_timezone_abbrevs() pg_timezone_abbrevs(abbrev, utc_offset, is_dst);


ALTER TABLE pgc_dump.pg_timezone_abbrevs OWNER TO pgc_dump;

--
-- Name: pg_timezone_names; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_timezone_names AS
 SELECT pg_timezone_names.name,
    pg_timezone_names.abbrev,
    pg_timezone_names.utc_offset,
    pg_timezone_names.is_dst
   FROM pg_timezone_names() pg_timezone_names(name, abbrev, utc_offset, is_dst);


ALTER TABLE pgc_dump.pg_timezone_names OWNER TO pgc_dump;

SET default_tablespace = '';

--
-- Name: pg_transform; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_transform (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	trftype oid NOT NULL,
    trflang oid NOT NULL,
    trffromsql regproc NOT NULL,
    trftosql regproc NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_transform REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_transform OWNER TO pgc_dump;

--
-- Name: pg_trigger; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_trigger (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	tgrelid oid NOT NULL,
    tgname name NOT NULL,
    tgfoid oid NOT NULL,
    tgtype smallint NOT NULL,
    tgenabled "char" NOT NULL,
    tgisinternal boolean NOT NULL,
    tgconstrrelid oid NOT NULL,
    tgconstrindid oid NOT NULL,
    tgconstraint oid NOT NULL,
    tgdeferrable boolean NOT NULL,
    tginitdeferred boolean NOT NULL,
    tgnargs smallint NOT NULL,
    tgattr int2vector NOT NULL,
    tgargs bytea NOT NULL,
    tgqual pg_node_tree,
    tgoldtable name,
    tgnewtable name,
	tgdef text
);

ALTER TABLE ONLY pgc_dump.pg_trigger REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_trigger OWNER TO pgc_dump;

--
-- Name: pg_ts_config; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_ts_config (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	cfgname name NOT NULL,
    cfgnamespace oid NOT NULL,
    cfgowner oid NOT NULL,
    cfgparser oid NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_ts_config REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_ts_config OWNER TO pgc_dump;

SET default_with_oids = false;

--
-- Name: pg_ts_config_map; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_ts_config_map (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	mapcfg oid NOT NULL,
    maptokentype integer NOT NULL,
    mapseqno integer NOT NULL,
    mapdict oid NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_ts_config_map REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_ts_config_map OWNER TO pgc_dump;



--
-- Name: pg_ts_dict; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_ts_dict (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	dictname name NOT NULL,
    dictnamespace oid NOT NULL,
    dictowner oid NOT NULL,
    dicttemplate oid NOT NULL,
    dictinitoption text
);

ALTER TABLE ONLY pgc_dump.pg_ts_dict REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_ts_dict OWNER TO pgc_dump;

--
-- Name: pg_ts_parser; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_ts_parser (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	prsname name NOT NULL,
    prsnamespace oid NOT NULL,
    prsstart regproc NOT NULL,
    prstoken regproc NOT NULL,
    prsend regproc NOT NULL,
    prsheadline regproc NOT NULL,
    prslextype regproc NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_ts_parser REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_ts_parser OWNER TO pgc_dump;

--
-- Name: pg_ts_template; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_ts_template (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	tmplname name NOT NULL,
    tmplnamespace oid NOT NULL,
    tmplinit regproc NOT NULL,
    tmpllexize regproc NOT NULL
);

ALTER TABLE ONLY pgc_dump.pg_ts_template REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_ts_template OWNER TO pgc_dump;

--
-- Name: pg_type; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_type (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	toid oid not null,
	typname name NOT NULL,
    typnamespace oid NOT NULL,
    typowner oid NOT NULL,
    typlen smallint NOT NULL,
    typbyval boolean NOT NULL,
    typtype "char" NOT NULL,
    typcategory "char" NOT NULL,
    typispreferred boolean NOT NULL,
    typisdefined boolean NOT NULL,
    typdelim "char" NOT NULL,
    typrelid oid NOT NULL,
    typelem oid NOT NULL,
    typarray oid NOT NULL,
    typinput regproc NOT NULL,
    typoutput regproc NOT NULL,
    typreceive regproc NOT NULL,
    typsend regproc NOT NULL,
    typmodin regproc NOT NULL,
    typmodout regproc NOT NULL,
    typanalyze regproc NOT NULL,
    typalign "char" NOT NULL,
    typstorage "char" NOT NULL,
    typnotnull boolean NOT NULL,
    typbasetype oid NOT NULL,
    typtypmod integer NOT NULL,
    typndims integer NOT NULL,
    typcollation oid NOT NULL,
    typdefaultbin pg_node_tree,
    typdefault text,
    typacl aclitem[]
);

ALTER TABLE ONLY pgc_dump.pg_type REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_type OWNER TO pgc_dump;

--
-- Name: pg_user; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_user AS
 SELECT pg_shadow.usename,
    pg_shadow.usesysid,
    pg_shadow.usecreatedb,
    pg_shadow.usesuper,
    pg_shadow.userepl,
    pg_shadow.usebypassrls,
    '********'::text AS passwd,
    pg_shadow.valuntil,
    pg_shadow.useconfig
   FROM pg_shadow;


ALTER TABLE pgc_dump.pg_user OWNER TO pgc_dump;

--
-- Name: pg_user_mapping; Type: TABLE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE TABLE pgc_dump.pg_user_mapping (
    db_name character varying(256) NOT NULL,
	db_version character varying(32) NOT NULL,
	"oid" oid not null,
	umuser oid NOT NULL,
    umserver oid NOT NULL,
    umoptions text[]
);

ALTER TABLE ONLY pgc_dump.pg_user_mapping REPLICA IDENTITY NOTHING;


ALTER TABLE pgc_dump.pg_user_mapping OWNER TO pgc_dump;

--
-- Name: pg_user_mappings; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_user_mappings AS
 SELECT u.oid AS umid,
    s.oid AS srvid,
    s.srvname,
    u.umuser,
        CASE
            WHEN (u.umuser = (0)::oid) THEN 'public'::name
            ELSE a.rolname
        END AS usename,
        CASE
            WHEN (((u.umuser <> (0)::oid) AND (a.rolname = CURRENT_USER) AND (pg_has_role(s.srvowner, 'USAGE'::text) OR has_server_privilege(s.oid, 'USAGE'::text))) OR ((u.umuser = (0)::oid) AND pg_has_role(s.srvowner, 'USAGE'::text)) OR ( SELECT pg_authid.rolsuper
               FROM pg_authid
              WHERE (pg_authid.rolname = CURRENT_USER))) THEN u.umoptions
            ELSE NULL::text[]
        END AS umoptions
   FROM ((pg_user_mapping u
     JOIN pg_foreign_server s ON ((u.umserver = s.oid)))
     LEFT JOIN pg_authid a ON ((a.oid = u.umuser)));


ALTER TABLE pgc_dump.pg_user_mappings OWNER TO pgc_dump;

--
-- Name: pg_views; Type: VIEW; Schema: pgc_dump; Owner: pgc_dump
--

CREATE VIEW pgc_dump.pg_views AS
 SELECT n.nspname AS schemaname,
    c.relname AS viewname,
    pg_get_userbyid(c.relowner) AS viewowner,
    pg_get_viewdef(c.oid) AS definition
   FROM (pg_class c
     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
  WHERE (c.relkind = 'v'::"char");


ALTER TABLE pgc_dump.pg_views OWNER TO pgc_dump;

--
-- Name: pg_aggregate_fnoid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_aggregate_fnoid_index ON pgc_dump.pg_aggregate USING btree (aggfnoid,db_name,db_version);


--
-- Name: pg_am_name_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_am_name_index ON pgc_dump.pg_am USING btree (amname,db_name,db_version);


--
-- Name: pg_am_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_am_oid_index ON pgc_dump.pg_am USING btree (oid,db_name,db_version);


--
-- Name: pg_amop_fam_strat_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_amop_fam_strat_index ON pgc_dump.pg_amop USING btree (amopfamily, amoplefttype, amoprighttype, amopstrategy,db_name,db_version);


--
-- Name: pg_amop_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_amop_oid_index ON pgc_dump.pg_amop USING btree (oid,db_name,db_version);


--
-- Name: pg_amop_opr_fam_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_amop_opr_fam_index ON pgc_dump.pg_amop USING btree (amopopr, amoppurpose, amopfamily,db_name,db_version);


--
-- Name: pg_amproc_fam_proc_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_amproc_fam_proc_index ON pgc_dump.pg_amproc USING btree (amprocfamily, amproclefttype, amprocrighttype, amprocnum,db_name,db_version);


--
-- Name: pg_amproc_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_amproc_oid_index ON pgc_dump.pg_amproc USING btree (oid,db_name,db_version);


--
-- Name: pg_attrdef_adrelid_adnum_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_attrdef_adrelid_adnum_index ON pgc_dump.pg_attrdef USING btree (adrelid, adnum,db_name,db_version);


--
-- Name: pg_attrdef_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_attrdef_oid_index ON pgc_dump.pg_attrdef USING btree (oid,db_name,db_version);


--
-- Name: pg_attribute_relid_attnam_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_attribute_relid_attnam_index ON pgc_dump.pg_attribute USING btree (attrelid, attname,db_name,db_version);


--
-- Name: pg_attribute_relid_attnum_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_attribute_relid_attnum_index ON pgc_dump.pg_attribute USING btree (attrelid, attnum,db_name,db_version);




--
-- Name: pg_auth_members_member_role_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE UNIQUE INDEX pg_auth_members_member_role_index ON pgc_dump.pg_auth_members USING btree (member, roleid,db_name,db_version);


--
-- Name: pg_auth_members_role_member_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE UNIQUE INDEX pg_auth_members_role_member_index ON pgc_dump.pg_auth_members USING btree (roleid, member,db_name,db_version);


--
-- Name: pg_authid_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE UNIQUE INDEX pg_authid_oid_index ON pgc_dump.pg_authid USING btree (oid,db_name,db_version);


--
-- Name: pg_authid_rolname_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE UNIQUE INDEX pg_authid_rolname_index ON pgc_dump.pg_authid USING btree (rolname,db_name,db_version);


SET default_tablespace = '';

--
-- Name: pg_cast_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_cast_oid_index ON pgc_dump.pg_cast USING btree (oid,db_name,db_version);


--
-- Name: pg_cast_source_target_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_cast_source_target_index ON pgc_dump.pg_cast USING btree (castsource, casttarget,db_name,db_version);


--
-- Name: pg_class_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_class_oid_index ON pgc_dump.pg_class USING btree (oid,db_name,db_version);


--
-- Name: pg_class_relname_nsp_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_class_relname_nsp_index ON pgc_dump.pg_class USING btree (relname, relnamespace,db_name,db_version);


--
-- Name: pg_class_tblspc_relfilenode_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE INDEX pg_class_tblspc_relfilenode_index ON pgc_dump.pg_class USING btree (reltablespace, relfilenode);


--
-- Name: pg_collation_name_enc_nsp_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_collation_name_enc_nsp_index ON pgc_dump.pg_collation USING btree (collname, collencoding, collnamespace,db_name,db_version);


--
-- Name: pg_collation_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_collation_oid_index ON pgc_dump.pg_collation USING btree (oid,db_name,db_version);


--
-- Name: pg_constraint_conname_nsp_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE INDEX pg_constraint_conname_nsp_index ON pgc_dump.pg_constraint USING btree (conname, connamespace);


--
-- Name: pg_constraint_conparentid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE INDEX pg_constraint_conparentid_index ON pgc_dump.pg_constraint USING btree (conparentid);


--
-- Name: pg_constraint_conrelid_contypid_conname_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_constraint_conrelid_contypid_conname_index ON pgc_dump.pg_constraint USING btree (conrelid, contypid, conname,db_name,db_version);


--
-- Name: pg_constraint_contypid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE INDEX pg_constraint_contypid_index ON pgc_dump.pg_constraint USING btree (contypid);


--
-- Name: pg_constraint_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_constraint_oid_index ON pgc_dump.pg_constraint USING btree (oid,db_name,db_version);


--
-- Name: pg_conversion_default_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_conversion_default_index ON pgc_dump.pg_conversion USING btree (connamespace, conforencoding, contoencoding, oid,db_name,db_version);


--
-- Name: pg_conversion_name_nsp_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_conversion_name_nsp_index ON pgc_dump.pg_conversion USING btree (conname, connamespace,db_name,db_version);


--
-- Name: pg_conversion_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_conversion_oid_index ON pgc_dump.pg_conversion USING btree (oid,db_name,db_version);




--
-- Name: pg_database_datname_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE UNIQUE INDEX pg_database_datname_index ON pgc_dump.pg_database USING btree (datname,db_name,db_version);


--
-- Name: pg_database_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE UNIQUE INDEX pg_database_oid_index ON pgc_dump.pg_database USING btree (oid,db_name,db_version);


--
-- Name: pg_db_role_setting_databaseid_rol_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE UNIQUE INDEX pg_db_role_setting_databaseid_rol_index ON pgc_dump.pg_db_role_setting USING btree (setdatabase, setrole,db_name,db_version);


SET default_tablespace = '';

--
-- Name: pg_default_acl_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_default_acl_oid_index ON pgc_dump.pg_default_acl USING btree (oid,db_name,db_version);


--
-- Name: pg_default_acl_role_nsp_obj_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_default_acl_role_nsp_obj_index ON pgc_dump.pg_default_acl USING btree (defaclrole, defaclnamespace, defaclobjtype,db_name,db_version);


--
-- Name: pg_depend_depender_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE INDEX pg_depend_depender_index ON pgc_dump.pg_depend USING btree (classid, objid, objsubid,db_name,db_version);


--
-- Name: pg_depend_reference_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE INDEX pg_depend_reference_index ON pgc_dump.pg_depend USING btree (refclassid, refobjid, refobjsubid);


--
-- Name: pg_description_o_c_o_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_description_o_c_o_index ON pgc_dump.pg_description USING btree (objoid, classoid, objsubid,db_name,db_version);


--
-- Name: pg_enum_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_enum_oid_index ON pgc_dump.pg_enum USING btree (oid,db_name,db_version);


--
-- Name: pg_enum_typid_label_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_enum_typid_label_index ON pgc_dump.pg_enum USING btree (enumtypid, enumlabel,db_name,db_version);


--
-- Name: pg_enum_typid_sortorder_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_enum_typid_sortorder_index ON pgc_dump.pg_enum USING btree (enumtypid, enumsortorder,db_name,db_version);


--
-- Name: pg_event_trigger_evtname_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_event_trigger_evtname_index ON pgc_dump.pg_event_trigger USING btree (evtname,db_name,db_version);


--
-- Name: pg_event_trigger_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_event_trigger_oid_index ON pgc_dump.pg_event_trigger USING btree (oid,db_name,db_version);


--
-- Name: pg_extension_name_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_extension_name_index ON pgc_dump.pg_extension USING btree (extname,db_name,db_version);


--
-- Name: pg_extension_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_extension_oid_index ON pgc_dump.pg_extension USING btree (oid,db_name,db_version);


--
-- Name: pg_foreign_data_wrapper_name_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_foreign_data_wrapper_name_index ON pgc_dump.pg_foreign_data_wrapper USING btree (fdwname,db_name,db_version);


--
-- Name: pg_foreign_data_wrapper_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_foreign_data_wrapper_oid_index ON pgc_dump.pg_foreign_data_wrapper USING btree (oid,db_name,db_version);


--
-- Name: pg_foreign_server_name_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_foreign_server_name_index ON pgc_dump.pg_foreign_server USING btree (srvname,db_name,db_version);


--
-- Name: pg_foreign_server_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_foreign_server_oid_index ON pgc_dump.pg_foreign_server USING btree (oid,db_name,db_version);


--
-- Name: pg_foreign_table_relid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_foreign_table_relid_index ON pgc_dump.pg_foreign_table USING btree (ftrelid,db_name,db_version);


--
-- Name: pg_index_indexrelid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_index_indexrelid_index ON pgc_dump.pg_index USING btree (indexrelid,db_name,db_version);


--
-- Name: pg_index_indrelid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE INDEX pg_index_indrelid_index ON pgc_dump.pg_index USING btree (indrelid);


--
-- Name: pg_inherits_parent_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE INDEX pg_inherits_parent_index ON pgc_dump.pg_inherits USING btree (inhparent);


--
-- Name: pg_inherits_relid_seqno_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_inherits_relid_seqno_index ON pgc_dump.pg_inherits USING btree (inhrelid, inhseqno,db_name,db_version);


--
-- Name: pg_init_privs_o_c_o_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_init_privs_o_c_o_index ON pgc_dump.pg_init_privs USING btree (objoid, classoid, objsubid,db_name,db_version);


--
-- Name: pg_language_name_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_language_name_index ON pgc_dump.pg_language USING btree (lanname,db_name,db_version);


--
-- Name: pg_language_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_language_oid_index ON pgc_dump.pg_language USING btree (oid,db_name,db_version);


--
-- Name: pg_largeobject_loid_pn_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_largeobject_loid_pn_index ON pgc_dump.pg_largeobject USING btree (loid, pageno,db_name,db_version);


--
-- Name: pg_largeobject_metadata_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_largeobject_metadata_oid_index ON pgc_dump.pg_largeobject_metadata USING btree (oid,db_name,db_version);


--
-- Name: pg_namespace_nspname_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_namespace_nspname_index ON pgc_dump.pg_namespace USING btree (nspname,db_name,db_version);


--
-- Name: pg_namespace_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_namespace_oid_index ON pgc_dump.pg_namespace USING btree (oid,db_name,db_version);


--
-- Name: pg_opclass_am_name_nsp_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_opclass_am_name_nsp_index ON pgc_dump.pg_opclass USING btree (opcmethod, opcname, opcnamespace,db_name,db_version);


--
-- Name: pg_opclass_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_opclass_oid_index ON pgc_dump.pg_opclass USING btree (oid,db_name,db_version);


--
-- Name: pg_operator_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_operator_oid_index ON pgc_dump.pg_operator USING btree (oid,db_name,db_version);


--
-- Name: pg_operator_oprname_l_r_n_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_operator_oprname_l_r_n_index ON pgc_dump.pg_operator USING btree (oprname, oprleft, oprright, oprnamespace,db_name,db_version);


--
-- Name: pg_opfamily_am_name_nsp_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_opfamily_am_name_nsp_index ON pgc_dump.pg_opfamily USING btree (opfmethod, opfname, opfnamespace,db_name,db_version);


--
-- Name: pg_opfamily_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_opfamily_oid_index ON pgc_dump.pg_opfamily USING btree (oid,db_name,db_version);


--
-- Name: pg_partitioned_table_partrelid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_partitioned_table_partrelid_index ON pgc_dump.pg_partitioned_table USING btree (partrelid,db_name,db_version);




--
-- Name: pg_pltemplate_name_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE UNIQUE INDEX pg_pltemplate_name_index ON pgc_dump.pg_pltemplate USING btree (tmplname,db_name,db_version);


SET default_tablespace = '';

--
-- Name: pg_policy_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_policy_oid_index ON pgc_dump.pg_policy USING btree (oid,db_name,db_version);


--
-- Name: pg_policy_polrelid_polname_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_policy_polrelid_polname_index ON pgc_dump.pg_policy USING btree (polrelid, polname,db_name,db_version);


--
-- Name: pg_proc_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_proc_oid_index ON pgc_dump.pg_proc USING btree (oid,db_name,db_version);


--
-- Name: pg_proc_proname_args_nsp_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_proc_proname_args_nsp_index ON pgc_dump.pg_proc USING btree (proname, proargtypes, pronamespace,db_name,db_version);


--
-- Name: pg_publication_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_publication_oid_index ON pgc_dump.pg_publication USING btree (oid,db_name,db_version);


--
-- Name: pg_publication_pubname_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_publication_pubname_index ON pgc_dump.pg_publication USING btree (pubname,db_name,db_version);


--
-- Name: pg_publication_rel_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_publication_rel_oid_index ON pgc_dump.pg_publication_rel USING btree (oid,db_name,db_version);


--
-- Name: pg_publication_rel_prrelid_prpubid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_publication_rel_prrelid_prpubid_index ON pgc_dump.pg_publication_rel USING btree (prrelid, prpubid,db_name,db_version);


--
-- Name: pg_range_rngtypid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_range_rngtypid_index ON pgc_dump.pg_range USING btree (rngtypid,db_name,db_version);




--
-- Name: pg_replication_origin_roiident_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE UNIQUE INDEX pg_replication_origin_roiident_index ON pgc_dump.pg_replication_origin USING btree (roident,db_name,db_version);


--
-- Name: pg_replication_origin_roname_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE UNIQUE INDEX pg_replication_origin_roname_index ON pgc_dump.pg_replication_origin USING btree (roname text_pattern_ops,db_name,db_version);


SET default_tablespace = '';

--
-- Name: pg_rewrite_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_rewrite_oid_index ON pgc_dump.pg_rewrite USING btree (oid,db_name,db_version);


--
-- Name: pg_rewrite_rel_rulename_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_rewrite_rel_rulename_index ON pgc_dump.pg_rewrite USING btree (ev_class, rulename,db_name,db_version);


--
-- Name: pg_seclabel_object_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_seclabel_object_index ON pgc_dump.pg_seclabel USING btree (objoid, classoid, objsubid, provider text_pattern_ops,db_name,db_version);


--
-- Name: pg_sequence_seqrelid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_sequence_seqrelid_index ON pgc_dump.pg_sequence USING btree (seqrelid,db_name,db_version);




--
-- Name: pg_shdepend_depender_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE INDEX pg_shdepend_depender_index ON pgc_dump.pg_shdepend USING btree (dbid, classid, objid, objsubid);


--
-- Name: pg_shdepend_reference_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE INDEX pg_shdepend_reference_index ON pgc_dump.pg_shdepend USING btree (refclassid, refobjid);


--
-- Name: pg_shdescription_o_c_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE UNIQUE INDEX pg_shdescription_o_c_index ON pgc_dump.pg_shdescription USING btree (objoid, classoid,db_name,db_version);


--
-- Name: pg_shseclabel_object_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE UNIQUE INDEX pg_shseclabel_object_index ON pgc_dump.pg_shseclabel USING btree (objoid, classoid, provider text_pattern_ops,db_name,db_version);


SET default_tablespace = '';

--
-- Name: pg_statistic_ext_name_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_statistic_ext_name_index ON pgc_dump.pg_statistic_ext USING btree (stxname, stxnamespace,db_name,db_version);


--
-- Name: pg_statistic_ext_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_statistic_ext_oid_index ON pgc_dump.pg_statistic_ext USING btree (oid,db_name,db_version);


--
-- Name: pg_statistic_ext_relid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE INDEX pg_statistic_ext_relid_index ON pgc_dump.pg_statistic_ext USING btree (stxrelid);


--
-- Name: pg_statistic_relid_att_inh_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_statistic_relid_att_inh_index ON pgc_dump.pg_statistic USING btree (starelid, staattnum, stainherit,db_name,db_version);




--
-- Name: pg_subscription_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE UNIQUE INDEX pg_subscription_oid_index ON pgc_dump.pg_subscription USING btree (oid,db_name,db_version);


SET default_tablespace = '';

--
-- Name: pg_subscription_rel_srrelid_srsubid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_subscription_rel_srrelid_srsubid_index ON pgc_dump.pg_subscription_rel USING btree (srrelid, srsubid,db_name,db_version);




--
-- Name: pg_subscription_subname_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE UNIQUE INDEX pg_subscription_subname_index ON pgc_dump.pg_subscription USING btree (subdbid, subname,db_name,db_version);


--
-- Name: pg_tablespace_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE UNIQUE INDEX pg_tablespace_oid_index ON pgc_dump.pg_tablespace USING btree (oid,db_name,db_version);


--
-- Name: pg_tablespace_spcname_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump; Tablespace: pg_global
--

CREATE UNIQUE INDEX pg_tablespace_spcname_index ON pgc_dump.pg_tablespace USING btree (spcname,db_name,db_version);


SET default_tablespace = '';

--
-- Name: pg_transform_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_transform_oid_index ON pgc_dump.pg_transform USING btree (oid,db_name,db_version);


--
-- Name: pg_transform_type_lang_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_transform_type_lang_index ON pgc_dump.pg_transform USING btree (trftype, trflang,db_name,db_version);


--
-- Name: pg_trigger_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_trigger_oid_index ON pgc_dump.pg_trigger USING btree (oid,db_name,db_version);


--
-- Name: pg_trigger_tgconstraint_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE INDEX pg_trigger_tgconstraint_index ON pgc_dump.pg_trigger USING btree (tgconstraint);


--
-- Name: pg_trigger_tgrelid_tgname_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_trigger_tgrelid_tgname_index ON pgc_dump.pg_trigger USING btree (tgrelid, tgname,db_name,db_version);


--
-- Name: pg_ts_config_cfgname_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_ts_config_cfgname_index ON pgc_dump.pg_ts_config USING btree (cfgname, cfgnamespace,db_name,db_version);


--
-- Name: pg_ts_config_map_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_ts_config_map_index ON pgc_dump.pg_ts_config_map USING btree (mapcfg, maptokentype, mapseqno,db_name,db_version);


--
-- Name: pg_ts_config_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_ts_config_oid_index ON pgc_dump.pg_ts_config USING btree (oid,db_name,db_version);


--
-- Name: pg_ts_dict_dictname_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_ts_dict_dictname_index ON pgc_dump.pg_ts_dict USING btree (dictname, dictnamespace,db_name,db_version);


--
-- Name: pg_ts_dict_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_ts_dict_oid_index ON pgc_dump.pg_ts_dict USING btree (oid,db_name,db_version);


--
-- Name: pg_ts_parser_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_ts_parser_oid_index ON pgc_dump.pg_ts_parser USING btree (oid,db_name,db_version);


--
-- Name: pg_ts_parser_prsname_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_ts_parser_prsname_index ON pgc_dump.pg_ts_parser USING btree (prsname, prsnamespace,db_name,db_version);


--
-- Name: pg_ts_template_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_ts_template_oid_index ON pgc_dump.pg_ts_template USING btree (oid,db_name,db_version);


--
-- Name: pg_ts_template_tmplname_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_ts_template_tmplname_index ON pgc_dump.pg_ts_template USING btree (tmplname, tmplnamespace,db_name,db_version);


--
-- Name: pg_type_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_type_oid_index ON pgc_dump.pg_type USING btree (oid,db_name,db_version);


--
-- Name: pg_type_typname_nsp_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_type_typname_nsp_index ON pgc_dump.pg_type USING btree (typname, typnamespace,db_name,db_version);


--
-- Name: pg_user_mapping_oid_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_user_mapping_oid_index ON pgc_dump.pg_user_mapping USING btree (oid,db_name,db_version);


--
-- Name: pg_user_mapping_user_server_index; Type: INDEX; Schema: pgc_dump; Owner: pgc_dump
--

CREATE UNIQUE INDEX pg_user_mapping_user_server_index ON pgc_dump.pg_user_mapping USING btree (umuser, umserver,db_name,db_version);


--
-- Name: pg_settings pg_settings_n; Type: RULE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE RULE pg_settings_n AS
    ON UPDATE TO pgc_dump.pg_settings DO INSTEAD NOTHING;


--
-- Name: pg_settings pg_settings_u; Type: RULE; Schema: pgc_dump; Owner: pgc_dump
--

CREATE RULE pg_settings_u AS
    ON UPDATE TO pgc_dump.pg_settings
   WHERE (new.name = old.name) DO  SELECT set_config(old.name, new.setting, false) AS set_config;


--
-- pgc_dumpQL database dump complete
--


CREATE OR REPLACE FUNCTION pgc_dump.pg_is_in_recovery()
 RETURNS boolean
 LANGUAGE internal
 PARALLEL SAFE STRICT
AS $function$pg_is_in_recovery$function$;

CREATE OR REPLACE FUNCTION pgc_dump.acldefault("char", oid)
 RETURNS aclitem[]
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$acldefault_sql$function$;

CREATE OR REPLACE FUNCTION pgc_dump.pg_get_partkeydef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_partkeydef$function$;


CREATE OR REPLACE FUNCTION pgc_dump.regprocout(regproc)
 RETURNS cstring
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$regprocout$function$;

CREATE OR REPLACE FUNCTION pgc_dump.pg_options_to_table(options_array text[], OUT option_name text, OUT option_value text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT ROWS 3
AS $function$pg_options_to_table$function$;

CREATE OR REPLACE FUNCTION pgc_dump.current_schemas(boolean)
 RETURNS name[]
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$current_schemas$function$;

CREATE OR REPLACE FUNCTION pgc_dump.pg_get_function_arguments(oid)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_function_arguments$function$;

CREATE OR REPLACE FUNCTION pgc_dump.pg_get_function_identity_arguments(oid)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_function_identity_arguments$function$;

CREATE OR REPLACE FUNCTION pgc_dump.pg_get_function_result(oid)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_function_result$function$;

CREATE OR REPLACE FUNCTION pgc_dump.shobj_description(oid, name)
 RETURNS text
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT
AS $function$select description from pgc_dump.pg_shdescription where objoid = $1 and classoid = (select oid from pgc_dump.pg_class where relname = $2 and relnamespace = 11)$function$;

CREATE OR REPLACE FUNCTION pgc_dump.pg_get_viewdef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_get_viewdef$function$;

CREATE OR REPLACE FUNCTION pgc_dump.format_type(oid, integer)
 RETURNS text
 LANGUAGE internal
 STABLE PARALLEL SAFE
AS $function$format_type$function$;

CREATE OR REPLACE FUNCTION pgc_dump.quote_ident(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$quote_ident$function$;

CREATE OR REPLACE FUNCTION pgc_dump.quote_literal(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$quote_literal$function$;

CREATE OR REPLACE FUNCTION pgc_dump.pg_get_expr(
	pg_node_tree,
	oid)
    RETURNS text
    LANGUAGE 'internal'
    STABLE STRICT PARALLEL SAFE
AS $function$pg_get_expr$function$;


CREATE OR REPLACE FUNCTION pgc_dump.pg_table_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE PARALLEL SAFE STRICT
AS $function$pg_table_is_visible$function$
